[
  {
    "objectID": "lessons/Lesson14.html",
    "href": "lessons/Lesson14.html",
    "title": "Publication-Quality Plots with ggplot2",
    "section": "",
    "text": "Putting it all together\n\n\n\n\n\n\n\n\n\n\n\n\nLearning Goals\n\n\n\n\n\nAt the end of this lesson, you should:"
  },
  {
    "objectID": "lessons/Lesson15.html",
    "href": "lessons/Lesson15.html",
    "title": "Lesson 14: Repeating Actions with Purrr",
    "section": "",
    "text": "Putting it all together\n\n\n\n\n\n\n\n\n\n\n\n\nLearning Goals\n\n\n\n\n\nAt the end of this lesson, you should:"
  },
  {
    "objectID": "lessons/Lesson08.html",
    "href": "lessons/Lesson08.html",
    "title": "Lesson 8: Introduction to Data Wrangling",
    "section": "",
    "text": "Selecting columns\n\n\nFiltering a data set\n\n\nCreating New Variables\n\n\nRenaming Variables\n\n\nSorting a data set\n\n\nAggregating & Summarizing Data\n\n\n\n\n\n\nPutting it all together\n\n\n\n\n\n\n\n\n\n\n\n\nLearning Goals\n\n\n\n\n\nAt the end of this lesson, you should:"
  },
  {
    "objectID": "lessons/Lesson12.html",
    "href": "lessons/Lesson12.html",
    "title": "Lesson 11: Exporting Data",
    "section": "",
    "text": "Putting it all together\n\n\n\n\n\n\n\n\n\n\n\n\nLearning Goals\n\n\n\n\n\nAt the end of this lesson, you should:"
  },
  {
    "objectID": "lessons/Lesson03.html",
    "href": "lessons/Lesson03.html",
    "title": "Lesson 3: Vectorizing Operations",
    "section": "",
    "text": "Vectorizing operations\nUsing R as a calculator between a few numbers is handy, but typically we are hoping to do so much more with it, such as performing a calculations across a long list of numbers.\nR is naturally vectorized, which means that you can easily perform a mathematical operation across a vector of numbers (no need to write loops!)\nSay we have a collection of numbers from 10 to 20 and we want to multiple them all by 12. We can create a sequence of numbers by wrapping them all in c() command (for “concatenate”) and separating each with a comma.\n\nc(10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)\n\n [1] 10 11 12 13 14 15 16 17 18 19 20\n\n\nThen those numbers can be operated on by any math operator:\n\nc(10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) * 10 - 1\n\n [1]  99 109 119 129 139 149 159 169 179 189 199\n\n\nThere’s also a quicker way to specify a sequence of integers using the notation start:end:\n\n1:10\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n\nIt also counts down:\n\n20:10\n\n [1] 20 19 18 17 16 15 14 13 12 11 10\n\n\nAnd works with negative integers:\n\n-5:5\n\n [1] -5 -4 -3 -2 -1  0  1  2  3  4  5\n\n\nThese can be operated on:\n\n(-5:5)^2\n\n [1] 25 16  9  4  1  0  1  4  9 16 25\n\n\n\n\nObject assignment\nIt is rather cumbersome to continually retype numbers, even while using a shortcut. There’s a general rule of “DRY” when coding, which means “Don’t repeat yourself”. We can avoid this by assigning these numbers to an R object.\nTraditionally, the left arrow is used for object assignment, <- (less than symbol + a dash), but the standard equals sign, = also works. These are equivalent:\n\nx <- 1\nx = 1\n\nWe can assign multiple numbers to an object\n\nx_vector <- 1:10\ny_vector <- c(2, 4, 6, 8, 10)\n\nThe left arrow assignment <- takes everything on the right side of the arrow and assigns it the object name on the left.\nWhat’s going with object names?\nIt is your choice (mostly) about what to name R objects. There are a few rules to follow:\n\nspaces are generally not allowed and a huge pain - avoid at all costs!\nDon’t start with a number or symbol! (this is technically possible, but a huge pain)\nchoose a name that is short, yet descriptive\nR is case sensitive, so test is different from Test and TEST. Be mindful of this! It trips many folks up.\n\nIt’s possible that you will thank yourself for using lowercase and avoiding special symbols (aside from . and _)\nif you start a function name with a “.” (e.g. .variable), you won’t see it listed in the global environment (which can be frustrating)\nyou cannot use “reserved words” from the R language (terms set aside for very specific purposes in R). When typing these in an R console, they usually light up in a special colors.\n\n\n.z <- 1:10\n\nMore on object naming.\n|————-|—————-| |reserved word | meaning | | TRUE FALSE | logical | | NA | missing value | | NaN | not a number/undefined | | NULL | no value/undefined | | Inf, -Inf | infinity | | for in | for loops | | if else while break next repeat | control flow | | NA_integer_ NA_real_ NA_complex_ NA_character_ | missing data by class\nIt’s easy to forgot these. Run ?reserved in an R console to remind yourself if need be.\nSome examples of reserved words in the wild:\n\nlog(0)\n\n[1] -Inf\n\n0/0\n\n[1] NaN\n\n2/0\n\n[1] Inf\n\n\n\n\n\n\n\n\nPutting it all together\n\n\n\nCheck the environment pane. These are the object you created during the session. This is where you will see all objects created, unless you have choosen to render the objects invisible by starting their object names with a ., a period.\n\n\n\n\n\n\n\n\nLearning Goals\n\n\n\n\n\nAt the end of this lesson, you should:\n\nunderstand how to assign variables and collections of numbers to an object name\nknown the rules for how to name objects\nunderstand reserved words in R and how to find them\nbe able to create a sequence of numbers in R using any starting value and any ending value"
  },
  {
    "objectID": "lessons/Lesson01.html",
    "href": "lessons/Lesson01.html",
    "title": "Lesson 1: Introduction to RStudio",
    "section": "",
    "text": "RStudio is more than a graphical user interface for R. It is an integrated development environment (IDE), that is a full service application for supporting software development. It can perform multitudes, so more than most people need. It is the supermarket of R functionality. Like a supermarket, there are parts of RStudio you will visit frequently and parts you will rarely if ever use. After 10+ years of using RStudio on a near daily basis, there are several parts of it that I continue to be unfamiliar with! Ths is okay - clearly, I have not needed those parts. You will come to find what sections youn will need most over time and practice.\nStill, it helps to have a guided tour. Let’s dive into this."
  },
  {
    "objectID": "lessons/Lesson01.html#the-panes",
    "href": "lessons/Lesson01.html#the-panes",
    "title": "Lesson 1: Introduction to RStudio",
    "section": "The Panes",
    "text": "The Panes\n\nThe Console/Terminal/Background Jobs\n\n\n\n\n\nDefault location: left or bottom left\n\n\n\n\n\n\n\nTab\nFunction\n\n\n\n\nConsole\nwhere R commands are actually done\n\n\nTerminal\nuse a terminal language such as bash or the windows command prompt\n\n\nBackground jobs\nusual pacakage installation\n\n\nRender\nfor building markdown or quarto documents (only present when actively rendering)\n\n\n\nIn this workshop, we will only be using the Console.\n\n\nFiles/Plots/Packages/Help/Viewer/Presentation\n\n\n\n\n\nDefault location: bottom right\nProbably the most useful pane - we will be here frequently!\n\n\n\nTab\nFunction\n\n\n\n\nPlots\nview plots\n\n\nFiles\nexplore your file system\n\n\nPackages\ninstall, update and load packages\n\n\nHelp\nhelps files & examples\n\n\nViewer\nfor previewing websites\n\n\nPresentation\nfor previewing presentations\n\n\n\nWe will not be using the Viewer or Presentations tabs in this workshop.\nWhat are Packages?\nThese make the world go around in R. All of R consists of packages or libraries that have certain functionality associated with them. Some of are maintained by the R core team, others are maintained by outsiders. All packages are open source and most are a volunteer effort. When you open R, several packages are loaded automatically: base, datasets, graphics, grDevices, methods, stats, utils.\nWe will talk about package installation and usage later in this course/workshop.\n\n\nEnvironment/History/Connections/Build/Git/Tutorial\n\n\n\n\n\n\n\n\n\n\n\n\nTab\nFunction\n\n\n\n\nEnvironment\nobjects created and existing in your current R session\n\n\nHistory\nprevious R command run\n\n\nConnections\nto connect to an external database\n\n\nBuild\nfor building R packages and other large projects\n\n\nGit\nonly visible if you’ve initialized a git repository\n\n\nTutorial\ntutorials build by Posit (very helpful)\n\n\n\nhere\n\n\nOur Scripts Pane\n\n\n\n\n\ndefault location: upper left\nThese are all the files we create and edit: .R, .Rmd, .txt, …\nwhen we open files from the “Files” pane, this is where it shows up"
  },
  {
    "objectID": "lessons/Lesson01.html#the-upper-menu-items",
    "href": "lessons/Lesson01.html#the-upper-menu-items",
    "title": "Lesson 1: Introduction to RStudio",
    "section": "The Upper Menu Items",
    "text": "The Upper Menu Items\n\n\n\n\n\n\nFile\n\nopening and/or creating files\n\nopening and/or creating projects\n\nrecent files, recent project\n\n(standard file functionality)\n\n\n\nEdit\n\ncopy, paste, find\nvery handy “find in files” feature!\n\n\n\nCode\n\nincredible useful set of commands\nsome are very simple (“comment lines”), others are complex (“rename in scope”)\nover time, you will learn what some (or all) of these mean and perhaps make use of them (if you don’t, that is okay)\n\n\n\nView\n\nrearrange panes\nzoom in/out\noverall not that useful, except for the shortcuts\n\n\n\nPlots\n\nmeh\n\n\n\nSession\n\nvery handy for restarting your R session\nmanually set the working directory (we will do this in a few weeks)\n\n\n\nBuild\n\nadvanced tools for building packages, websites, et cetera. I’ve never visited this part of the supermarket.\n\n\n\nDebug\n\ntools for debugging code (removing scripting errors). We will not use this in the workshop! But you can learn more about it here.\n\n\n\nProfile\n\nfor code profiling (checking how long it takes your code to run). We will also not be using this in the workshop. This is part of the supermarket I rarely visit.\n\n\n\nTools\n\nsome handy utility function. I mostly use this menu item to set preferences via “Global Options”.\n\n\n\nHelp\n\nmore utility functions. You can check for RStudio updates here, access community help forum, and other forms of documentation in addition to standard help files.\n\n\n\nmore\nRstudio has a massive number of keyboard shortcuts. You can find them in the menu (Help –> Cheat Sheets) and summarized in this cheat sheet\n\n\n\n\n\n\nLearning Recap\n\n\n\n\n\nAt the end of this lesson, you should understand:\n\nWhat the different tabs in each of the panes of RStudio do\nWhat is in each menu item in Rstudio and have a general sense of functionality available"
  },
  {
    "objectID": "lessons/Lesson09.html",
    "href": "lessons/Lesson09.html",
    "title": "Lesson 9: Reshaping Data Sets",
    "section": "",
    "text": "Putting it all together\n\n\n\n\n\n\n\n\n\n\n\n\nLearning Goals\n\n\n\n\n\nAt the end of this lesson, you should:"
  },
  {
    "objectID": "lessons/Lesson02.html",
    "href": "lessons/Lesson02.html",
    "title": "Lesson 2: Math Operators",
    "section": "",
    "text": "Use R as a calculator:\nAddition, substraction, multiplication, division\n\n1 + 3\n\n[1] 4\n\n10 - 15\n\n[1] -5\n\n2*8\n\n[1] 16\n\n60/12\n\n[1] 5\n\n\nexponentiate\n\n3^2\n\n[1] 9\n\n2^4\n\n[1] 16\n\n9^0\n\n[1] 1\n\n2^-2\n\n[1] 0.25\n\n\nroots (square, cube, ….)\n\n4^(1/2)\n\n[1] 2\n\n8^(1/3)\n\n[1] 2\n\n\nlogs\n\nlog(10)\n\n[1] 2.302585\n\n\n(base e)\nlog with base 10\n\nlog10(10)\n\n[1] 1\n\n\nUsing sign:\n\n3*-4\n\n[1] -12\n\n\nLike in standard math, only negatively signed numbers need to be specified.\nThere’s more:\ninteger division (the remainder is discarded)\n\n5 %/% 3\n\n[1] 1\n\n\nmodulus operator (return the remainder after division)\n\n5 %% 3\n\n[1] 2\n\n\n….and so much more\nLogical Operators\nThese test for conditions and return either a TRUE or FALSE\n\n\n\nsyntax\nFunction\n\n\n\n\n==\nequal\n\n\n!=\ndoes not equal\n\n\n<\nless than\n\n\n>\ngreater than\n\n\n<=, >=\nless than and equal to, and greater than equivalent\n\n\n\n\n1 == 1\n\n[1] TRUE\n\n1 == 2\n\n[1] FALSE\n\n1 != 2\n\n[1] TRUE\n\n1 < 1\n\n[1] FALSE\n\n1 > 1\n\n[1] FALSE\n\n1 <= 1\n\n[1] TRUE\n\n1 >= 1\n\n[1] TRUE\n\n\nUse & if two things must be true and | if one of two things must be true:\n\n1 < 2 & 1 != 1\n\n[1] FALSE\n\n1 < 2 | 1 != 1\n\n[1] TRUE\n\n\n\n\nOrder of operations.\nWhat results from this?\n\n2*6 - 6*9 + 3*30 /7\n\nThe rules:\n\noperations go left to right\nexponents are first, followed by ‘unary operators’ (that is, variable signs)\nmultiplication and division before subtraction and/or addition\nlogical operators come after all mathematical transformations\nParentheses overall all other rules!\n\nHere is the official R guide to order of operations (warning: this is complicated and refers to functions beyond mathematical operations).\n\n\nSome notes on R syntax\n\nmost often, the amount of white space does not matter.\nThese are the same:\n\n\n4/3\n\n[1] 1.333333\n\n4/    3\n\n[1] 1.333333\n\n4    /  3\n\n[1] 1.333333\n\n\n\nthese are also the same\n\n\nlog(10)\n\n[1] 2.302585\n\nlog( 10 )\n\n[1] 2.302585\n\nlog ( 10)\n\n[1] 2.302585\n\n\n\na hard return between lines of code is enough to separate the commands\nexception: unclosed parentheses, brackets, or quotes. R will wait for these to be completed. A single quote must always be complemented by a second single quote, and a double quote likewise must always have a second quote to complete it. Left parentheses, curly braces, or brackets much also be accompanying by their right-sided complement.\ngood examples\n\n{ }\n( )\n[ ]\n\"  \"\n' '\n` `\n\nbad examples\n\n'\n(  } ] \n\"\n' \"\n\nthere is no difference between double and single quotes on a practical level, but R will interpret them as different commands (so a single quote cannot close a double quote). This is useful when there is nested levels of quoting (rare), and yet, it happens now and then.\n\n\n\n\n\n\n\nPutting it all together\n\n\n\nCheck the “History” tab in the upper right hand pane (this should be to the right of the “Environment” tab). What is there?\nIf you followed along and coded the above examples, you should see the command you ran previously (including any mistakes). This is your command history. There are several icons directly above your history - explore what those do (hoover before clicking any icon to make sure you are okay with action before performing it).\n\n\n\n\n\n\n\n\nLearning Goals\n\n\n\n\n\nAt the end of this lesson, you should:\n\nUnderstand sorts of math operators available in R and how to use them\nUnderstand logical operators in R\nBe aware of the order of operations\nBe aware of how whitespace is interpreted in R\nUnderstand how to use parentheses, brackets, braces and quotations in R"
  },
  {
    "objectID": "lessons/Lesson06.html",
    "href": "lessons/Lesson06.html",
    "title": "Special Lesson 6: R Functions & R Help",
    "section": "",
    "text": "We have thus far used a few R functions without explicity stating how they work exactly."
  },
  {
    "objectID": "lessons/Lesson06.html#using-r-help",
    "href": "lessons/Lesson06.html#using-r-help",
    "title": "Special Lesson 6: R Functions & R Help",
    "section": "Using R Help",
    "text": "Using R Help"
  },
  {
    "objectID": "lessons/Lesson06.html#concluding-thoughts",
    "href": "lessons/Lesson06.html#concluding-thoughts",
    "title": "Special Lesson 6: R Functions & R Help",
    "section": "Concluding Thoughts",
    "text": "Concluding Thoughts\nThis is the last section with a major focus on ‘base R’, that is the set of functions that come automatically loaded when you install and open R.\nTake a loook at this long-ish cheat sheet (4 pages long!) of the many useful commands in base R. Skim through this and see if there is anything useful for you. It is meant to periodically skimmed, not studied in great detail (you’ll put yourself to sleep if you try to read it beginning to end).\n\n\n\n\n\n\nPutting it all together\n\n\n\n\n\n\n\n\n\n\n\n\nLearning Goals\n\n\n\n\n\nAt the end of this lesson, you should:"
  },
  {
    "objectID": "lessons/Lesson07.html",
    "href": "lessons/Lesson07.html",
    "title": "Lesson 7: Importing Data into R",
    "section": "",
    "text": "Putting it all together\n\n\n\n\n\n\n\n\n\n\n\n\nLearning Goals\n\n\n\n\n\nAt the end of this lesson, you should:"
  },
  {
    "objectID": "lessons/Lesson13.html",
    "href": "lessons/Lesson13.html",
    "title": "Lesson 12: Exploratory Plotting in R",
    "section": "",
    "text": "Putting it all together\n\n\n\n\n\n\n\n\n\n\n\n\nLearning Goals\n\n\n\n\n\nAt the end of this lesson, you should:"
  },
  {
    "objectID": "lessons/Lesson10.html",
    "href": "lessons/Lesson10.html",
    "title": "Lesson 9: Combining Data Sets",
    "section": "",
    "text": "Putting it all together\n\n\n\n\n\n\n\n\n\n\n\n\nLearning Goals\n\n\n\n\n\nAt the end of this lesson, you should:"
  },
  {
    "objectID": "lessons/Lesson11.html",
    "href": "lessons/Lesson11.html",
    "title": "Special Lesson 12: Setting up R for Reproducible Research",
    "section": "",
    "text": "Putting it all together\n\n\n\n\n\n\n::: {.callout-caution collapse=“true”} ## Learning Goals\nAt the end of this lesson, you should:\n\n::: s"
  },
  {
    "objectID": "lessons/Lesson00.html",
    "href": "lessons/Lesson00.html",
    "title": "Preparing for this Class",
    "section": "",
    "text": "Welcome & salutations. I have fully revamped this curriculum, doing my best to recreate “beginner’s mind”, and am quite excited to teach this material. We have very limited time, so order to conserve class time and have us all ready for the first day of class, please read through this “Lesson Zero”, watch the video and follow the instructions below.\n\nJoin Posit Cloud\nYou will receive an invitation to join a our online classroom on Posit Cloud, where you will need to sign up for an account using your email, or you can connect it to a gmail or GitHub account (any of these choices will work fine for the class). If do you not have a gmail or GitHub account, use your email instead.\n\n\nClass Structure\nFor all lessons, please follow along in your RStudio cloud session and type + run the same code that I will demonstrate.\nI will record each day’s lessons and make it available through email and Canvas and post the notes shortly after class ends. It is important that you read through notes and watch the video if (1) you had to miss some or all of a class or (2) there is material you do not understand. Please use the time between courses to ensure you understand the material.\nAt the end of most lessons this will be included:\n\n\n\n\n\n\nPutting it all together\n\n\n\nTips designed to weave together information from multiple lessons.\n\n\nThis will also be posted at the end of all lessons:\n\n\n\n\n\n\nLearning Goals\n\n\n\n\n\nThis will be a list of what each lesson intended to teach.\nIf you do not think you have met those learning goals, please review the notes, rewatch the videos and if the material is still unclear, contact the instructor.\nIt’s very important you understand the learning goals of each lesson before moving on to the next."
  },
  {
    "objectID": "lessons/Lesson04.html",
    "href": "lessons/Lesson04.html",
    "title": "Lesson 4: Introduction to R object types",
    "section": "",
    "text": "Previously, we created an object in R that was a collection or sequence of numbers.\n\nx1 <- 1:10\n\nThese numbers are technically integers. We can also create “floating point numbers” (e.g. with precision past the decimal point):\n\nx2 <- c(1.25, 2.718, 10.000)\n\n\n\n\nThese can also be created for character variables:\n\nx3 <- \"apple\"\nx4 <- c(\"orange\", \"banana\")\n\nLet’s check the class for each R object\n\nclass(x1)\n\n[1] \"integer\"\n\nclass(x2)\n\n[1] \"numeric\"\n\nclass(x3)\n\n[1] \"character\"\n\nclass(x4)\n\n[1] \"character\"\n\n\n\n\n\n\n\n\nNote\n\n\n\nYou can force a number to be a integer by adding an L to a number as long as it does not contain a decimal pont (e.g. c(0L, 1L, 2L))\n\n\nThere are two other special classes:\n\n\n\n\nconsisting of TRUE and FALSE values\n\n\nx5 <- c(TRUE, FALSE, FALSE, TRUE)\nclass(x5)\n\n[1] \"logical\"\n\n\n\n\n\n\nx6 <- factor(c(\"one\", \"two\", \"three\"))\nclass(x6)\n\n[1] \"factor\"\n\nx6\n\n[1] one   two   three\nLevels: one three two\n\n\nFactors often look like character objects, except there exists several pre-defined levels which exist regardless if they are found in the object.\n\nx7 <- factor(c(\"one\", \"two\", \"three\"), \n             levels = c(\"one\", \"two\", \"three\", \"four\"))\nx7\n\n[1] one   two   three\nLevels: one two three four\n\n\nFactors are complicated and take some time to fully understand. At this time, we are going to put the topic of factors aside and focus on other more important things."
  },
  {
    "objectID": "lessons/Lesson04.html#object-type-coercion",
    "href": "lessons/Lesson04.html#object-type-coercion",
    "title": "Lesson 4: Introduction to R object types",
    "section": "Object type coercion",
    "text": "Object type coercion\n\nR will automatically an assign an object type based on the items present within object. It will try to assign the simplest type possible. Here are the types from simplest to most complex:\n\n\\[logical < integer < numeric < character\\] (Factors are not listed because they are technically integers. Factors are weird!)\nWhat classes do you think results from each of these?\n\nx8 <- c(8, 9.2)\nx9 <- c(0, 0, 0, 0)\nx10 <- c(TRUE, FALSE, 1L, 0L)\nx11 <- c(1, 2, \"pear\", -6:2, TRUE)\n\nObjects can be coerced with these functions:\n\nas.character(x8)\nas.factor(x10)\nas.logical(x10)\nas.numeric(x11)\n\n\n\n\n\n\n\nPutting it all together\n\n\n\nLook at the object created in the lesson in the Global Environment pane. For each object, the object class and the first few values will be listed. When is it not listed?\n\n\n\n\n\n\n\n\nLearning Goals\n\n\n\n\n\nAt the end of this lesson, you should:\n\nUnderstand what object class means and how to determine and object’s class\nUnderstand the difference between the 5 main object classes: logical, integer, numeric, character and factors.\nknow how to coerce objects from one class to another"
  },
  {
    "objectID": "lessons/Lesson05.html",
    "href": "lessons/Lesson05.html",
    "title": "Lesson 5: Data Structures",
    "section": "",
    "text": "Previously, we looked at data types. Now we need to consider how those types are arranged into complex structures we can access and manipulate.\nThere are several data structures commonly used in R\n\nscalar\nvector\ndata.frame\nmatrix\nlist\n\n\n\nAn object consisting of single value\n\ns1 <- 3\ns2 <- \"violets\"\ns3 <- TRUE\n\nIts length is always 1. And it has a data type associated with it (character, numberic, etc). These are not complicated!\n\nlength(s1)\n\n[1] 1\n\nclass(s2)\n\n[1] \"character\"\n\n\n(we have already created these)\n\n\n\nA collection of items all coerced to be the same type.\n\nv1 <- 1:10\nv2 <- c(\"apples\", \"pears\", \"oranges\")\nv3 <- c(1, 5, 7, 85)\n\nIt has the attribute length and each item in a vector can also be named.\n\nlength(v1); length(v2); length(v3)\n\n[1] 10\n\n\n[1] 3\n\n\n[1] 4\n\n\n\nnames(v3) <- c(\"Moscow\", \"Plummer\", \"Tensed\", \"Worley\")\nv3\n\n Moscow Plummer  Tensed  Worley \n      1       5       7      85 \n\n\n\n\n\nA collection of vectors all of the name length. Each vector is a single data type, but different columns can be different data types. This is similar to a typical workbook you might open in Excel or another spreadsheet program. These can be only one column wide, but they often consist of more than that.\n\nd1 <- data.frame(var1 = 1:5,\n                 var2 = c(\"a\", \"b\", \"a\", \"b\", \"c\"))\nd1\n\n  var1 var2\n1    1    a\n2    2    b\n3    3    a\n4    4    b\n5    5    c\n\n\nIt has attributes for:\n\nnrow number of rows\nncol number of columns\ncolnames column names\nrownames row names (if none are provided, R will generate integer row names starting at 1)\n\n\nnrow(d1)\n\n[1] 5\n\nncol(d1)\n\n[1] 2\n\ndim(d1) # tells us rows and columns in one command!\n\n[1] 5 2\n\n\n\nrownames(d1)\n\n[1] \"1\" \"2\" \"3\" \"4\" \"5\"\n\ncolnames(d1)\n\n[1] \"var1\" \"var2\"\n\n\nWhat does length(d1) return? How about names(d1)?\nWe can look at the overall structure of a data.frame with str():\n\nstr(d1)\n\n'data.frame':   5 obs. of  2 variables:\n $ var1: int  1 2 3 4 5\n $ var2: chr  \"a\" \"b\" \"a\" \"b\" ...\n\n\nThis the data structure most commonly used in R.\n\n\n\nLike a data.frame: it is a collection of vectors all the same length, except all vector must be the same data type.\n\nm1 <- as.matrix(d1)\nm1\n\n     var1 var2\n[1,] \"1\"  \"a\" \n[2,] \"2\"  \"b\" \n[3,] \"3\"  \"a\" \n[4,] \"4\"  \"b\" \n[5,] \"5\"  \"c\" \n\n\nThis has no relationship to the mathemetical concept of a matrix, although if you make an R matrix consisting only of numbers, it can be used like a mathematical matrix. It can take a rownames and and column names attribute, but those are optional.\n\ncolnames(m1)\n\n[1] \"var1\" \"var2\"\n\nrownames(m1)\n\nNULL\n\n\n\n\n\nThis is the wildest and least structured data structure that exists. This is a collection of items with no formal rules. A vector, scalar and data frame can all be combined into a list.\n\nL1 <- list(s1, s2, s3, d1, m1)\nstr(L1)\n\nList of 5\n $ : num 3\n $ : chr \"violets\"\n $ : logi TRUE\n $ :'data.frame':   5 obs. of  2 variables:\n  ..$ var1: int [1:5] 1 2 3 4 5\n  ..$ var2: chr [1:5] \"a\" \"b\" \"a\" \"b\" ...\n $ : chr [1:5, 1:2] \"1\" \"2\" \"3\" \"4\" ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : NULL\n  .. ..$ : chr [1:2] \"var1\" \"var2\"\n\n\nEach list item can have a name. Or not.\n\nL1 <- list(\"number\" = s1, \"flower\" = s2, s3, \"df\" = d1, m1)\nnames(L1)\n\n[1] \"number\" \"flower\" \"\"       \"df\"     \"\"      \n\nstr(L1)\n\nList of 5\n $ number: num 3\n $ flower: chr \"violets\"\n $       : logi TRUE\n $ df    :'data.frame': 5 obs. of  2 variables:\n  ..$ var1: int [1:5] 1 2 3 4 5\n  ..$ var2: chr [1:5] \"a\" \"b\" \"a\" \"b\" ...\n $       : chr [1:5, 1:2] \"1\" \"2\" \"3\" \"4\" ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : NULL\n  .. ..$ : chr [1:2] \"var1\" \"var2\"\n\n\n\n\n\n\n\n\nNote\n\n\n\nIf you end up with too many objects, you can always delete them with the rm() function:\nrm(myvar)\nrm(var1, var2, var3)\nIf one object ends up with the wrong name, you can copy the object to its new name and delete the old version:\nnew <- old\nrm(old)"
  },
  {
    "objectID": "lessons/Lesson05.html#accessing-items-in-data-structures",
    "href": "lessons/Lesson05.html#accessing-items-in-data-structures",
    "title": "Lesson 5: Data Structures",
    "section": "Accessing Items in Data Structures",
    "text": "Accessing Items in Data Structures\n*Scalars don’t have a heading because there is nothing to do with these since they have only one value. Use them, or reassign them, or create a new one with a different name.\n\nvectors\n\n\ndata frames\n\n\nmatrix\n\n\nlist\n\n\n\n\n\n\nPutting it all together\n\n\n\n\n\n\n\n\n\n\n\n\nLearning Goals\n\n\n\n\n\nAt the end of this lesson, you should:"
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Course Schedule",
    "section": "",
    "text": "This schedule is best understood as a draft that will be adjusted as needed.\n\n\n\n\n\n\n\nDate\nTopics\n\n\n\n\nBefore January 17\nWatch Welcome Video\n\n\nJanuary 17\nLesson 1: RStudio\nLesson 2: math operators\nLesson 3: vectorization\n\n\nJanuary 19\nLesson 4: objects\nLesson 5: data structures\nLesson 6: R functions & help\n\n\nJanuary 24\nLesson 7: data import\nLesson 8: data wrangling\n\n\nJanuary 26\nLesson 9: reshaping data sets\n\n\nJanuary 31\nLesson 10: combining data sets\n\n\nFebruary 2\nLesson 11: Your R set-up\nLesson 12: exporting data\nLesson 13: basic plotting\n\n\nFebruary 7\nLesson 14: ggplotting\n\n\nFebruary 9\nLesson 15: repeating actions"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "An Introduction to R for Scientists",
    "section": "",
    "text": "This workshop will take you from zero to hero over the course of 16 hours of instruction and practice. It will introduce the R programming language, the graphical user interface RStudio and how R can be used to manage and analyse your data. At the end of this workshop, you will be able to:\n\nimport & export data\nunderstand data types and object types\nfilter, reshape, merge and manipulate your data\nmathematically transform data\ndo repeat actions in R\nplot data\nnavigate R help files\n\n\nWho is This workshop for?\nThis workshop is intended for beginner R users. No previous experience in R or any other programming or statistical language is expected (although previous R users whose skills have lapsed are welcomed!)\n\n\nWhat this workshop will not cover\n\ngit, GitHub, or any version control\nusage of the terminal (e.g. bash)\nstatistical analysis\n\n\nRequirements\n\na computer with a reliable internet connection\nA camera and microphone for Zoom\nA Zoom account (the free version is sufficient)\n\n\n\nWhen\nJan 17 - February 9\nTuesday/Thursdays\n2 - 4 pm Pacific time\nAll sessions will take place over Zoom so students across different timezones can participate.\n\n\nInstructors:\nJulia Piaskowski | GitHub"
  },
  {
    "objectID": "CoC.html",
    "href": "CoC.html",
    "title": "Code of Conduct",
    "section": "",
    "text": "University of Idaho Carpentries is dedicated to providing a harassment-free experience for participants of the conference regardless of age, gender, sexual orientation, disability, physical appearance, race, or religion (or lack thereof).\nWe encourage the open exchange of ideas and expression and thus require an environment that recognizes the inherent worth of every person and group. An inclusive space free of harassment encourages interaction among diverse groups. We want to make certain our workshops and courses are welcoming, and encourages participants to be involved moving forward.\nAll participants (including organizers, attendees, presenters, sponsors, and volunteers) at UI Carpentries Workshops are required to agree to the following code of conduct. Reports of violation to this Code of Conduct should be addressed to the course instructor.\nThis Code of Conduct (CoC) applies to any participant in a University of Idaho Carpentries Workshop. This CoC generally applies to conference and pre-conference events. Note that this code augments rather than replaces legal rights and obligations pertaining to any particular situation.\n\nExpected Behavior\nAll workshop/course participants are expected to behave in accordance with professional standards, with both this Code of Conduct as well as their respective employer’s policies governing appropriate workplace behavior, and all applicable laws.\nWe’re committed to providing welcome environments where people behave according to professional standards. We expect everyone at any UI Carpentries-affiliated event to contribute to a welcoming, civil, safe, and tolerant environment.\nExamples of encouraged behavior that contributes to a positive environment include:\n\nUsing welcoming and inclusive language\nBeing respectful of differing viewpoints and experiences\nGracefully accepting constructive criticism\nFocusing on what is best for everyone at the event\nShowing empathy towards other participants\n\n\n\nUnacceptable Behavior\nHarassment will not be tolerated in any form, including but not limited to:\n\nIntimidation or harassment of any kind.\nOffensive comments related to gender, gender identity and expression, sexual orientation, disability, physical appearance, body size, race, age, religion or any other status protected by laws in which the conference or program is being held.\nUnwelcome comments regarding a person’s lifestyle choices and practices, including those related to food, health, parenting, drugs, and employment.\nDeliberate misgendering, “outing,” or use of “dead” or rejected names.\nGratuitous or off-topic blatant sexual images or behavior in spaces where they are not appropriate.\nNot respecting the privacy of other participants\n\n\n\nHarassment in online channels\nSome of our workshops are online event. Please use these guidelines when engaging with participants. The above Code of Conduct applies to an online event, with the addition of:\n\nAvoid using overtly sexual or offensive usernames or profile photos which might detract from a friendly, safe and welcoming environment for all.\nDo not publish text/screenshots of anything shared in private communication channels without explicit consent from the author. This includes screenshots of private messages to public channels, as well as conversations on public channels to anywhere outside of UI Carpentries Workshop.\nDo not direct message someone without their permission.\nDo not record sessions without the presenter’s permission.\nThe meeting host/organizer should be aware of privacy concerns for different tools. For tips on security, a good place to start is: [Securing Your Zoom Meetings](https://explore.zoom.us/docs/doc/Securing%20Your%20Zoom%20Meetings.pdf.\n\nThis CoC applies to all University of Idaho Carpentries online spaces.\n\n\nResponses to Code of Conduct Violations\n…. (I’m not sure what we have authority to do)\n\n\nWhat To Do If You Witness or Are Subject To Unacceptable Behavior\nIf you are being harassed, notice that someone else is being harassed, or have any other concerns relating to harassment, please contact the lead instructor immediately.\n\n\nAcknowledgements\nThis CoC is adapted from RConsortium CoC. This policy is licensed under a Creative Commons Attribution 4.0 International license."
  },
  {
    "objectID": "practice/practice02.html",
    "href": "practice/practice02.html",
    "title": "Practice Problems #2",
    "section": "",
    "text": "This was a year variable that we once wanted defined as a factor, but no longer. Convert this back to an integer.\n\n\nmyvar <- factor(c(2010:2022))"
  },
  {
    "objectID": "practice/solution02.html",
    "href": "practice/solution02.html",
    "title": "Solutions to Practice #2",
    "section": "",
    "text": "If you convert it using as.integer, it will look rather funky:\n\nmyvar <- factor(c(2010:2022))\nas.integer(myvar)\n\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13\n\n\nIt must first be converted to a character to preserve the information in the levels and then an integer\n\nas.integer(as.character(myvar))\n\n [1] 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022"
  },
  {
    "objectID": "practice/solution01.html",
    "href": "practice/solution01.html",
    "title": "Solutions to Practice #1",
    "section": "",
    "text": "\\[ \\frac{1}{\\sigma\\sqrt{2\\pi}}e^{-\\frac{1}{2}(\\frac{x-\\mu}{\\sigma})^2}\\]\n\\(\\pi\\) = 3.14 \\(e\\) = 2.718 \\(\\mu\\) = 50 \\(\\sigma\\) = 5 \\(x\\) = 20\n\nFor this problem, there are several possible solutions:\n\n\nManual the whole way down:\n\n\n1/(5*(2*3.14)^0.5)*2.718^(-0.5*((20-50)/5)^2)\n\n[1] 1.217755e-09\n\n\n\nEmploying a few shortcuts\n\n\n1/(5*sqrt(2*pi))*exp(-0.5*((20-50)/5)^2)\n\n[1] 1.215177e-09\n\n\n\nR function that estimates the standard normal density (the equation above is the probability density function for the normal distribution)\n\n\ndnorm(x = 20, mean = 50, sd = 5)\n\n[1] 1.215177e-09\n\n\n\n\n\n\n\n\nNote\n\n\n\nIt’s not expected you would be aware of the second and third solutions given what has been taught thus far, but it’s helpful to be aware that many shortcuts exist in R to make coding easier.\n\n\n\nUsing the manual approach:\n\n\nx = c(10, 20, 30, 40, 50)\n1/(5*(2*3.14)^0.5)*2.718^(-0.5*((x-50)/5)^2)\n\n[1] 1.014069e-15 1.217755e-09 2.679505e-05 1.080317e-02 7.980869e-02"
  },
  {
    "objectID": "practice/practice01.html",
    "href": "practice/practice01.html",
    "title": "Practice Problems #1",
    "section": "",
    "text": "Make this calculation using R math operators\n\n\\[ \\frac{1}{\\sigma\\sqrt{2\\pi}}e^{-\\frac{1}{2}(\\frac{x-\\mu}{\\sigma})^2}\\] \\(\\pi\\) = 3.14 \\(e\\) = 2.718 \\(\\mu\\) = 50 \\(\\sigma\\) = 5 \\(x\\) = 20\n\nRepeat this calculation except for \\(x\\) = {10, 20, 30, 40, 50, 60}"
  }
]