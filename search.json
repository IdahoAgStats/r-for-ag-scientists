[
  {
    "objectID": "CoC.html",
    "href": "CoC.html",
    "title": "Code of Conduct",
    "section": "",
    "text": "University of Idaho Carpentries is dedicated to providing a harassment-free experience for participants of the conference regardless of age, gender, sexual orientation, disability, physical appearance, race, or religion (or lack thereof).\nWe encourage the open exchange of ideas and expression and thus require an environment that recognizes the inherent worth of every person and group. An inclusive space free of harassment encourages interaction among diverse groups. We want to make certain our workshops and courses are welcoming, and encourages participants to be involved moving forward.\nAll participants (including organizers, attendees, instructors and volunteers) at UI Carpentries Workshops are required to agree to the following code of conduct. Reports of violation to this Code of Conduct should be addressed to the course/workshop lead instructor.\nThis Code of Conduct (CoC) applies to any participant in a University of Idaho Carpentries Workshop. Note that this code augments rather than replaces legal rights and obligations pertaining to any particular situation.\n\nExpected Behavior\nAll workshop/course participants are expected to behave in accordance with professional standards, with both this Code of Conduct as well as their respective employer’s policies governing appropriate workplace behavior, and all applicable laws.\nWe’re committed to providing welcome environments where people behave according to professional standards. We expect everyone at any UI Carpentries-affiliated event to contribute to a welcoming, civil, safe, and tolerant environment.\nExamples of encouraged behavior that contributes to a positive environment include:\n\nUsing welcoming and inclusive language\nBeing respectful of differing viewpoints and experiences\nGracefully accepting constructive criticism\nFocusing on what is best for everyone at the event\nShowing empathy towards other participants\n\n\n\nUnacceptable Behavior\nHarassment will not be tolerated in any form, including but not limited to:\n\nIntimidation or harassment of any kind.\nOffensive comments related to gender, gender identity and expression, sexual orientation, disability, physical appearance, body size, race, age, religion or any other status protected by laws in which the conference or program is being held.\nUnwelcome comments regarding a person’s lifestyle choices and practices, including those related to food, health, parenting, drugs, and employment.\nDeliberate misgendering, “outing,” or use of “dead” or rejected names.\nGratuitous or off-topic blatant sexual images or behavior in spaces where they are not appropriate.\nNot respecting the privacy of other participants\n\n\n\nHarassment in online channels\nSome of our workshops are online event. Please use these guidelines when engaging with participants. The above Code of Conduct applies to an online event, with the addition of:\n\nAvoid using overtly sexual or offensive usernames or profile photos which might detract from a friendly, safe and welcoming environment for all.\nDo not publish text/screenshots of anything shared in private communication channels without explicit consent from the author. This includes screenshots of private messages to public channels, as well as conversations on public channels to anywhere outside of UI Carpentries Workshop.\nDo not direct message someone without their permission.\nDo not record sessions without the presenter’s permission.\nThe meeting host/organizer should be aware of privacy concerns for different tools. For tips on security, a good place to start is: Securing Your Zoom Meetings.\n\nThis CoC applies to all University of Idaho Carpentries online spaces.\n\n\nResponses to Code of Conduct Violations\nWe will follow all University of Idaho and Idaho State requirements regarding how to handle incidents of harassment.\n\n\nWhat To Do If You Witness or Are Subject To Unacceptable Behavior\nIf you are being harassed, notice that someone else is being harassed, or have any other concerns relating to harassment, please contact the lead instructor immediately.\n\n\nAcknowledgements\nThis CoC is adapted from RConsortium CoC and the Carpentries CoC This policy is licensed under a Creative Commons Attribution 4.0 International license."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introductory R for Scientists",
    "section": "",
    "text": "This workshop will take you from zero to hero over the course of 16 hours of instruction and practice. It will introduce the R programming language, the graphical user interface RStudio and how R can be used to manage and analyse your data. At the end of this workshop, you will be able to:\n\nimport & export data\nunderstand data types and object types\nfilter, reshape, merge and manipulate your data\nmathematically transform data\ndo repeat actions in R\nplot data\nnavigate R help files\n\n\n\nThis workshop is intended for beginner R users. No previous experience in R or any other programming or statistical language is expected (although previous R users whose skills have lapsed are welcomed!)\n\n\n\n\ngit, GitHub, or any version control\nusage of the terminal (e.g. bash)\nstatistical analysis\n\n\n\n\n\na computer with a reliable internet connection\nA camera and microphone for Zoom\nA Zoom account (the free version is sufficient)\n\n\n\n\nJan 17 - February 9\nTuesday/Thursdays\n2 - 4 pm Pacific time\nAll sessions will take place over Zoom so students across different timezones can participate.\n\n\nI will hold open drop-in hours on Zoom on Wednesdays and Fridays, 1-2 pm if you have questions. It will be the same Zoom link for regular class sessions.\n\n\n\n\n\n\nJulia Piaskowski | training website | GitHub | personal website\n\n\n\nJT VanLeuven | Research Website\nBreanna Sipley | GitHub | Twitter"
  },
  {
    "objectID": "install_R_instructions.html",
    "href": "install_R_instructions.html",
    "title": "Install R & RStudio",
    "section": "",
    "text": "You may already have R installed on your computer. However, if the installation is one year older or later, you should upgrade it. This the beauty and drawback of R (yay for new functionality, boo to the inconvenience). R is updated frequently, usually several times per year. Not every update is important, but over time, older versions of R will cause you problems because they will work poorly with installed packages. New packages will not work at all with older version of R and older packages will have problems, requiring to also install older package versions. This is a pain to manage; its easiest to keep R updated."
  },
  {
    "objectID": "install_R_instructions.html#install-r",
    "href": "install_R_instructions.html#install-r",
    "title": "Install R & RStudio",
    "section": "Install R",
    "text": "Install R\nFirst, navigate to the Cloud mirror of the R Project for Statistical computing, and download R](https://cran.rstudio.com/):\n\n\n\n\n\n\nWindows\nUse the link circled in red regardless if you have R installed or not. It’s just easier.\n\n\n\n\n\n\n\nMac\nDownload the installation bundle. Check that your operating system version is compatible (the text to the right of the download link will indicate this).\n\n\n\n\n\nOnce the installation file is downloaded, open it and follow the installation instructions, accepting the default installation settings."
  },
  {
    "objectID": "install_R_instructions.html#install-rstudio",
    "href": "install_R_instructions.html#install-rstudio",
    "title": "Install R & RStudio",
    "section": "Install RStudio",
    "text": "Install RStudio\nYou can download RStudio from the Posit website. Pick the version appropriate for your operation system and follow the installation instructions.\nYou do not need to follow “Step 1: install R” indicated on the Posit site if you already installed R following the directions above."
  },
  {
    "objectID": "install_R_instructions.html#test-your-installation",
    "href": "install_R_instructions.html#test-your-installation",
    "title": "Install R & RStudio",
    "section": "Test your Installation",
    "text": "Test your Installation\n\nOpen RStudio on your personal or work computer. It should look very similar to Posit Cloud.\nRun a command in the console to make sure all installed properly.\nInstall the Tidyverse packages: install.packages(\"tidyverse\") (this will take a few minutes)"
  },
  {
    "objectID": "learning-quarto.html",
    "href": "learning-quarto.html",
    "title": "Working with Quarto Documents",
    "section": "",
    "text": "Quarto is a file format for weaving togther code (R, python, and others), output, and text into a single notebook. It’s a nice tool for putting together reports or doing analysis for yourself. Quarto also has applications for building websites (this website is build with Quarto!), formatting books, and making slideshow presentations. These are advanced applications that over time, you may want to try out yourself.\nIt follows some of the standard syntax of markdown, which is a highly simplified version of HTML (“hypertext markup language”).\nA .qmd document can simply exist as is (and is highly useful), or you can choose to output it to many enabled formats such as .html (the easiest!), .pdf, .docx and more.\nThere is a rich array of possibilities for quarto documents, the majority of which we will not addres in this class. Take a look at this gallery to get a better sense of what you can do with quarto and decide for yourself if it’s worth the effor to learn better.\nI started learning standard documents, then made a few presentations with quarto (I’m not sure this is worth the effort), and run many many website with quarto and/or its predecessor, Rmarkdown (this has been great!)."
  },
  {
    "objectID": "lessons/Lesson00.html",
    "href": "lessons/Lesson00.html",
    "title": "Preparing for this Short Course/Workshop",
    "section": "",
    "text": "Welcome & salutations!\nI excited to teach this course. I have fully revamped this curriculum, doing my best to recreate “beginner’s mind”.\nWe have very limited time, so order to conserve class time and have us all ready for the first day of class, please read through this “Lesson Zero”, watch the video and follow the instructions below.\n\n\nJoin Posit Cloud\nYou will receive an invitation a link via email from us to join our online classroom on Posit Cloud, where you will need to sign up for an account using your email, or you can connect it to a Gmail or GitHub account (any of these choices will work fine for the class). If do you not have a Gmail or GitHub account, use your normal email instead. If you are taking this for course credit, please use your official UI email. Once you receive the invitation and have created an account, follow these instructions for accessing the classroom.\n\n\n\n\n\n\nImportant!!!\n\n\n\nIf you use any other email for your Posit account than the one associated with your UI account, please notify me ASAP so I can invite you to join the classroom.\n\n\n\n\nClass Structure\nFor all lessons, please follow along in your RStudio cloud session. In most instances, you will type and run the same code that I will demonstrate.\nI will record each day’s lessons and make it available through email and Canvas. Additionally, all code generated that day will be posted on this course website shortly after each class ends. It is important that you read through notes and watch the video if (1) you had to miss some or all of a class, or (2) there is material you do not understand.\nIt is very important that you use the time between class sessions to ensure you understand the material.\n\n\nClass absences\nIt’s okay to miss classes - we all have stuff going on. There is no need to tell me in advance. As mentioned above, if you miss class, please be sure to catch up on the course material you missed by reading the course notes, running the content and watching the video. If you are registered for course credit and will miss more than 3 classes, consider switching to the workshop mode, which is the same content, but no course credit.\n\n\nClass Notes Structure\nAs mentioned, all code run will be captured in class notes that will be posted. While you can read those notes and not attend class, many find it helpful to attend a live course and receive live instruction and feedback from an expert. Additionally, those of you formally registered for BCB 502 are required to attend at least 60% of the classes per the syllabus in order to pass.\nAt the beginning of each lesson, this box will be included:\n\n\n\n\n\n\nLearning Goals\n\n\n\n\n\nThis will be a list of what each lesson intends to teach.\nIf you do not think you have met those learning goals, please review the notes, rewatch the videos and if the material is still unclear, contact me.\n\n\n\nAt the end of most lessons, this box will be included:\n\n\n\n\n\n\nPutting it all together\n\n\n\nTips designed to weave together information from multiple lessons.\n\n\n\n\nHow to Suceed in Learning R\n\nAt the end of each class, review the learning goals and decide if you met those goals. These are designed to be the bare minimum of knowledge to competently use R. Later workshop/course content builds on this knowledge.\n\nReview what we have covered between classes - refresh your knowledge.\nIf there are practice problems, do them.\nExperiment in the R console using what you learned. Really, nothing can go wrong.\nIf class material is not clear, re-run the code from class and reread the notes; watch the videos. If it’s still not clear, contact me.\nCome to me with specific questions! I’m here to help.\n\n\n\nYour very first R lesson!\n\nR is case-sensitive! (data is different from Data and DATA). This means when typing commands, exercise great care and attention to detail so your code works.\nThere is no “undo” button in R. Once a command is run, you can’t undo it! (this is not as bad as it sounds)"
  },
  {
    "objectID": "lessons/Lesson01.html",
    "href": "lessons/Lesson01.html",
    "title": "Lesson 1: Math Operators",
    "section": "",
    "text": "Learning Goals\n\n\n\n\n\nAt the end of this lesson, you should:\n\nUnderstand sorts of math operators available in R and how to use them\nUnderstand logical operators in R\nBe aware of the order of operations\nBe aware of how whitespace is interpreted in R\nUnderstand how to use parentheses, brackets, braces and quotations in R\n\n\n\n\n\nR as a calculator\n\nAddition, subtraction, multiplication, division\n\n1 + 3\n\n[1] 4\n\n10 - 15\n\n[1] -5\n\n2*8\n\n[1] 16\n\n60/12\n\n[1] 5\n\n\nA hard return between lines of code is sufficient to separate the commands.\n\n\nExponentiation\n\n3^2\n\n[1] 9\n\n2^4\n\n[1] 16\n\n9^0\n\n[1] 1\n\n2^-2\n\n[1] 0.25\n\n\nR can also handle scientific notation. This number, 3e2 is equivalent to \\(3 * 10^2\\), or \\(3000\\).\n\n\nRoots (square, cube, ….)\n\n4^(1/2)\n\n[1] 2\n\n8^(1/3)\n\n[1] 2\n\n\n\n\nLogs\n\nlog(10)\n\n[1] 2.302585\n\n\n(base e)\nlog with base 10\n\nlog10(10)\n\n[1] 1\n\n\nlog with base 2\n\nlog2(4)\n\n[1] 2\n\n\nIf you have other bases:\n\nlog(10, base = 4)\n\n[1] 1.660964\n\n\n\n\nOperations with sign\n(positive and negative signs are called “unary operators”)\n\n3*-4\n\n[1] -12\n\n\nLike in standard math, only negatively signed numbers need to be specified.\n\n\nInteger division (the remainder is discarded)\n\n5 %/% 3\n\n[1] 1\n\n\n\n\nModulus operator (return the remainder after division)\n\n5 %% 3\n\n[1] 2\n\n\n….and so much more\n\n\n\nLogical Operators\nThese test for conditions (“is this true?”) and return either a TRUE or FALSE\n\n\n\nsyntax\nFunction\n\n\n\n\n==\nequal\n\n\n!=\ndoes not equal\n\n\n<\nless than\n\n\n>\ngreater than\n\n\n<=, >=\nless than and equal to, and greater than equivalent\n\n\n\nExamples\n\n1 == 1\n\n[1] TRUE\n\n1 == 2\n\n[1] FALSE\n\n1 != 2\n\n[1] TRUE\n\n1 < 1\n\n[1] FALSE\n\n1 > 1\n\n[1] FALSE\n\n1 <= 1\n\n[1] TRUE\n\n1 >= 1\n\n[1] TRUE\n\n\nWhen testing multiple conditions: use & (‘and’) if two things must be true and | (‘or’) if one of two things must be true:\n\n1 < 2 & 1 != 1 \n\n[1] FALSE\n\n1 < 2 | 1 != 1\n\n[1] TRUE\n\n\n\n\nOrder of operations.\nThe rules:\n\noperations go left to right\nexponents are first, followed by ‘unary operators’ (+/- signs)\nmultiplication and division before subtraction and/or addition\nlogical operators come after all mathematical transformations\nParentheses overall all other rules!\n\nWhat results from this?\n\n2^3+4+12*7/2 <= -6*9\n\nWhen in doubt about the order of operations use parentheses!\nHere is the official R guide to order of operations (warning: this is complicated and refers to functions beyond mathematical operators).\n\n\nSome notes on R syntax\n\nmost often, the amount of white space does not matter.\n\nThese are the same:\n\n4/3\n\n[1] 1.333333\n\n4/    3\n\n[1] 1.333333\n\n4    /  3\n\n[1] 1.333333\n\n\nThese are also the same:\n\nlog(10)\n\n[1] 2.302585\n\nlog( 10 )\n\n[1] 2.302585\n\nlog ( 10)\n\n[1] 2.302585\n\n\n\nR expects certain things to be paired or completed before it will send it to the interpreter\nAs mentioned, earlier a hard return is sufficient to send a command to the R interpreter.\nExceptions: binary operators (= those expecting 2 numbers): +, -, *, /, ^, ==, etc\nExceptions: unclosed parentheses (), brackets [] {}, or quotes ' ' \" \". R will wait for these to be completed. A single quote must always be complemented by a second single quote, and a double quote likewise must always have a second quote to complete it. Left parentheses, curly braces, or brackets much also be accompanying by their right-sided complement.\ngood examples\n\n\n1 + 2\n{ }\n( )\n[ ]\n\"  \"\n' '\n` `\n\nbad examples\n\n\n1 + \n'\n(  } ] \n\"\n' \"\n\nthere is no difference between double and single quotes on a practical level, but R will interpret them as different commands (so a single quote cannot close a double quote). This is useful when there is nested levels of quoting (rare), and yet, it happens now and then.\n\n\n\n\n\n\n\nNote\n\n\n\nIf you become stuck with an unfinished command, you can use the escape key, ESC, to get out of it.\n\n\n\n\n\n\n\n\nPutting it all together\n\n\n\nCheck the “History” tab in the upper right hand pane (this should be to the right of the “Environment” tab). What is there?\nIf you followed along and coded the above examples, you should see the command you ran previously (including any mistakes). This is your command history. There are several icons directly above your history - explore what those do (hoover before clicking any icon to make sure you are okay with action before performing it)."
  },
  {
    "objectID": "lessons/Lesson02.html",
    "href": "lessons/Lesson02.html",
    "title": "Lesson 2: Vectorizing Operations",
    "section": "",
    "text": "Learning Goals\n\n\n\n\n\nAt the end of this lesson, you should:\n\nunderstand how to assign variables and collections of numbers to an object name\nknown the rules for how to name objects\nunderstand reserved words in R and how to find them\nbe able to create a sequence of numbers in R using any starting value and any ending value\n\n\n\n\n\nVectorizing operations\nUsing R as a calculator between a few numbers is handy, but typically we are hoping to do so much more with it, such as performing a calculations across a long list of numbers.\nR is naturally vectorized, which means that you can easily perform a mathematical operation across a vector of numbers (no need to write loops!)\nSay we have a collection of numbers from 10 to 20 and we want to multiple them all by 12. We can create a sequence of numbers by wrapping them all in c() command (for “concatenate”) and separating each with a comma.\n\nc(10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)\n\n [1] 10 11 12 13 14 15 16 17 18 19 20\n\n\nThen those numbers can be operated on by any math operator:\n\nc(10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) * 10 - 1\n\n [1]  99 109 119 129 139 149 159 169 179 189 199\n\n\nThere’s also a quicker way to specify a sequence of integers using the notation start:end:\n\n1:10\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n\nIt also counts down:\n\n20:10\n\n [1] 20 19 18 17 16 15 14 13 12 11 10\n\n\nAnd works with negative integers:\n\n-5:5\n\n [1] -5 -4 -3 -2 -1  0  1  2  3  4  5\n\n\nThese can be operated on:\n\n(-5:5)^2\n\n [1] 25 16  9  4  1  0  1  4  9 16 25\n\n\n\n\nObject assignment\nIt is rather cumbersome to continually retype numbers, even while using a shortcut. There’s a general rule of “DRY” when coding, which means “Don’t repeat yourself”. We can avoid this by assigning these numbers to an R object.\nTraditionally, the left arrow is used for object assignment, <- (less than symbol + a dash), but the standard equals sign, = also works. These are equivalent:\n\nx <- 1\nx = 1\n\nWe can assign multiple numbers to an object\n\nx_vector <- 1:10\ny_vector <- c(2, 4, 6, 8, 10)\n\nThe left arrow assignment <- takes everything on the right side of the arrow and assigns it the object name on the left.\n\n\nObject naming\nIt is your choice (mostly) about what to name R objects. There are a few rules to follow:\n\nspaces are generally not allowed and a huge pain - avoid at all costs!\nDon’t start with a number or symbol! (this is technically possible, but a huge pain)\nchoose a name that is short, yet descriptive\nR is case sensitive, so test is different from Test and TEST. Be mindful of this! It trips many folks up.\n\nIt’s possible that you will thank yourself for using lowercase and avoiding special symbols (aside from . and _)\nif you start a function name with a “.” (e.g. .variable), you won’t see it listed in the global environment (which can be frustrating), this is not recommended for newer R users\nyou cannot use “reserved words” from the R language (terms set aside for very specific purposes in R). When typing these in an R console, they usually light up in a special colors.\n\nHere is some discussion on object naming in R.\n\n\nReserved words\n|————-|—————-| |reserved word | meaning | | TRUE FALSE | logical | | NA | missing value | | NaN | not a number/undefined | | NULL | no value/undefined | | Inf, -Inf | infinity | | for in | for loops | | if else while break next repeat | control flow | | NA_integer_ NA_real_ NA_complex_ NA_character_ | missing data by class\nIt’s easy to forgot these. Run ?reserved in an R console or check here to remind yourself if need be.\nSome examples of reserved words in the wild:\n\nlog(0)\n\n[1] -Inf\n\n0/0\n\n[1] NaN\n\n2/0\n\n[1] Inf\n\n\n\n\n\n\n\n\nPutting it all together\n\n\n\nCheck the environment pane. These are the object you created during the session. This is where you will see all objects created, unless you have choosen to render the objects invisible by starting their object names with a ., a period."
  },
  {
    "objectID": "lessons/Lesson03.html",
    "href": "lessons/Lesson03.html",
    "title": "Lesson 3: Introduction to RStudio",
    "section": "",
    "text": "Learning Recap\n\n\n\n\n\nAt the end of this lesson, you should understand:\n\nWhat the different tabs in each of the panes of RStudio do\nWhat is in each menu item in Rstudio and have a general sense of functionality available\nRStudio is more than a graphical user interface for R. It is an integrated development environment (IDE), that is a full service application for supporting software development. It can perform multitudes, so more than most people need. It is the supermarket of R functionality. Like a supermarket, there are parts of RStudio you will visit frequently and parts you will rarely if ever use. After 10+ years of using RStudio on a near daily basis, there are several parts of it that I continue to be unfamiliar with! Ths is okay - clearly, I have not needed those parts. You will come to find what sections youn will need most over time and practice.\nStill, it helps to have a guided tour. Let’s dive into this."
  },
  {
    "objectID": "lessons/Lesson03.html#the-panes",
    "href": "lessons/Lesson03.html#the-panes",
    "title": "Lesson 3: Introduction to RStudio",
    "section": "The Panes",
    "text": "The Panes\nHere is a simplified schematic:\n\n\n\nThese can be rearranged, but for this class, we will use the default arrangement.\n\nThe Console/Terminal/Background Jobs\n\n\n\nDefault location: left or bottom left\n\n\n\n\n\n\n\nTab\nFunction\n\n\n\n\nConsole\nwhere R commands are actually done\n\n\nTerminal\nuse a terminal language such as bash or the windows command prompt\n\n\nBackground jobs\nusual pacakage installation\n\n\n\nIn this workshop, we will only be using the Console.\n\n\nFiles/Plots/Packages/Help/Viewer/Presentation\n\n\n\n\n\nDefault location: bottom right\nProbably the most useful pane - we will be here frequently!\n\n\n\nTab\nFunction\n\n\n\n\nPlots\nview plots\n\n\nFiles\nexplore your file system\n\n\nPackages\ninstall, update and load packages\n\n\nHelp\nhelps files & examples\n\n\nViewer\nfor previewing websites\n\n\nPresentation\nfor previewing presentations\n\n\n\nWe will not be using the Viewer or Presentations tabs in this workshop.\nWhat are Packages?\nThese make the world go around in R. All of R consists of packages or libraries that have certain functionality associated with them. Some of are maintained by the R core team, others are maintained by outsiders. All packages are open source and most are a volunteer effort. When you open R, several packages are loaded automatically: base, datasets, graphics, grDevices, methods, stats, utils.\nWe will talk about package installation and usage later in this course/workshop.\n\n\nEnvironment/History/Connections/Build/Git/Tutorial\n\n\n\n\n\n\n\n\nTab\nFunction\n\n\n\n\nEnvironment\nobjects created and existing in your current R session\n\n\nHistory\nprevious R command run\n\n\nConnections\nto connect to an external database\n\n\nBuild\nfor building R packages and other large projects\n\n\nGit\nonly visible if you’ve initialized a git repository\n\n\nTutorial\ntutorials build by Posit (very helpful)\n\n\n\nhere\n\n\nOur Scripts Pane\n\n\n\n\n\ndefault location: upper left\nThese are all the files we create and edit: .R, .Rmd, .txt, …\nwhen we open files from the “Files” pane, this is where it shows up"
  },
  {
    "objectID": "lessons/Lesson03.html#the-upper-menu-items",
    "href": "lessons/Lesson03.html#the-upper-menu-items",
    "title": "Lesson 3: Introduction to RStudio",
    "section": "The Upper Menu Items",
    "text": "The Upper Menu Items\n\n\n\n\n\n\nFile\n\nopening and/or creating files\n\nopening and/or creating projects\n\nrecent files, recent project\n\n(standard file functionality)\n\n\n\nEdit\n\ncopy, paste, find\nvery handy “find in files” feature!\n\n\n\nCode\n\nincredible useful set of commands\nsome are very simple (e.g. “comment lines”), others are complex (e.g. “rename in scope”)\nover time, you will learn what these mean and perhaps make use of them (if you don’t, that is okay)\n\n\n\nView\n\nrearrange panes\nzoom in/out\noverall not that useful, except for the shortcuts\n\n\n\nPlots\n\nmeh\n\n\n\nSession\n\nvery handy for restarting your R session\nmanually set the working directory (we will do this in a few weeks)\n\n\n\nBuild\n\nadvanced tools for building packages, websites, et cetera. I’ve never visited this part of the supermarket.\n\n\n\nDebug\n\ntools for debugging code (removing scripting errors). We will not use this in the workshop! But you can learn more about it here.\n\n\n\nProfile\n\nfor code profiling (checking how long it takes your code to run). We will also not be using this in the workshop. This is part of the supermarket I rarely visit.\n\n\n\nTools\n\nsome handy utility function. I mostly use this menu item to set preferences via “Global Options”.\n\n\n\nHelp\n\nmore utility functions. You can check for RStudio updates here, access community help forum, and other forms of documentation in addition to standard help files.\n\n\n\nmore\nRstudio has a massive number of keyboard shortcuts. You can find them in the menu (Help –> Cheat Sheets) and summarized in this cheat sheet"
  },
  {
    "objectID": "lessons/final_Lesson.html",
    "href": "lessons/final_Lesson.html",
    "title": "Moving on",
    "section": "",
    "text": "If you made this far, congratulations! Learning any programming language takes a big effort.\nThis is only the beginning. You will probably need more R knowledge, both generalized and specialized, to accomplish your research goals. Here are a few resources to develop stronger data science skills in R.\n\nData Science in a Box is a online course by Mine Çetinkaya-Rundel with videos for further development of R skills.\nR 4 Data Science by Hadley Wickham and Garret Grolemund is a comprehensive book providing guidance on leveraging R for data science aims\nWhat They Forgot to Teach you about R (and workshop version) describes some meta processes for ensuring a repeatable workflow.\n\nThere are many other resources to help develop skills in genetics, bioinformatics, geospatial analysis, Bayesian statistics, ….you name it. Look for the resources that will help you develop skills in R. One very reliable place to start are CRAN Task Views which provide a list of packages and other relevant R resources specific for a given topic such as environmetrics (ecology), spatial tools and agriculture.\nAnother good source for keeping up with major developments in R, contributed R packages and other R resources is R Weekly which puts out a weekly blog post (also available in a weekly podcast and an RSS feed)."
  },
  {
    "objectID": "posit_instructions.html",
    "href": "posit_instructions.html",
    "title": "Instructions for Accessing the Posit Classroom Project",
    "section": "",
    "text": "Follow the link provided in the mail to join the classroom.\nOnce you have created a login for Posit Cloud, you can join the classroom. Once you follow the link and log in to Posit, you should see this screen:\n\n\n\n\n\nClick “Yes”.\nOnce you join, navigate to the classroom on the left sidebar:\n\n\n\n\n\nWhen you open “R Classroom”, you should see this:\n\n\n\n\n\nClick on “Intro to R Class”, and the project will load. This may take a few minutes.\n\n\n\n\n\nOnce it is finished loading, this is what you should see:\n\n\n\n\n\nThis has created a temporary copy of the project (hence the blinking red label that says “TEMPORARY COPY”). Click on “Save a Permanent Copy” to copy the project. This also may take a few minutes to complete. When you’re done, if you return to the R Classroom, you should see something similar to this. It will list your name instead of “Julia Test” and there may be other students with the same project copied.\n\n\n\n\n\nOnly the instructors and you can access your project. Course instructors will not access student Posit classroom projects unless a student requests we look at it to help troubleshoot an R coding issue.\nThis project is where you should save all of your R scripts. You can access this project at anytime, including when the class is not meeting from now until Feb 10th, 2022. When the course is done, the classroom will be deleted, so be certain to download your project in case you want to revisit it. The course instructors will send a reminder email to do this if you forget."
  },
  {
    "objectID": "practice/practice-A.html",
    "href": "practice/practice-A.html",
    "title": "Practice A",
    "section": "",
    "text": "(from lessons on R for mathematics and vectorized operations)\n\nMake this calculation using R math operators\n\n\\[ \\frac{1}{\\sigma\\sqrt{2\\pi}}e^{-\\frac{1}{2}(\\frac{x-\\mu}{\\sigma})^2}\\] \\(\\pi\\) = 3.14 \\(e\\) = 2.718 \\(\\mu\\) = 50 \\(\\sigma\\) = 5 \\(x\\) = 20\n\nRepeat this calculation except for \\(x\\) = {10, 20, 30, 40, 50, 60}"
  },
  {
    "objectID": "practice/practice-B.html",
    "href": "practice/practice-B.html",
    "title": "Practice B",
    "section": "",
    "text": "(from introduction to R types and objects lesson)\n\nYou have this collection of items:\n\n\nx <- c(-2:3, TRUE, FALSE, 1L, 0L, \"zero\"). \n\n\nWhat data type is this?\nConvert this object to these types:\n\n\nlogical\nnumeric\ncharacter\n\n\nInspect the results. What happened?"
  },
  {
    "objectID": "practice/practice-C.html",
    "href": "practice/practice-C.html",
    "title": "Practice C",
    "section": "",
    "text": "(for lessons on data structures)\n\nYou have this object in your R session: x = 7. What is the difference between x[1] and x?\nYou have this list: mylist = list(x1 = \"snow\", x2 = 45:65, x3 = rep(letters[1:3], each = 3), x4 = matrix(1:100, nrow = 10)). Return this list without x3.\nYou have this data frame:\n\n\ndf <- data.frame(one = 1:10,\n                 two = rnorm(10))\ndf$three <- df$two + rnorm(10)\ndf$four <- sample(c(\"A\", \"B\"), 10, replace = TRUE)\n\n\nAdd another column, ‘five’, that is a character variable consisting of levels that are fruits of your choice.\nAdd another column, ‘six’ that is actually ‘five’ coerced into a factor\nMake a new data frame with the columns in this order: five, one, four, two, three"
  },
  {
    "objectID": "practice/practice-D.html",
    "href": "practice/practice-D.html",
    "title": "Practice D",
    "section": "",
    "text": "(for data import lesson)\n\nImport one of your data sets using two of the functions taught:\n\n(save your data in different format to enable this)\n\nread.csv()\nread_csv()\nread_excel()\nread.delim()\n\n\nExamine the data imported using View(imported_data). Did everything import as expected? Are your variables coded as they should be? Are numeric variables numeric? Are missing data detected as thus?"
  },
  {
    "objectID": "practice/practice-E.html",
    "href": "practice/practice-E.html",
    "title": "Practice E",
    "section": "",
    "text": "(for data export lesson)\n\nRepeat the import practice problems. Export those files under a new file name. Make sure you use a new file name or a different output directory so you do not write over the original files.\nExamine the output files to make sure they look as expected? Where any row names accidentally introduced? Were missing cells converted to “NA”? Did any data become unexpectedly quoted?"
  },
  {
    "objectID": "practice/practice-I.html",
    "href": "practice/practice-I.html",
    "title": "Practice I",
    "section": "",
    "text": "In the class project, there are two files with similar names in the “data” directory:\n\nMain problem\n\n“genotypic_data.txt”\n“genotypic_data_rotated.txt”\n\nAs the file names indicates, “genotypic_data_rotated.txt” is a rotated version of “genotypic_data.txt”.\nImport “genotypic_data.txt” into R and use R commands to recreate “genotypic_data_rotated.txt”.\n\n\nExtra!\nThis is very much outside what has been taught, so only proceed if you don’t mind a foray into the unknown.\nThe column “individual” no longer has periods in the listed names, but the original file had periods in those names since they were column headers. Write code to remove those periods from the column “individual” in your transformed column (hint: look at the documentation for gsub())."
  },
  {
    "objectID": "practice/solution-A.html",
    "href": "practice/solution-A.html",
    "title": "Solutions to Practice A",
    "section": "",
    "text": "\\[ \\frac{1}{\\sigma\\sqrt{2\\pi}}e^{-\\frac{1}{2}(\\frac{x-\\mu}{\\sigma})^2}\\]\n\\(\\pi\\) = 3.14 \\(e\\) = 2.718 \\(\\mu\\) = 50 \\(\\sigma\\) = 5 \\(x\\) = 20\n\nFor this problem, there are several possible solutions:\n\n\nManual the whole way down:\n\n\n1/(5*(2*3.14)^0.5)*2.718^(-0.5*((20-50)/5)^2)\n\n[1] 1.217755e-09\n\n\n\nEmploying a few shortcuts\n\n\n1/(5*sqrt(2*pi))*exp(-0.5*((20-50)/5)^2)\n\n[1] 1.215177e-09\n\n\n\nR function that estimates the standard normal density (the equation above is the probability density function for the normal distribution)\n\n\ndnorm(x = 20, mean = 50, sd = 5)\n\n[1] 1.215177e-09\n\n\n\n\n\n\n\n\nNote\n\n\n\nIt’s not expected you would be aware of the second and third solutions given what has been taught thus far, but it’s helpful to be aware that many shortcuts exist in R to make coding easier.\n\n\n\nUsing the manual approach:\n\n\nx = c(10, 20, 30, 40, 50)\n1/(5*(2*3.14)^0.5)*2.718^(-0.5*((x-50)/5)^2)\n\n[1] 1.014069e-15 1.217755e-09 2.679505e-05 1.080317e-02 7.980869e-02"
  },
  {
    "objectID": "practice/solution-B.html",
    "href": "practice/solution-B.html",
    "title": "Solutions to Practice B",
    "section": "",
    "text": "The variable “x”\n\nx <- c(-2:3, TRUE, FALSE, 1L, 0L, \"zero\")\nx\n\n [1] \"-2\"    \"-1\"    \"0\"     \"1\"     \"2\"     \"3\"     \"TRUE\"  \"FALSE\" \"1\"    \n[10] \"0\"     \"zero\" \n\n\nThis is a character variable.\nWhen converted:\n\nas.logical(x)\n\n [1]    NA    NA    NA    NA    NA    NA  TRUE FALSE    NA    NA    NA\n\nas.character(x)\n\n [1] \"-2\"    \"-1\"    \"0\"     \"1\"     \"2\"     \"3\"     \"TRUE\"  \"FALSE\" \"1\"    \n[10] \"0\"     \"zero\" \n\nas.numeric(x)\n\nWarning: NAs introduced by coercion\n\n\n [1] -2 -1  0  1  2  3 NA NA  1  0 NA\n\n\nItems which did not the expected object type could not be converted (or “coerced”), so they were set to NA."
  },
  {
    "objectID": "practice/solution-C.html",
    "href": "practice/solution-C.html",
    "title": "Solutions to Practice C",
    "section": "",
    "text": "There is no difference.\nHere is the list\n\n\nmylist = list(x1 = \"snow\", x2 = 45:65, x3 = rep(letters[1:3], each = 3), x4 = matrix(1:100, nrow = 10))\nmylist\n\n$x1\n[1] \"snow\"\n\n$x2\n [1] 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65\n\n$x3\n[1] \"a\" \"a\" \"a\" \"b\" \"b\" \"b\" \"c\" \"c\" \"c\"\n\n$x4\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]\n [1,]    1   11   21   31   41   51   61   71   81    91\n [2,]    2   12   22   32   42   52   62   72   82    92\n [3,]    3   13   23   33   43   53   63   73   83    93\n [4,]    4   14   24   34   44   54   64   74   84    94\n [5,]    5   15   25   35   45   55   65   75   85    95\n [6,]    6   16   26   36   46   56   66   76   86    96\n [7,]    7   17   27   37   47   57   67   77   87    97\n [8,]    8   18   28   38   48   58   68   78   88    98\n [9,]    9   19   29   39   49   59   69   79   89    99\n[10,]   10   20   30   40   50   60   70   80   90   100\n\n\nThere are two ways to remove x3. The First is to create a new list from the object ‘mylist’ and don’t include x3:\n\nmylist2 <- list(mylist[[1]], mylist[[2]], mylist[[4]])\nmylist2\n\n[[1]]\n[1] \"snow\"\n\n[[2]]\n [1] 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65\n\n[[3]]\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]\n [1,]    1   11   21   31   41   51   61   71   81    91\n [2,]    2   12   22   32   42   52   62   72   82    92\n [3,]    3   13   23   33   43   53   63   73   83    93\n [4,]    4   14   24   34   44   54   64   74   84    94\n [5,]    5   15   25   35   45   55   65   75   85    95\n [6,]    6   16   26   36   46   56   66   76   86    96\n [7,]    7   17   27   37   47   57   67   77   87    97\n [8,]    8   18   28   38   48   58   68   78   88    98\n [9,]    9   19   29   39   49   59   69   79   89    99\n[10,]   10   20   30   40   50   60   70   80   90   100\n\n\nLists also let you declare a list item as NULL which makes it completely go away!\n\nmylist[[3]] <- NULL\nmylist\n\n$x1\n[1] \"snow\"\n\n$x2\n [1] 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65\n\n$x4\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]\n [1,]    1   11   21   31   41   51   61   71   81    91\n [2,]    2   12   22   32   42   52   62   72   82    92\n [3,]    3   13   23   33   43   53   63   73   83    93\n [4,]    4   14   24   34   44   54   64   74   84    94\n [5,]    5   15   25   35   45   55   65   75   85    95\n [6,]    6   16   26   36   46   56   66   76   86    96\n [7,]    7   17   27   37   47   57   67   77   87    97\n [8,]    8   18   28   38   48   58   68   78   88    98\n [9,]    9   19   29   39   49   59   69   79   89    99\n[10,]   10   20   30   40   50   60   70   80   90   100\n\n\n\nHere is the data frame:\n\n\ndf <- data.frame(one = 1:10,\n                 two = rnorm(10))\ndf$three <- df$two + rnorm(10)\ndf$four <- sample(c(\"A\", \"B\"), 10, replace = TRUE)\n\n\ndf$five <- sample(c(\"apple\", \"huckleberry\"), 10, replace = TRUE)\ndf$six <- as.factor(df$five)\n\n\nnew_df <- df[,c(5, 1, 4, 2, 3)]\nnew_df\n\n          five one four        two      three\n1  huckleberry   1    B  1.0452356 -0.7405878\n2        apple   2    B  0.7160254  0.4704401\n3        apple   3    A  1.0397333  1.4993579\n4  huckleberry   4    A  1.0135147  2.0868092\n5  huckleberry   5    A -0.7365204  0.1227796\n6  huckleberry   6    A  0.8894815  0.2107904\n7  huckleberry   7    A  0.8035435  1.6303052\n8        apple   8    A  1.0238463  0.8993583\n9  huckleberry   9    B -0.5474051 -0.1604035\n10       apple  10    A -0.1177552  0.7785962\n\n\n\nHere is the matrix:\n\n\nm100 = matrix(1:100, ncol = 05, nrow = 20)\nm100\n\n      [,1] [,2] [,3] [,4] [,5]\n [1,]    1   21   41   61   81\n [2,]    2   22   42   62   82\n [3,]    3   23   43   63   83\n [4,]    4   24   44   64   84\n [5,]    5   25   45   65   85\n [6,]    6   26   46   66   86\n [7,]    7   27   47   67   87\n [8,]    8   28   48   68   88\n [9,]    9   29   49   69   89\n[10,]   10   30   50   70   90\n[11,]   11   31   51   71   91\n[12,]   12   32   52   72   92\n[13,]   13   33   53   73   93\n[14,]   14   34   54   74   94\n[15,]   15   35   55   75   95\n[16,]   16   36   56   76   96\n[17,]   17   37   57   77   97\n[18,]   18   38   58   78   98\n[19,]   19   39   59   79   99\n[20,]   20   40   60   80  100\n\n\nSolution #1 if you want to maintain the original size of the matrix:\n\nm100_1 <- m100\nm100_1[,4:5] <- NA\nm100_1[11:20,3] <- NA\nm100_1\n\n      [,1] [,2] [,3] [,4] [,5]\n [1,]    1   21   41   NA   NA\n [2,]    2   22   42   NA   NA\n [3,]    3   23   43   NA   NA\n [4,]    4   24   44   NA   NA\n [5,]    5   25   45   NA   NA\n [6,]    6   26   46   NA   NA\n [7,]    7   27   47   NA   NA\n [8,]    8   28   48   NA   NA\n [9,]    9   29   49   NA   NA\n[10,]   10   30   50   NA   NA\n[11,]   11   31   NA   NA   NA\n[12,]   12   32   NA   NA   NA\n[13,]   13   33   NA   NA   NA\n[14,]   14   34   NA   NA   NA\n[15,]   15   35   NA   NA   NA\n[16,]   16   36   NA   NA   NA\n[17,]   17   37   NA   NA   NA\n[18,]   18   38   NA   NA   NA\n[19,]   19   39   NA   NA   NA\n[20,]   20   40   NA   NA   NA\n\n\nSolution #2 if you want remove columns from the matrix that are composed only of missing data.\n\nm100_2 <- m100[, 1:3]\nm100_2[11:20, 3] <- NA\nm100_2\n\n      [,1] [,2] [,3]\n [1,]    1   21   41\n [2,]    2   22   42\n [3,]    3   23   43\n [4,]    4   24   44\n [5,]    5   25   45\n [6,]    6   26   46\n [7,]    7   27   47\n [8,]    8   28   48\n [9,]    9   29   49\n[10,]   10   30   50\n[11,]   11   31   NA\n[12,]   12   32   NA\n[13,]   13   33   NA\n[14,]   14   34   NA\n[15,]   15   35   NA\n[16,]   16   36   NA\n[17,]   17   37   NA\n[18,]   18   38   NA\n[19,]   19   39   NA\n[20,]   20   40   NA\n\n\n\nThe values are recycled, starting at the beginning of the specificed data:\n\n\nmatrix(1:9, ncol = 5, nrow = 2, byrow = TRUE)\n\nWarning in matrix(1:9, ncol = 5, nrow = 2, byrow = TRUE): data length [9] is not\na sub-multiple or multiple of the number of rows [2]\n\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    2    3    4    5\n[2,]    6    7    8    9    1\n\n\nIf you don’t want that to happen, pad your input data with NA:\n\nmatrix(c(1:9, NA), ncol = 5, byrow = TRUE)\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    2    3    4    5\n[2,]    6    7    8    9   NA\n\n\nMeta-lesson: always always always check your object to make sure it looks like what you expected it to\nCommon checks:\n\nthe dimensions (row number, column number, length, etc) are what you expect\nthe data types are what you expect\nthe values are what you expect"
  },
  {
    "objectID": "practice/solution-F.html",
    "href": "practice/solution-F.html",
    "title": "Solutions to Practice F",
    "section": "",
    "text": "….Is there anything to write?"
  },
  {
    "objectID": "practice/solution-I.html",
    "href": "practice/solution-I.html",
    "title": "Solutions to Practice I",
    "section": "",
    "text": "Main Problem\n\ngeno <- read.delim(\"data/genotypic_data.txt\")\ngeno2 <- dplyr::select(geno, -(1:5))\ngeno3 <- as.data.frame(t(geno2)) %>% mutate(individual = colnames(geno2)) %>% relocate(individual)\ncolnames(geno3)[2:nrow(geno3)] <- geno$Markers\ngeno3[1:10, 1:5]\n\n\n\nExtra\n\ngeno3$individual <- gsub(\"[.]\", \" \", geno3$individual) \n\ngsub() is relatively straightforward to use, but . without any modifiers is actually for wildcard matching (it matches everything)! Regular expressions are crazy!\nSo use [.] instead to specify that you in fact are referring to a period and not simply any character (including whitespace!)."
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Course Schedule",
    "section": "",
    "text": "This schedule is best understood as a draft that will be adjusted as needed.\n\n\n\nDate\nTopics\n\n\n\n\nBefore January 17\nDo Lesson Zero + Watch Video\n\n\nJanuary 17\nLesson 1: math operators\nLesson 2: vectorization\nLesson 3: RStudio\n\n\nJanuary 19\nLesson 4: objects\nLesson 5: data structures\nLesson 6: R functions & help\n\n\nJanuary 24\nLesson 7: data import\nLesson 8: exporting data\nLesson 9: data wrangling\n\n\nJanuary 26\nLesson 10: reshaping data sets\nLesson 11: data aggregation & summary\n\n\nJanuary 31\nLesson 12: combining data sets\n\n\nFebruary 2\nLesson 13: your R set-up\nLesson 14: basic plotting\n\n\nFebruary 7\nLesson 15: ggplotting\n\n\nFebruary 9\nLesson 16: repeating actions\nFinal Lesson: Your R Future"
  }
]