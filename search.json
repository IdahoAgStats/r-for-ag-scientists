[
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Course Schedule",
    "section": "",
    "text": "This schedule is best understood as a draft that will be adjusted as needed.\n\n\n\nDate\nMain Topics\n\n\n\n\nBefore first day of class\nLesson Zero\n\n\nMay 20\nWorkshop orientation\nQuick tour of R Studio\nGetting to know data in R\n\n\nMay 21\nR documentation\nImporting tabular files\nData transformation & wrangling\nExporting R objects to file\n\n\nMay 22\nData aggregation + summary\nReshaping data\nCombining data sets\n\n\nMay 23\nCombining data sets (part 2)\nVisualizing data in R with ggplot\n\n\nMay 24\nFinding help\nReproducible research in R\nOpen time for questions\n\n\nExtra\nHow to do repeating actions",
    "crumbs": [
      "Course Info",
      "Schedule"
    ]
  },
  {
    "objectID": "practice/solution-I.html",
    "href": "practice/solution-I.html",
    "title": "Solutions to Practice I",
    "section": "",
    "text": "First, load all the libraries\n\nImport data sets:\n\n\ngenotypes &lt;- read_csv(here::here(\"data\", \"genotypic_data_rotated.csv\"), show_col_types = FALSE)\ntrials &lt;- read.csv(here::here(\"data\", \"trial_data.csv\"))\nmetadata &lt;- read.csv(here::here(\"data\", \"trial_metadata.csv\"))\n\n\nThe inner join:\n\n\nprob_innerjoin &lt;- inner_join(genotypes, trials, by = join_by(\"individual\" == \"variety\"))\n\n\nThe Semi-join:\n\n\nprob_semijoin_1 &lt;- semi_join(genotypes, trials, by = join_by(\"individual\" == \"variety\"))\nprob_semijoin_2 &lt;- semi_join(trials, genotypes, trials, by = join_by(\"variety\" == \"individual\"))\n\n\ndim(prob_innerjoin)\n\n[1]    76 10107\n\ndim(prob_semijoin_1)\n\n[1]     4 10102\n\ndim(prob_semijoin_2) \n\n[1] 76  6\n\n\nIt is the same group of varieties always returned, but in some cases (prob_innerjoin, prob_semijoin_2) it is all the observations from “trials” and sometimes it is all the observations from genotypes (prob_semijoin_1).\n\nThe anti-join:\n\n\nprob_antijoin &lt;- anti_join(genotypes, trials, by = join_by(\"individual\" == \"variety\"))\n\ndim(prob_antijoin)\n\n[1]   166 10102\n\n\n\nThe mega join:\n\nhere is one option\n\nmegajoin &lt;- full_join(trials, metadata, by = \"trial\") %&gt;% \n  semi_join(genotypes, by = join_by(\"variety\" == \"individual\"))"
  },
  {
    "objectID": "practice/solution-G.html",
    "href": "practice/solution-G.html",
    "title": "Solutions to Practice G",
    "section": "",
    "text": "Count missing data in “weather.csv”. This one is a bit hard!\n\nFirst, load libraries and import data:\n\nlibrary(dplyr); library(tidyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nweather &lt;- read.csv(here::here(\"data\", \"weather_data.csv\")) \n\n\nweather %&gt;%\n  group_by(station) %&gt;%\n  summarise(tavg_na = sum(is.na(tavg)),\n            tmin_na = sum(is.na(tmin)),\n            tmax_na = sum(is.na(tmax)) )\n\n# A tibble: 4 × 4\n  station     tavg_na tmin_na tmax_na\n  &lt;chr&gt;         &lt;int&gt;   &lt;int&gt;   &lt;int&gt;\n1 USC00453546   13558       0       0\n2 USC00456215    6531       0       0\n3 USC00457059   15628       0       0\n4 USR0000WCNW       0       0       0\n\n\nUsing across()\n\nweather %&gt;%\n  group_by(station) %&gt;%\n  summarise(across(c(tavg, tmax, tmin), ~ sum(is.na(.x))))\n\n# A tibble: 4 × 4\n  station      tavg  tmax  tmin\n  &lt;chr&gt;       &lt;int&gt; &lt;int&gt; &lt;int&gt;\n1 USC00453546 13558     0     0\n2 USC00456215  6531     0     0\n3 USC00457059 15628     0     0\n4 USR0000WCNW     0     0     0\n\n\n\nCalculate average temperatures minimum and maximum\n\n\nweather %&gt;% group_by(station) %&gt;%\n    summarise(max_temp = mean(tmax, na.rm = TRUE),\n              min_temp = mean(tmin, na.rm = TRUE))\n\n# A tibble: 4 × 3\n  station     max_temp min_temp\n  &lt;chr&gt;          &lt;dbl&gt;    &lt;dbl&gt;\n1 USC00453546     17.0     4.56\n2 USC00456215     16.2     3.58\n3 USC00457059     15.8     2.66\n4 USR0000WCNW     18.1     5.40\n\n\n\nFind the largest and smallest differences between the daily minimum and maximum temperatures for each year.\n\n\nweather %&gt;% \n    filter(!is.na(tmin) & !is.na(tmax)) %&gt;%   # filter out missing data\n    mutate(temp_diff = abs(tmax - tmin)) %&gt;% # make the calculation for all \n    group_by(year) %&gt;% # grouping step\n    summarise(max_diff = max(temp_diff), # extract the maximum\n              min_diff = min(temp_diff)) # extract the minimum\n\n# A tibble: 43 × 3\n    year max_diff min_diff\n   &lt;int&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n 1  1980     27.8    1.6  \n 2  1981     27.8    1.1  \n 3  1982     26.7    0.6  \n 4  1983     27.8    0.5  \n 5  1984     26.1    0.6  \n 6  1985     28.9    0.5  \n 7  1986     25      0.600\n 8  1987     27.7    1.1  \n 9  1988     25.5    0.6  \n10  1989     24.4    0.5  \n# ℹ 33 more rows\n\n\n\n\n\n\n\n\nProgramming Tip\n\n\n\nThis exercise is rather hard! It took me several tries to get it right. If you have trouble, take the exercise one step at a time, troubleshooting each step separately. It’s helpful to write down - with a pen and paper - what it is you want to do and how you think you might do this.\nThe function abs() was used to find the absolute difference. If both daily temperatures were negative, then the overall difference was negative, which ended up being the ‘minimum’, although by minimum difference, I was actually thinking about what was closest to zero. When there were wide swings in daily temperature, how big were they? And conversely, how small could these daily swings be?\nWriting down the exact problem you want to solve and how you want to solve it (the steps you want to take) can help you focus on what code is required to complete those steps. New programmers often merge the steps of how to fix a problem along with the effort required to write and troubleshoot code, which can quickly lead to distraction and feeling overwhelmed. One thing at a time, my peeps!"
  },
  {
    "objectID": "practice/solution-C.html",
    "href": "practice/solution-C.html",
    "title": "Solutions to Practice C",
    "section": "",
    "text": "Vectors\n\nThere is no difference. If there is only item in a vector, it does not need to be indexed by position.\nThe way to do this shown in class:\n\n\nv1 = c(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\")\nv1\n\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\"\n[20] \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\"\n\n\nThis is rather cumbersome. An easier way is to use the preset vectors letters and LETTERS which are the english alphabet in lowercase and uppercase, respectively. The index position 1 of each corresponds to the first letter of the alphabet, “a” or “A”.\n\nv1 &lt;- c(letters[1:13], LETTERS[14:26])\nv1\n\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\"\n[20] \"T\" \"U\" \"V\" \"W\" \"X\" \"Y\" \"Z\"\n\n\n\n\n\n\n\n\nFYI\n\n\n\nIf something seems tedious and slow in R, there is probably a shortcut.\n\n\n\nThe vector:\n\n\nv2 &lt;- c(1:10, 2:50)\n\n\n\nData Frames\n\nA possible data frame:\n\n\nd1 &lt;- data.frame(var1 = c(TRUE, TRUE, TRUE, FALSE, FALSE, FALSE),\n                 var2 = 1:6,\n                 var3 = \"orange\",\n                 var4 = as.factor(c(\"red\", \"blue\", \"blue\", \"purple\", \"green\", \"green\")))\n\nstr(d1)\n\n'data.frame':   6 obs. of  4 variables:\n $ var1: logi  TRUE TRUE TRUE FALSE FALSE FALSE\n $ var2: int  1 2 3 4 5 6\n $ var3: chr  \"orange\" \"orange\" \"orange\" \"orange\" ...\n $ var4: Factor w/ 4 levels \"blue\",\"green\",..: 4 1 1 3 2 2\n\n\nThe function str() is for checking the structure of an object. For a data frame, it will iterate over every column and give us the data type and some sample values.\n\nThe starting data frame\n\n\ndf &lt;- data.frame(one = 1:10,\n                 two = rnorm(10))\ndf$three &lt;- df$two + rnorm(10)\ndf$four &lt;- sample(c(\"A\", \"B\"), 10, replace = TRUE)\n\n\ndf$five &lt;- sample(c(\"apple\", \"huckleberry\"), 10, replace = TRUE)\ndf$six &lt;- as.factor(df$five)\n\n\nnew_df &lt;- df[,c(5, 1, 4, 2, 3)]\nnew_df\n\n          five one four         two      three\n1        apple   1    A  0.61607796  1.8461929\n2  huckleberry   2    B -0.36662216 -2.3913601\n3        apple   3    A -0.65106630 -0.5592296\n4  huckleberry   4    B  0.62824292  2.4308159\n5        apple   5    B -0.40185667  0.8962080\n6  huckleberry   6    A -0.07732975  0.1867786\n7        apple   7    B -0.95035741 -1.2186063\n8        apple   8    B  0.37902959 -0.7738516\n9  huckleberry   9    A  0.01982821  0.5252594\n10       apple  10    B  0.38067871  0.6889590\n\n\n\n\nLists\n\nThe list\n\n\nmylist = list(x1 = \"snow\", \n              x2 = 45:65, \n              x3 = rep(letters[1:3], each = 3), \n              x4 = matrix(1:100, nrow = 10, ncol=10))\nmylist\n\n$x1\n[1] \"snow\"\n\n$x2\n [1] 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65\n\n$x3\n[1] \"a\" \"a\" \"a\" \"b\" \"b\" \"b\" \"c\" \"c\" \"c\"\n\n$x4\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]\n [1,]    1   11   21   31   41   51   61   71   81    91\n [2,]    2   12   22   32   42   52   62   72   82    92\n [3,]    3   13   23   33   43   53   63   73   83    93\n [4,]    4   14   24   34   44   54   64   74   84    94\n [5,]    5   15   25   35   45   55   65   75   85    95\n [6,]    6   16   26   36   46   56   66   76   86    96\n [7,]    7   17   27   37   47   57   67   77   87    97\n [8,]    8   18   28   38   48   58   68   78   88    98\n [9,]    9   19   29   39   49   59   69   79   89    99\n[10,]   10   20   30   40   50   60   70   80   90   100\n\n\nThere are two ways to remove x3. The First is to create a new list from the object ‘mylist’ and don’t include x3:\n\nmylist2 &lt;- list(mylist[[1]], mylist[[2]], mylist[[4]])\nmylist2\n\n[[1]]\n[1] \"snow\"\n\n[[2]]\n [1] 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65\n\n[[3]]\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]\n [1,]    1   11   21   31   41   51   61   71   81    91\n [2,]    2   12   22   32   42   52   62   72   82    92\n [3,]    3   13   23   33   43   53   63   73   83    93\n [4,]    4   14   24   34   44   54   64   74   84    94\n [5,]    5   15   25   35   45   55   65   75   85    95\n [6,]    6   16   26   36   46   56   66   76   86    96\n [7,]    7   17   27   37   47   57   67   77   87    97\n [8,]    8   18   28   38   48   58   68   78   88    98\n [9,]    9   19   29   39   49   59   69   79   89    99\n[10,]   10   20   30   40   50   60   70   80   90   100\n\n\nLists also let you declare a list item as NULL which makes it completely go away!\n\nmylist[[3]] &lt;- NULL\nmylist\n\n$x1\n[1] \"snow\"\n\n$x2\n [1] 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65\n\n$x4\n      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10]\n [1,]    1   11   21   31   41   51   61   71   81    91\n [2,]    2   12   22   32   42   52   62   72   82    92\n [3,]    3   13   23   33   43   53   63   73   83    93\n [4,]    4   14   24   34   44   54   64   74   84    94\n [5,]    5   15   25   35   45   55   65   75   85    95\n [6,]    6   16   26   36   46   56   66   76   86    96\n [7,]    7   17   27   37   47   57   67   77   87    97\n [8,]    8   18   28   38   48   58   68   78   88    98\n [9,]    9   19   29   39   49   59   69   79   89    99\n[10,]   10   20   30   40   50   60   70   80   90   100\n\n\n\nA possible list:\n\n\nl1 &lt;- list(v1, v2, d1)\n\nSet the 4th item of vector inside a list to NA. The first item is a vector, so we will use that.\n\nl1[[1]][4] &lt;- NA\n\nYou can index a vector inside of a list by indexing the list first, then the vector.\n\nRemove list item:\n\n\nl1[[2]] &lt;- NULL\n\nWhen an item is set to NULL in a list, it disappears.\n\n\n\n\n\n\nEvergreen lesson\n\n\n\nAlways always always check your object to make sure it looks like what you expected it to.\nCommon checks:\n\nthe dimensions (row number, column number, length, etc) are what you expect\nthe data types are what you expect\nthe values are what you expect"
  },
  {
    "objectID": "practice/solution-A.html",
    "href": "practice/solution-A.html",
    "title": "Solutions to Practice A",
    "section": "",
    "text": "\\[ \\frac{1}{\\sigma\\sqrt{2\\pi}}e^{-\\frac{1}{2}(\\frac{x-\\mu}{\\sigma})^2}\\]\n\\(\\pi\\) = 3.14 \\(e\\) = 2.718 \\(\\mu\\) = 50 \\(\\sigma\\) = 5 \\(x\\) = 20\n\nFor this problem, there are several possible solutions:\n\n\nManual the whole way down:\n\n\n1/(5*(2*3.14)^0.5)*2.718^(-0.5*((20-50)/5)^2)\n\n[1] 1.217755e-09\n\n\n\nEmploying a few shortcuts\n\n\n1/(5*sqrt(2*pi))*exp(-0.5*((20-50)/5)^2)\n\n[1] 1.215177e-09\n\n\n\nR function that estimates the standard normal density (the equation above is the probability density function for the normal distribution)\n\n\ndnorm(x = 20, mean = 50, sd = 5)\n\n[1] 1.215177e-09\n\n\n\n\n\n\n\n\nNote\n\n\n\nIt’s not expected you would be aware of the second and third solutions given what has been taught thus far, but it’s helpful to be aware that many shortcuts exist in R to make coding easier.\n\n\n\nUsing the manual approach:\n\n\nx = c(10, 20, 30, 40, 50)\n1/(5*(2*3.14)^0.5)*2.718^(-0.5*((x-50)/5)^2)\n\n[1] 1.014069e-15 1.217755e-09 2.679505e-05 1.080317e-02 7.980869e-02"
  },
  {
    "objectID": "practice/practice-H.html",
    "href": "practice/practice-H.html",
    "title": "Practice H",
    "section": "",
    "text": "(for the data reshaping lesson)\n\nAs always, consider how these reshaping functions can support your own research and data analysis.\n\n\nImport “genotypic_data.txt” and remove columns 2 through 5 (‘CHROM’, ‘POS(cM)’, ‘Major_allele’, ‘Minor_allele’). What is left is genetic marker names and the marker scores for the individual lines (each column is an genetically distinct wheat line). Using pivot_longer(), reshape this object to long so there is one column for the marker name, one column for the wheat name, and the one column for the marker score. How many rows long is this object? Can you image trying to do this by hand??\nImport “weather_data.csv”. Filter to any single year and reshape the data from long to wide so that the levels in “station’ form the new column headers, ‘julian_day’ is the identifying column and the cells are filled with data from ‘tmax_F’.\nHere is a crazy extra exercise that utilizes transpose instead of pivoting. It’s not strictly related to reshaping. Only try this if you are in the mood for a challenge.\n\nThis problem is indicative of a data wrangling you can experience out in the wild. You are given a data set in one format, but a package requires your data be in another format.\nThe file “genotypic_data.txt” is a transposed version of “genotypic_data_rotated.csv”. Import “genotypic_data.txt” into R and use R commands to recreate “genotypic_data_rotated.csv”.\nThe column “individual” no longer has periods in the listed names, but the original file had periods in those names since they were column headers. Write code to remove those periods from the column “individual” in your transformed column (hint: look at the documentation for gsub()).\nSolution"
  },
  {
    "objectID": "practice/practice-F.html",
    "href": "practice/practice-F.html",
    "title": "Practice F",
    "section": "",
    "text": "(for the data wrangling lesson)\nIf you have your own data, import it and consider what sort of data wrangling you might need to do on the data set to ready it for analysis - does something need to be filtered or calculated? This is a good moment to apply skills learned. \n\nImport “trial_metadata.csv” with the readr function read_csv(). Create a new variable that combined information in the ‘location’ and ‘irrigation’ columns.\nFilter the imported data set for when the location is “Parma” and sort the data set based on planting date. Assign the results to a new object.\nSelect 4 columns from the data set and rename one of them. Assign these results to a new object.\nImport “weather_data.csv”, select the first five columns and reduce that data set to unique rows (look into using distinct() for extracting the unique observations).\nNEW: Import “trial_data.csv”. Split the “trials” column into 4 variables using separate() as we did in class (or see the lesson notes). Filter the data set to the 2 most recent years and the varieties WA8268, WB4418, WB4311, WB4623CLP, WB4792, and WB7589.\n\nHere is the prep work to do prior to separate():\n\ntrial_data &lt;- read.csv(here::here(\"data\", \"trial_data.csv\")) \n\ntrial_data$trial &lt;- gsub(pattern = \"_H_\", \n                         replacement = \"_H-\", \n                         x = trial_data$trial)\n\n\nOutput the result from any of the previous problems to file.\n\nSolution"
  },
  {
    "objectID": "practice/practice-Day1.html",
    "href": "practice/practice-Day1.html",
    "title": "Day1",
    "section": "",
    "text": "(for lessons on getting to know data)\nnote: covered practice tests: A, B, C (to be removed from here)\n\nImport “caribbean_maize.csv” with the function read.csv() and assigns it to an object named “data2”.\nCreate the vector names ‘plot’, ‘ears’, and ‘site’ by extracting these variables from data2.\nWhat is the data type of these vectors?\nConvert ‘plot’ into factor. Inspect the results. What happened?\nCreate a new vector (M1) as a product of addition of 100 to ‘ears’.\nMake a data frame (data3) consisting of ‘plot’, ‘ears’, and ‘isle’ using data.frame() function and look at the structure of the data.\nExtract the values located in the first 2 rows and third column of data3.\nCreate a boxplot with ‘site’ and ‘ears’ variables from data3.\n\n\n\n\n\n\n\nProblem Set for Data Importation\n\n\n\n\n\nImport “caribbean_maize.csv” with the function read_csv() and assigns it to an object named “data2”.\n\n\n\n\n\n\n\n\n\ntest\n\n\n\n\n\ncontent"
  },
  {
    "objectID": "practice/practice-C.html",
    "href": "practice/practice-C.html",
    "title": "Practice C",
    "section": "",
    "text": "(for the lesson on data structures)\n\nVectors\n\nYou have this object in your R session: x = 7. What is the difference between x[1] and x?\nMake a vector of letters “a” to “m” (all lowercase) and letters “N” to “Z” (all uppercase).\nMake a vector of numbers 1 to 10 and 2 to 50.\n\n\n\nData Frames\n\nMake a data frame consisting of 6 rows and 4 columns, where one is a character variable, another is numeric, another is logical and the another is a factor. Verify that each column type is what you intended it to be.\nYou have this data frame:\n\n\ndf &lt;- data.frame(one = 1:10,\n                 two = rnorm(10))\ndf$three &lt;- df$two + rnorm(10)\ndf$four &lt;- sample(c(\"A\", \"B\"), 10, replace = TRUE)\n\n\nAdd another column called ‘five’ that is a character variable consisting of levels that are fruits of your choice.\nAdd another column called ‘six’ that is ‘five’ coerced into a factor.\nMake a new data frame with the columns in this order: “five”, “one”, “four”, “two”, “three”.\n\n\n\nLists\n\nYou have this list: mylist = list(x1 = \"snow\", x2 = 45:65, x3 = rep(letters[1:3], each = 3), x4 = matrix(1:100, nrow = 10)). Return this list without x3.\nPut all your vectors and the data frame from the previous problems in this exercise set into a list. For the first list item that has a vector, change the forth item of that vector to missing.\nFor the list created in the previous problem, delete the second item.\n\n\n\n\n\n\n\nHints\n\n\n\n\n\n\nthe functions letters() and LETTERS() provide a shortcut for problem #3.\ntry using NULL for the last problem (under the “Lists” heading).\n\n\n\n\nSolution"
  },
  {
    "objectID": "practice/practice-A.html",
    "href": "practice/practice-A.html",
    "title": "Practice A",
    "section": "",
    "text": "(for lessons on R for mathematics and vectorized operations)\n\nMake this calculation using R math operators\n\n\\[ \\frac{1}{\\sigma\\sqrt{2\\pi}}e^{-\\frac{1}{2}(\\frac{x-\\mu}{\\sigma})^2}\\] Where: \\(\\pi\\) = 3.14, \\(e\\) = 2.718, \\(\\mu\\) = 50, \\(\\sigma\\) = 5, \\(x\\) = 20\n\nRepeat this calculation where \\(x\\) = {10, 30, 40, 50, 60}\n\nThe Solution"
  },
  {
    "objectID": "lessons/rstudio-tour.html",
    "href": "lessons/rstudio-tour.html",
    "title": "Introduction to RStudio",
    "section": "",
    "text": "Learning Recap\n\n\n\n\n\nAt the end of this lesson, you should understand:\n\nwhat the different tabs in each of the panes of RStudio do\nwhat is in each menu item in Rstudio and have a general sense of functionality available\nRStudio is more than a graphical user interface for R. It is an integrated development environment (IDE), that is a full service application for supporting software development. It can perform multitudes, so much more than what most R users need.\nIt is the supermarket of R functionality. Like a supermarket, there are parts of RStudio you will visit frequently and parts you will rarely if ever use. After 12+ years of using RStudio on a near daily basis, there are several parts of it that I continue to be unfamiliar with! Ths is okay - clearly, I have not needed those parts. You will come to find what sections you will need most over time and practice.\nStill, it helps to have a guided tour. Let’s dive into this.",
    "crumbs": [
      "Lessons",
      "Quick tour of R studio"
    ]
  },
  {
    "objectID": "lessons/rstudio-tour.html#the-panes",
    "href": "lessons/rstudio-tour.html#the-panes",
    "title": "Introduction to RStudio",
    "section": "The Panes",
    "text": "The Panes\nHere is a simplified schematic:\n\n\n\n\n\n\n\n\n\nThese can be rearranged, but for this class, we will use the default arrangement.\n\nThe Console/Terminal/Background Jobs\nDefault location: left or bottom left\n\n\n\n\n\n\n\nTab\nPurpose\n\n\n\n\nConsole\nwhere R commands are actually done\n\n\nTerminal\nuse a terminal language such as bash or the windows command prompt\n\n\nBackground jobs\nusual pacakage installation\n\n\n\nIn this workshop, we will only be using the Console.\n\n\nFiles/Plots/Packages/Help/Viewer/Presentation\n\n\n\n\n\n\n\n\n\nDefault location: bottom right\nProbably the most useful pane - we will be here frequently!\n\n\n\nTab\nPurpose\n\n\n\n\nPlots\nview plots\n\n\nFiles\nexplore your file system\n\n\nPackages\ninstall, update and load packages\n\n\nHelp\nhelps files & examples\n\n\nViewer\nfor previewing websites\n\n\nPresentation\nfor previewing presentations\n\n\n\nWe will not be using the Viewer or Presentations tabs in this workshop.\nWhat are Packages?\nThese make the world go around in R. All of R consists of packages or libraries that have certain functionality associated with them. Some of are maintained by the R core team, others are maintained by outsiders. All packages are open source and most are a volunteer effort. When you open R, several packages are loaded automatically: base, datasets, graphics, grDevices, methods, stats, utils.\nWe will talk about package installation and usage later in this course/workshop.\n\n\nEnvironment/History/Connections/Build/Git/Tutorial\n\n\n\n\n\n\n\n\n\n\n\n\nTab\nPurpose\n\n\n\n\nEnvironment\nobjects created and existing in your current R session\n\n\nHistory\nprevious R command run\n\n\nConnections\nto connect to an external database\n\n\nBuild\nfor building R packages and other large projects\n\n\nGit\nonly visible if you’ve initialized a git repository\n\n\nTutorial\ntutorials build by Posit (very helpful)\n\n\n\nhere\n\n\nOur Scripts Pane\n\n\n\n\n\n\n\n\n\ndefault location: upper left\nThese are all the files we create and edit: .R, .Rmd, .txt, etc. When we open files from the “Files” pane, this is where it shows up.",
    "crumbs": [
      "Lessons",
      "Quick tour of R studio"
    ]
  },
  {
    "objectID": "lessons/rstudio-tour.html#the-upper-menu-items",
    "href": "lessons/rstudio-tour.html#the-upper-menu-items",
    "title": "Introduction to RStudio",
    "section": "The Upper Menu Items",
    "text": "The Upper Menu Items\n\n\n\n\n\n\n\n\n\n\nFile\n\nOpening and/or creating files\n\nOpening and/or creating projects\n\nRecent files, recent project\n…standard file functionality\n\n\n\nEdit\n\nCopy, paste, find\nVery handy “find in files” feature!\n\n\n\nCode\n\nIncredible useful set of commands\nSome are very simple (e.g. “comment lines”), others are complex (e.g. “rename in scope”)\nOver time, you will learn what these mean and perhaps make use of them (if you don’t, that is okay)\n\n\n\nView\n\nRearrange panes\nZoom in/out\nOverall not that useful, except for the shortcuts\n\n\n\nPlots\n\n(self explanatory)\n\n\n\nSession\n\nVery handy for restarting your R session\nManually set the working directory\n\n\n\nBuild\n\nAdvanced tools for building packages, websites, et cetera. I’ve never visited this part of the supermarket.\n\n\n\nDebug\n\nTools for debugging code (removing scripting errors). We will not use this in the workshop! But you can learn more about it here.\n\n\n\nProfile\n\nFor code profiling (checking how long it takes your code to run). We will also not be using this in the workshop. This is part of the supermarket I rarely visit.\n\n\n\nTools\n\nSome handy utility function. I mostly use this menu item to set preferences via “Global Options”.\n\n\n\nHelp\n\nMmore utility functions. You can check for RStudio updates here, access community help forum, and other forms of documentation in addition to standard help files.\n\n\n\nmore\nRstudio has a massive number of keyboard shortcuts. You can find them in the menu (Help –&gt; Cheat Sheets) and summarized in this cheat sheet",
    "crumbs": [
      "Lessons",
      "Quick tour of R studio"
    ]
  },
  {
    "objectID": "lessons/reproducible-research.html",
    "href": "lessons/reproducible-research.html",
    "title": "Setting up R for Reproducible Research",
    "section": "",
    "text": "This lesson assumes you have installed R and RStudio.\n\n\n\n\n\n\nLearning Goals\n\n\n\n\n\nAt the end of this lesson, you should:\n\nknow to disable saving .Rdata\nknow to set up an R Project\nknow what reproducible research and be aware of practices that support this\n\n\n\n\n\nWhat is Reproducible Research?\nSlide set\n(navigate through the slides with your keyboard arrows)\nLearn More\n\n\nOptimal Set-up for Reproducible Research\nSlide set\n\n\n\n\n\n\nPutting it all together\n\n\n\nThese “meta” aspects of how to use R and implement reproducible research practices in your daily work will benfit you greatly. There is some upfront effort, but the final result is clearer code that you can understand in future and reuse."
  },
  {
    "objectID": "lessons/r-style-conventions.html",
    "href": "lessons/r-style-conventions.html",
    "title": "Object Naming and Other Style Concerns",
    "section": "",
    "text": "Learning Goals\n\n\n\n\n\nAt the end of this lesson, you should:\n\nunderstand how to assign variables and collections of numbers to an object name\nknow the rules for how to name objects\nunderstand reserved words in R and how to find them\nunderstand how white space functions in R\n\n\n\n\n\nObject assignment\nIt is rather cumbersome to continually retype or paste information. We can avoid this by assigning information to an R object.\nTraditionally in R, the left arrow is used for object assignment, &lt;- (the less-than symbol and a dash), but the standard equals sign, = also works.\nThese are equivalent:\n\nx &lt;- 1\nx\n\n[1] 1\n\nx = 1\nx\n\n[1] 1\n\n\nWe can assign multiple numbers to an object:\n\nx_vector &lt;- 1:10\ny_vector &lt;- c(2, 4, 6, 8, 10)\n\nThe left arrow assignment &lt;- takes everything on the right side of the arrow and assigns it the object name on the left.\n\n\nObject naming\nIt is your choice (mostly) about what to name R objects. There are a few rules and conventions to follow:\n\nChoose a name that is short, yet descriptive.\nSpaces are generally not allowed and a huge pain - so avoid doing this.\nDon’t start an object name with a number or symbol (this is technically possible, but also a pain).\nR is case sensitive, so test is different from Test and TEST. Be mindful of this! It trips many folks up.\nIt is possible that future you will thank your past self for using lowercase and avoiding special symbols (aside from . and _)\nIf you start a function name with a “.” (e.g. .variable), you won’t see it listed in the global environment (which can be frustrating). This is not recommended for newer R users.\nYou cannot use “reserved words” from the R language (terms set aside for very specific purposes in R). When typing these in an R console, they usually light up in a special colors.\n\nHere is some discussion on object naming in R.\n\n\nReserved words\n\n\n\n\n\n\n\nreserved word\nmeaning\n\n\n\n\nTRUE FALSE\nlogical\n\n\nNA\nmissing value\n\n\nNaN\nnot a number/undefined\n\n\nNULL\nno value/undefined\n\n\nInf -Inf\ninfinity\n\n\nfor in\nfor loops\n\n\nif else while break next repeat\ncontrol flow\n\n\nNA_integer_ NA_real_ NA_complex_ NA_character_\nmissing data by data type\n\n\n\nIt’s easy to forgot these. Run ?reserved in an R console or check here to remind yourself if need be.\nSome examples of reserved words in the wild:\n\nlog(0)\n\n[1] -Inf\n\n0/0\n\n[1] NaN\n\n2/0\n\n[1] Inf\n\n\n\n\nSome additional notes on R syntax\n\nmost often, the amount of white space does not matter.\n\nThese are the same:\n\n4/3\n\n[1] 1.333333\n\n4/    3\n\n[1] 1.333333\n\n4    /  3\n\n[1] 1.333333\n\n\nThese are also the same:\n\nlog(10)\n\n[1] 2.302585\n\nlog( 10 )\n\n[1] 2.302585\n\nlog ( 10)\n\n[1] 2.302585\n\n\n\nR expects certain things to be paired or completed before it will send it to the interpreter\nAs mentioned, earlier a hard return is sufficient to send a command to the R interpreter.\nExceptions: binary operators (= those expecting 2 numbers): +, -, *, /, ^, ==, etc. R is waiting for these to be ‘completed’.\nExceptions: unclosed parentheses (), brackets [] {}, or quotes ' ' \" \". R will wait for these to be completed. A single quote must always be complemented by a second single quote, and a double quote likewise must always have a second quote to complete it. Left parentheses, curly braces, or brackets much also be accompanying by their right-sided complement.\nExamples\n\n\n1 + 2\n{ }\n( )\n[ ]\n\"  \"\n' '\n` `\n\nErrors\n\n\n1 + \n'\n(  } ] \n\"\n' \"\n\nThere is no difference between double and single quotes on a practical level, but R will interpret them as different commands (so a single quote cannot close a double quote). This is useful when there is nested levels of quoting. This is uncommon, but, it does happens now and then.\n\nExample:\n\n\"r `format(Sys.Date(), '%b %d, %Y')`\"\n\n[1] \"r `format(Sys.Date(), '%b %d, %Y')`\"\n\n\nIf this particular piece of code makes no sense to you, do not worry. The point of presenting this code at this stage in your journey of learning R is to demonstrate how single quotes, double quotes and the backtick ` can be used together in single statement.\n\n\n\n\n\n\nPutting it all together\n\n\n\nMatching parentheses, quotes, and other paired structures is important in R. The R interpreter may stop if it is waiting for a statement to be ‘closed’. As a result, RStudio will often automatically append a pair while you type. Try typing a single quote, double quote, square bracket, curly bracket, parentheses or backtick and notice how this happens.\nRstudio furthers this practice when you highlight text. In RStudio, highlight some text and then type the key for double quotes. What happened? Try the same with parentheses and the other keys/symbols mentioned. Once you get used to this, it will save you some time!",
    "crumbs": [
      "Lessons",
      "R style conventions"
    ]
  },
  {
    "objectID": "lessons/math-operators.html",
    "href": "lessons/math-operators.html",
    "title": "Math Operators & Vectorizing",
    "section": "",
    "text": "Learning Goals\n\n\n\n\n\nAt the end of this lesson, you should:\n\nunderstand sorts of math operators available in R and how to use them\nunderstand logical operators in R\nbe aware of the order of operations\nbe aware of how whitespace is interpreted in R\nunderstand how to use parentheses, brackets, braces and quotations in R\nbe able to repeat a set of operations across a vector\nbe able to create a sequence of numbers in R using any starting value and any ending value\n\n\n\n\n\nR as a calculator\n\nAddition, subtraction, multiplication, division\n\n1 + 3\n\n[1] 4\n\n10 - 15\n\n[1] -5\n\n2*8\n\n[1] 16\n\n60/12\n\n[1] 5\n\n\nA hard return between lines of code is sufficient to separate the commands.\n\n\nExponentiation\n\n3^2\n\n[1] 9\n\n2^4\n\n[1] 16\n\n9^0\n\n[1] 1\n\n2^-2\n\n[1] 0.25\n\n\nR can also handle scientific notation. This number, 3e2 is equivalent to \\(3 * 10^2\\), or \\(3000\\).\n\n\nRoots (square, cube, ….)\n\n4^(1/2)\n\n[1] 2\n\n8^(1/3)\n\n[1] 2\n\n\n\n\nLogs\n\nlog(10)\n\n[1] 2.302585\n\n\n(base e)\nlog with base 10\n\nlog10(10)\n\n[1] 1\n\n\nlog with base 2\n\nlog2(4)\n\n[1] 2\n\n\nIf you have other bases:\n\nlog(10, base = 4)\n\n[1] 1.660964\n\n\n\n\nOperations with sign\n(positive and negative signs are called “unary operators”)\n\n3*-4\n\n[1] -12\n\n\nLike in standard math, only negatively signed numbers need to be specified.\n\n\nInteger division (the remainder is discarded)\n\n5 %/% 3\n\n[1] 1\n\n\n\n\nModulus operator (return the remainder after division)\n\n5 %% 3\n\n[1] 2\n\n\n….and so much more\n\n\n\nLogical Operators\nThese test for conditions (“is this true?”) and return either a TRUE or FALSE\n\n\n\nsyntax\nFunction\n\n\n\n\n==\nequal\n\n\n!=\ndoes not equal\n\n\n&lt;\nless than\n\n\n&gt;\ngreater than\n\n\n&lt;=, &gt;=\nless than and equal to, and greater than equivalent\n\n\n\nExamples\n\n1 == 1\n\n[1] TRUE\n\n1 == 2\n\n[1] FALSE\n\n1 != 2\n\n[1] TRUE\n\n1 &lt; 1\n\n[1] FALSE\n\n1 &gt; 1\n\n[1] FALSE\n\n1 &lt;= 1\n\n[1] TRUE\n\n1 &gt;= 1\n\n[1] TRUE\n\n\nWhen testing multiple conditions: use & (‘and’) if two things must be true and | (‘or’) if one of two things must be true:\n\n1 &lt; 2 & 1 != 1 \n\n[1] FALSE\n\n1 &lt; 2 | 1 != 1\n\n[1] TRUE\n\n\n\n\nOrder of operations.\nThe rules:\n\noperations go left to right\nexponents are first, followed by ‘unary operators’ (+/- signs)\nmultiplication and division before subtraction and/or addition\nlogical operators come after all mathematical transformations\nParentheses overall all other rules!\n\nWhat results from this?\n\n2^3+4+12*7/2 &lt;= -6*9\n\nWhen in doubt about the order of operations use parentheses!\nHere is the official R guide to order of operations (warning: this is complicated and refers to functions beyond mathematical operators).\n\n\n\n\n\n\nNote\n\n\n\nIf you become stuck with an unfinished command, you can use the escape key, ESC, to get out of it.\n\n\n\n\nVectorizing operations\nUsing R as a calculator between a few numbers is handy, but typically we are hoping to do so much more with it, such as performing a calculations across a long list of numbers.\nR is naturally vectorized, which means that you can easily perform a mathematical operation across a vector of numbers (no need to write loops!)\nSay we have a collection of numbers from 10 to 20 and we want to multiple them all by 12. We can create a sequence of numbers by wrapping them all in c() command (for “concatenate”) and separating each with a comma.\n\nc(10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)\n\n [1] 10 11 12 13 14 15 16 17 18 19 20\n\n\nThen those numbers can be operated on by any math operator:\n\nc(10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) * 10 - 1\n\n [1]  99 109 119 129 139 149 159 169 179 189 199\n\n\nThere’s also a quicker way to specify a sequence of integers using the notation start:end:\n\n1:10\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n\nIt also counts down:\n\n20:10\n\n [1] 20 19 18 17 16 15 14 13 12 11 10\n\n\nAnd works with negative integers:\n\n-5:5\n\n [1] -5 -4 -3 -2 -1  0  1  2  3  4  5\n\n\nThese can be operated on:\n\n(-5:5)^2\n\n [1] 25 16  9  4  1  0  1  4  9 16 25\n\n\n\n\n\n\n\n\nPutting it all together\n\n\n\nCheck the “History” tab in the upper right hand pane (this should be to the right of the “Environment” tab). What is there?\nIf you followed along and coded the above examples, you should see the command you ran previously (including any mistakes). This is your command history. There are several icons directly above your history - explore what those do (hoover before clicking any icon to make sure you are okay with action before performing it).",
    "crumbs": [
      "Lessons",
      "Getting to know data in R",
      "Math Operators"
    ]
  },
  {
    "objectID": "lessons/ggplotting.html",
    "href": "lessons/ggplotting.html",
    "title": "Publication-Quality Plots with ggplot2",
    "section": "",
    "text": "Learning Goals\n\n\n\n\n\nAt the end of this lesson, you should:\n\nunderstand how to construct a ggplot\nunderstand that a ggplot is composed of layers\nknow how to map data set information to a ggplot\nbe able to save a ggplot to your file system\n\n\n\n\n\nData and packages\nWe will load ggplot2, which will automatically load a useful package of color palette, RColorBrewer. The package dplyr is also loaded since we will need to use some of their functions to prepare the data for plots.\nThe data set, “nass.hay” is from the agridat package. It is historic data on hay production across U.S. states from 1909 to 2012 gathered by the National Agricultural Statistics Service. This script also creates a data object only containing data from Idaho, and a data object with hay production stats from 2012.\n\nlibrary(dplyr)\nlibrary(ggplot2)\n\nThe package ‘agridat’ is needed for this lesson.\n\nif(!require(agridat)) {\n  install.packages(\"agridat\")\n  library(agridat)}\n\nagridat is a package consisting solely of several hundred agricultural data sets, along with example code for data visualiztion or analysis. This is an extraordinary resource! This lesson will use a data set from the National Agricultural Statistics Service (NASS). This is hay yields between 1909 and 2012 for by state (in the US). Some states do not have Ha\n\ndata(\"nass.hay\")\nstr(nass.hay)\n\n'data.frame':   5044 obs. of  4 variables:\n $ year : int  1909 1909 1909 1909 1909 1909 1909 1909 1909 1909 ...\n $ state: Factor w/ 49 levels \"Alabama\",\"Alaska\",..: 1 3 4 5 6 7 8 9 10 11 ...\n $ acres: num  275000 98000 409000 2503000 1180000 ...\n $ yield: num  0.96 2.42 1.05 1.61 1.73 1.15 1.22 0.69 0.86 2.16 ...\n\nsummary(nass.hay)\n\n      year              state          acres             yield      \n Min.   :1909   Alabama    : 104   Min.   :   6900   Min.   :0.250  \n 1st Qu.:1935   Arizona    : 104   1st Qu.: 370000   1st Qu.:1.228  \n Median :1961   Arkansas   : 104   Median : 998500   Median :1.700  \n Mean   :1961   California : 104   Mean   :1368800   Mean   :1.867  \n 3rd Qu.:1987   Colorado   : 104   3rd Qu.:2050000   3rd Qu.:2.240  \n Max.   :2012   Connecticut: 104   Max.   :5964000   Max.   :8.160  \n                (Other)    :4420                     NA's   :48     \n\nhead(nass.hay)\n\n  year       state   acres yield\n1 1909     Alabama  275000  0.96\n2 1909     Arizona   98000  2.42\n3 1909    Arkansas  409000  1.05\n4 1909  California 2503000  1.61\n5 1909    Colorado 1180000  1.73\n6 1909 Connecticut  387000  1.15\n\n\nFirst, let’s create a few smaller data sets by filtering the data by different conditions.\n\n# all observations from Idaho\nhay_idaho &lt;- filter(nass.hay, state == \"Idaho\") \n# all observations for 2012 \nhay2012 &lt;- filter(nass.hay, year == 2012)\n# all observations for Idaho, Oregon, Washinton and Montana\nhay_pnw &lt;- filter(nass.hay, state %in% c(\"Oregon\", \"Washington\", \"Montana\",\"Idaho\")) |&gt; \n  mutate(state = as.character(state)) \n\n\n\nBuilding a ggplot\n\nA ggplot needs 3 parts:\n\ndata\naesthetics which connect or map the data to the geom\na type of plot, or geom, to implement\n\nNote:\n\nggplot2 uses the + notation in their plots (see below). It’s my understanding that there is some regret over this style decision by the ggplot authors, but it is now an accepted convention.\nggplot2 also uses non-standard evaluation, so, often column names do not need to be quoted\n\ncommon mapping aesthetics:\n\nx (the x variable)\n\ny (the y variable)\n\ncol (color for lines, points, outlines)\n\nfill (color when something has a fill color such as a boxplot)\n\ngroup (when a plotted option should be grouped, then plotted)\n\n\n\n\n\nbuild a simple plot\nGoal: plot yield over time for hay production in Idaho\nHere is what the final plot will look like:\n\n\n\n\n\n\n\n\n\n\nStep 1: Add the data\n\nggplot(hay_idaho)\n\n\n\n\n\n\n\n\nThere is not much to see here since we have not specified anything beyond the data set to use.\n\n\nStep 2: Add aesthetics\n\nggplot(hay_idaho, mapping = aes(x = year, y = yield))\n\n\n\n\n\n\n\n\nThis step mapped “year” and “yield” from the hay_idaho data set to the x and y axes, respectively. Nothing is plotted because we have not specified what type of plot geom we want.\n\n\nStep 3: Add a geom\n(explicit mapping command dropped - use a positional argument instead)\n\nggplot(hay_idaho, aes(x = year, y = yield)) +\n  geom_line(na.rm = TRUE)\n\n\n\n\n\n\n\n\nWe can ignore this warning telling us there is missing data. That happens when using NASS data!\nQuestion: What happens if we use |&gt; instead of +?\n(try it to find out)\n\n\n\nCommon plot improvements\n\nplot title and axis labels\n\nggplot(hay_idaho, aes(x = year, y = yield)) +\n  geom_line(na.rm=TRUE) +\n  ggtitle(\"Total historic hay yields in Idaho\") + \n  xlab(\"Year\") +\n  ylab(\"yield (1000s of tons)\")\n\n\n\n\n\n\n\n\n\n\nChange line settings\n(and other geom arguments)\n\nggplot(hay_idaho, aes(x = year, y = yield)) +\n  geom_line(color = \"turquoise3\", linewidth = 1, linetype = 1, na.rm=TRUE) +\n  ggtitle(\"Total historic hay yields in Idaho\") + \n  xlab(\"Year\") +\n  ylab(\"yield (1000's of tons)\")\n\n\n\n\n\n\n\n\nThe default line type is “1”, which is a plain line. There are other types:\n\n\n\n\n\n\n\n\n\n\n\n\nOther common geoms:\n\npoints\n\nggplot(hay_idaho, aes(x = year, y = yield)) +\n  geom_point(shape = 2, col = \"navy\", na.rm=TRUE) +\n  ggtitle(\"Total historic hay yields in Idaho\") + \n  xlab(\"Year\") +\n  ylab(\"yield (1000s of tons)\")\n\n\n\n\n\n\n\n\nThere are many options for the type of plotting character (“pch” in base R plotting and “shape” in ggplot):\n\nThe default shape is “1” (the circle). Plotting symbols 21 - 25 have outline color and fill attributes, while the other symbols only take a single color argument.\n\n\narea\n\nggplot(hay_idaho, aes(x = year, y = yield)) +\n  geom_area(fill = \"orange\", col = \"gray20\", na.rm=TRUE) +\n  ggtitle(\"Total historic hay yields in Idaho\") + \n  xlab(\"Year\") +\n  ylab(\"yield (1000s of tons)\")\n\n\n\n\n\n\n\n\n\n\nboxplot\n\nggplot(hay_pnw, aes(x = state, y = yield)) +\n  geom_boxplot(na.rm=TRUE) +\n  ggtitle(\"Yearly hay yields in the Pacific Northwest\") + \n  xlab(\"State\") +\n  ylab(\"yield (1000s of tons)\")\n\n\n\n\n\n\n\n\nColor all boxplots the same:\n\nggplot(hay_pnw, aes(x = state, y = yield)) +\n  geom_boxplot(fill = \"yellow\", na.rm=TRUE) +\n  ggtitle(\"Yearly hay yields in the Pacific Northwest\") + \n  xlab(\"State\") +\n  ylab(\"yield (1000s of tons)\")\n\n\n\n\n\n\n\n\nColor boxplots by state:\n(This requires an aes statement)\n\nggplot(hay_pnw, aes(x = state, y = yield, fill = state)) +\n  geom_boxplot(na.rm=TRUE) +\n  ggtitle(\"Yearly hay yields in the Pacific Northwest\") + \n  xlab(\"State\") +\n  ylab(\"yield (1000s of tons)\")\n\n\n\n\n\n\n\n\nQuestion: What happens if we specify “color = state” instead of “fill = state”?\n(Try it and find out).\n\n\n\n\n\n\nNote\n\n\n\nAesthetic statements (those wrapped in aes()) can be made in the first ggplot argument or within a specific geom. These two examples are equivalent:\nexample\nggplot(mydata, aes(x, y)) +\n  geom_line()\nexample 2\nggplot(mydata) +\n  geom_line(aes(x, y))\nThe aes() argument is sometimes specified within a geom if a particular aesthetic changes between geom (e.g. the fill aesthetic changes). Otherwise, the default aesthetic is whatever was previously specified.\n\n\n\n\nhistograms and density plots:\n\nggplot(hay_idaho, aes(x = yield)) +\n  geom_histogram(fill = \"gray70\", col = \"black\", bins = 20, na.rm=TRUE)\n\n\n\n\n\n\n\n\nUnlike in base R plotting, creating a density plot and shading the are under the curve is easy.\n\nggplot(hay_pnw, aes(x = yield, fill = state)) +\n  geom_density(na.rm=TRUE)\n\n\n\n\n\n\n\n\nIn this plot, it is hard to see what is going on since the each distribution covers up the one plotted before it (so we can’t really see Idaho, but Washington’s hay yield distribution is clear). The attribute “alpha” can be used to add a transparency to colors. The code is alpha =  n where n is the proportion of the color that is shown (0 is completely transparent and 1 is no transparency).\n\nggplot(hay_pnw, aes(x = yield, fill = state)) +\n  geom_density(alpha = 0.5, na.rm=TRUE)\n\n\n\n\n\n\n\n\n\n\nCombining geoms\nGeoms are best thought of as plotting layers. Additional geoms can be added to a single plot, adding additional layers of information. Each geom is added to the plot in the order it is specified in the ggplot statement.\n\n\n\n\n\n\n\n\n\nAdding an overall of points over boxplots is a good way to summarise the empirical distribution of a large number of data points:\n\nggplot(hay_pnw, aes(x = state, y = yield, fill = state)) +\n  geom_boxplot(na.rm = TRUE) +\n  geom_point(na.rm = TRUE) +\n  ggtitle(\"Yearly hay yields in the Pacific Northwest\") + \n  xlab(\"State\") +\n  ylab(\"yield (1000s of tons)\")\n\n\n\n\n\n\n\n\nIn this example, it is likely there is over-plotting of data since each state has 104 data point associated with it. The geom geom_jitter() can be used to jiggle overlapping points. Points can be jittered in the vertical and horizontal direction. In this case, jittering in the horizontal direction will result in no change in the interpretation since the y-axis indicates actual value associated with each point.\n\nggplot(hay_pnw, aes(x = state, y = yield, fill = state)) +\n  geom_boxplot(na.rm = TRUE) +\n  geom_jitter(width = 0.2, height = 0, na.rm = TRUE, alpha = 0.7) +\n  ggtitle(\"Yearly hay yields in the Pacific Northwest\") + \n  xlab(\"State\") +\n  ylab(\"yield (1000s of tons)\")\n\n\n\n\n\n\n\n\n\n\n\nOther common plotting options\n\nFaceting\nSometimes, it is useful to create a set of similar plots with the same scaling. Facets are useful for this purpose.\nFor an example, below is a plot of the distributions from above using facet_grid().\n\nggplot(hay_pnw, aes(x = yield)) +\n  geom_density(col = \"blue\", fill = \"dodgerblue\", alpha = 0.6, na.rm = TRUE) +\n  facet_grid(. ~ state) # for a horizontal facet\n\n\n\n\n\n\n\nggplot(hay_pnw, aes(x = yield)) +\n  geom_density(col = \"darkgreen\", fill = \"springgreen3\", alpha = 0.6, na.rm = TRUE) +\n  facet_grid(state ~ .) # for a vertical facet\n\n\n\n\n\n\n\n\nFaceting can also be done be used to create a grid of plots with facet_wrap():\n\nggplot(hay_pnw) +\n  geom_line(aes(x = year, y = yield), col = \"darkcyan\", na.rm=TRUE) +\n  facet_wrap(. ~ state, nrow = 2, ncol = 2)\n\n\n\n\n\n\n\n\n\n\nRepresenting error information\nExample: create a band indicates the minimum and maximum range of values\n\nhay_yearly &lt;- nass.hay |&gt; group_by(year) |&gt; \n  summarise(Yield = mean(yield), yield_min = min(yield), yield_max = max(yield))\n\nggplot(hay_yearly, aes(x = year)) + \n  geom_ribbon(aes(ymin = yield_min, ymax = yield_max), fill = \"gray70\", na.rm=TRUE) +\n  geom_line(aes(y = Yield), linewidth = 0.8, na.rm=TRUE)\n\n\n\n\n\n\n\n\nExample: add error bars\nTwo other plot adjustments included: * indicate the range of numbers that the y-axis should span * flip the x and y axes\n\nhay_pnw_summary &lt;- hay_pnw |&gt; group_by(state) |&gt; \n  summarise(Yield = mean(yield, na.rm = T), yield_sd = sd(yield, na.rm = T))\n\nggplot(hay_pnw_summary, aes(y = state)) + \n  geom_errorbar(aes(xmin = Yield - yield_sd, xmax = Yield + yield_sd), width = 0.2) +\n  geom_point(aes(x = Yield), shape = 18, size = 5, col = \"blue\") +\n  # set the limits (lower and upper bounds for the x-axis)\n  xlim(c(0, 3.7)) +\n  ylab(\"\") \n\n\n\n\n\n\n\n\n\n\nAdd regression lines to a plot\n\nP &lt;- ggplot(hay_idaho, aes(x = acres, y = yield)) +\n  geom_point(shape = 16, alpha = 0.6, size = 2.5, na.rm=TRUE)\nP  # Plots can be assigned to an object and then later added to\n\n\n\n\n\n\n\nP +\n  geom_smooth(method = \"lm\", na.rm=TRUE) +\n  geom_smooth(method = \"loess\", col = \"yellowgreen\", na.rm = TRUE)\n\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\n\nAdjusting non-data items\n\nAdjustments to the background, text size and other details are done in the theme() argument command.\nthe complete list of option is available in the ggplot2 documentation\nthere are several pre-built themes:\n\n\n\nMore ggplot themes\n\n\nImplementing a ggplot theme\n\nfacet.plot &lt;- ggplot(hay_pnw) +\n  geom_line(aes(x = year, y = yield), col = \"darkcyan\", na.rm=TRUE) +\n  facet_wrap(. ~ state, nrow = 2, ncol = 2)\n\nfacet.plot + theme_minimal() \n\n\n\n\n\n\n\n\nThis is not exactly what I want. Larger labels on everything would be helpful, as well as an outline around each plot. And while we are at it, labeling the x-axis for each decade rather than every 25 years would be easier to interpret.\n\n\nAdjusting text size\n\nfacet.plot + \n  theme_minimal() +   # the theme must be added to plot *before* manual theme adjustments \n  theme(\n   axis.title = element_text(size = 14),\n   axis.text = element_text(size = 13)\n )\n\n\n\n\n\n\n\n\n\n\nAdjusting the axis and gridlines\n\nfacet.plot + \n  scale_x_continuous(breaks = c(seq(1910, 2015, by = 10)))  +\n  theme_minimal() + \n   theme(\n     axis.title = element_text(size = 14),\n     axis.text = element_text(size = 13)\n   ) \n\n\n\n\n\n\n\n\nIt looks like the years are spaced too close together and there are too many grid lines. This can all be fixed.\n\nfacet.plot + \n  scale_x_continuous(breaks = c(seq(1910, 2015, by = 10)))  +\n  theme_minimal() + # this must be added to plot before manual theme adjustments \n   theme(\n     axis.title = element_text(size = 14),  # adsjut title of the axes\n     axis.text = element_text(size = 13),  # adjust axes tick labels\n     axis.text.x = element_text(angle = 45, hjust = 1), # adjust individual axis tick labels \n     panel.grid.minor = element_blank(),  # remove minor grid lines (the major grid lines were retained)\n     panel.border = element_rect(colour = \"black\", fill = \"transparent\"), # create a border around each panel\n     strip.text = element_text(size = 15) # adjust panel labels (e.g. \"Idaho\")\n   ) \n\n\n\n\n\n\n\n\n\n\nAdjusting the legend\n\nggplot(hay_pnw) +\n  geom_line(aes(x = year, y = yield, col = state), na.rm = TRUE) +\n  # set the scale for x-axis (yer)\n  scale_x_continuous(breaks = c(seq(1910, 2015, by = 10)))  +\n  theme_bw() \n\n\n\n\n\n\n\n\nThis looks okay, but it could be better. There is room to put the legend inside the plot and the text should probably be larger. Also, the legend title is not really needed.\n\nggplot(hay_pnw) +\n  geom_line(aes(x = year, y = yield, col = state), na.rm = TRUE) +\n  scale_x_continuous(breaks = c(seq(1910, 2015, by = 10)))  +\n  theme_bw() +\n  theme(\n    legend.position = c(0.15, 0.8), # give exact coordinates (ranging from 0 to 1)\n    legend.background = element_rect(colour = \"black\"),\n    legend.text = element_text(size = 12),\n    legend.title = element_blank()\n  )\n\nWarning: A numeric `legend.position` argument in `theme()` was deprecated in ggplot2\n3.5.0.\nℹ Please use the `legend.position.inside` argument of `theme()` instead.\n\n\n\n\n\n\n\n\n\nThe legend can also be moved to locations outside the main plotting area with arguments such as legend.position = \"top\", legend.position = \"left\" and so on.\n\n\n\n\n\n\nPractice Problem\n\n\n\n\n\n\nCreate a point scatter plot for yield over years and add color & shape effect for the state factor.\n\n\n\n\n\n\nSummary\nThere are many options for adjusting elements of a ggplot. You you will inevitable need to consult help files at some point.\n\n\n\nA bit on colors\nR has a rich set of colors and some excellent palettes that provide excellent contrast and/or work for color-blind individuals. Several are automatically loaded with ggplot2, such as the RColorBrewer:\n\nlibrary(RColorBrewer)\ndisplay.brewer.all()\n\n\n\n\n\n\n\n\n\n\nThe package viridis also has some nice color palettes that are widely used. Also check out the paletteer and the accompanying R palette picker for a wider set of options.\n\n\nOther Important Stuff\n\nHow to save plots\n\nThe function ggsave() is the recommended approach.\nBy default, it will save the the last plot created.\n\n\nggplot(hay_pnw) +\n  geom_line(aes(x = year, y = yield), col = \"violetred\", na.rm=TRUE) +\n  facet_wrap(. ~ state, nrow = 2, ncol = 2) +\n  theme_linedraw()\n\n\n\n\n\n\n\n\n\nggsave(\"PNW_hay_production.png\", dpi = 300)\n\n\nother acceptable formats:\n\n.jpeg\n.tiff\n.bmp\n.svg\n.wmf (on windows machines)\n.pdf\n.eps\n.ps\n.tex\n.pd\n\ncan specify the size of the saved plot (in centimeters, millimeters or inches) and the resolution in DPI (dots per square inch)\n\n\n\nOther great geoms\n\n\n\n\n\n\n\ngeom\npurpose\n\n\n\n\ngeom_violin()\nviolin plot\n\n\ngeom_ribbon()\nhorizontal filled undulating band\n\n\ngeom_bar()\nfor creating bar plots\n\n\ngeom_abline(), geom_hline(), geom_vline()\nfor adding straight lines to a plot\n\n\ngeom_map()\npart of the rich ecosystem of ggplot mapping functions\n\n\ngeom_rug()\nadds rug plots to edges of a plot\n\n\n\nHere is the compplete list of ggplotting options available in ggplot2.\n\n\n\nggplot extensions\nMany packages have been developed to extend ggplot’s functionality. Here are a few notable examples:\n\nggridge\n\n# break hay data into decennial increments (roughly)\nnass.hay$decade &lt;- cut(nass.hay$year, breaks = c(1900, 1920, 1930, 1940, 1950, 1960, 1970, 1980, 1990, 2000, 2020), labels = c(\"pre-1920\", \"1920s\", \"1930s\", \"1940s\", \"1950s\", \"1960s\", \"1970s\", \"1980s\", \"1990s\", \"2000s\"))\n\nlibrary(ggridges); library(viridis)\n\nggplot(nass.hay, aes(x = yield, y = reorder(decade, desc(decade)), fill = after_stat(x))) +\n  geom_density_ridges_gradient(rel_min_height = 0.001) +\n  scale_fill_viridis(direction = -1) + \n  ylab(\"\") # suppress the y-axis label\n\n\n\n\n\n\n\n\n\n\nplotly\n\nlibrary(plotly)\n\npl &lt;- ggplot(nass.hay, aes(x = year, y = yield, color = acres)) +\n  geom_point(na.rm = TRUE) +\n  geom_point(aes(text = state), na.rm = TRUE) + \n  scale_color_gradientn(colors = alpha(rainbow(10), 0.5)) +\n  theme_bw()\n\nggplotly(pl)\n\n\n\n\n\nTo save an interactive plot, use htmlwidgets::saveWidget().\n\n\ngganimate example\n\nPlot from “Learn gganimate”.\n\n\n\nOther resources\n\nPackage documentation\nOfficial ggplot guidebook\nTutorials put together by package authors\n\n\nvignette(\"ggplot2\")\n\n\nThere are innumerable ggplot tutorials like this one on the interwebs, such as this one, this one, and this one, among many others.\nggplot-focused data visualization workshop by Cédric Scherer.\nR Graphics Cookbook Online Book, which is also a purchasable book. This is written by Winston Chang, one of the main authors of the ggplot2 package. It is a very helpful resource for consulting.\n\n\n\nggplot can be fun\nPlot of shots made by NBA Player Steph Curry, made using gganimate:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPutting it all together\n\n\n\nggplot is part of the Tidyverse, despite having different conventions, like the use of the “+” operator for adding plot layers. You can take Tidyverse output from piped operations and pipe that directly into a ggplot:\n\nmydata |&gt; filter(var == \"some_conditions\") |&gt; \n  ggplot(...)"
  },
  {
    "objectID": "lessons/final_Lesson.html",
    "href": "lessons/final_Lesson.html",
    "title": "Moving on",
    "section": "",
    "text": "If you made this far, congratulations! Learning any programming language takes a big effort.\nThis is only the beginning. You will probably need more R knowledge, both generalized and specialized, to accomplish your research goals. Here are a few resources to develop stronger data science skills in R.\nI tried to get everyone a bit up this learning curve and out of the zone of pain:\n\n\n\n\n\n\n\n\n\n\nData Science in a Box is a online course by Mine Çetinkaya-Rundel with videos for further development of R skills.\nR 4 Data Science by Hadley Wickham and Garret Grolemund is a comprehensive book providing guidance on leveraging R for data science aims\nWhat They Forgot to Teach you about R (and workshop version) describes some meta processes for ensuring a repeatable workflow.\norginal R manuals (highly technical)\n\nThere are many other resources to help develop skills in genetics, bioinformatics, geospatial analysis, Bayesian statistics, ….you name it. Look for the resources that will help you develop skills in R. One very reliable place to start are CRAN Task Views which provide a list of packages and other relevant R resources specific for a given topic such as environmetrics (ecology), spatial tools and agriculture.\nAnother good source for keeping up with major developments in R, contributed R packages and other R resources is R Weekly which puts out a weekly blog post (also available in a weekly podcast and an RSS feed)."
  },
  {
    "objectID": "lessons/data-types.html",
    "href": "lessons/data-types.html",
    "title": "Lesson 4: Introduction to R data types",
    "section": "",
    "text": "Learning Goals\n\n\n\n\n\nAt the end of this lesson, you should:\n\nUnderstand what object class means and how to determine and object’s class\nUnderstand the difference between the 5 main object classes: logical, integer, numeric, character and factors.\nknow how to coerce objects from one class to another\n\n\n\n\nR is a programming language and like all programming languages, it has special conventions for defining how information is classified on your computer and what types of actions can be performed on different data types.\nMuch of this is related to your computer hardware, how computer memory is allocated for R objects and processes and so forth. You don’t need to understand the guts of this to use R (but should you ever want to learn, this is fascinating material).\nThe most common object types and the rules that govern them are described in this lesson.\n\nData types\n\nNumeric\nPreviously, we created an object in R that was a collection or sequence of numbers.\n\nx1 &lt;- 1:10\n\nThese numbers are technically integers (sometimes called “long integers”). We can also create “floating point numbers” (e.g. with precision past the decimal point):\n\nx2 &lt;- c(1.25, 2.718, 10.000)\n\nThese are also called “double precision numbers” or “double” for short.\n\n\nCharacter\nThese can also be created for character variables:\n\nx3 &lt;- \"apple\"\nx4 &lt;- c(\"orange\", \"banana\")\n\nCheck the type for each R object\n\n class(x1)\n\n[1] \"integer\"\n\n class(x2)\n\n[1] \"numeric\"\n\n class(x3)\n\n[1] \"character\"\n\n class(x4)\n\n[1] \"character\"\n\n\n\n\n\n\n\n\nNote\n\n\n\nYou can force a number to be a integer by adding an L to a number as long as it does not contain a decimal pont (e.g. c(0L, 1L, 2L))\n\n\nThere are two other special classes:\n\n\nLogical\n\nconsisting of TRUE and FALSE values\n\n\nx5 &lt;- c(TRUE, FALSE, FALSE, TRUE)\nclass(x5)\n\n[1] \"logical\"\n\n\n\n\n\nObject type coercion\n\nR will automatically an assign an object type based on the items present within object. It will try to assign the simplest type possible. Here are the types from simplest to most complex:\n\n\\[logical &lt; integer &lt; numeric &lt; character\\]\nWhat classes do you think results from each of these?\n\nx8 &lt;- c(8, 9.2)\nx9 &lt;- c(0, 0, 0, 0)\nx10 &lt;- c(TRUE, FALSE, 1, 0)\nx11 &lt;- c(1, 2, \"pear\", -6:2, TRUE)\n\n\n\n\n\n\n\nAnswers\n\n\n\n\n\n\nclass(x8)\n\n[1] \"numeric\"\n\nclass(x9)\n\n[1] \"numeric\"\n\nclass(x10)\n\n[1] \"numeric\"\n\nclass(x11)\n\n[1] \"character\"\n\n\n\n\n\nWhen you start importing data, you may notice variables did not come in as expected. This is due to the values in the original data file. For example, there may be a column that is only supposed to contain numeric values, yet it imported as character. The column in the file may contain something like this:\n\nc(1.3, 8, 23, \"0 (dropped sample)\", 100, 84)\n\n[1] \"1.3\"                \"8\"                  \"23\"                \n[4] \"0 (dropped sample)\" \"100\"                \"84\"                \n\n\nThis would import as character because of that one single value that is not numeric!\nYou can check if items are classified as specific types:\n\nis.numeric(x10)\n\n[1] TRUE\n\nis.logical(x10)\n\n[1] FALSE\n\nis.logical(x5)\n\n[1] TRUE\n\nis.character(x4)\n\n[1] TRUE\n\n\nObjects can be coerced with these functions:\n\nas.character(x8)\nas.logical(x10)\nas.numeric(x11)\n\n\n\nSpecial object type: The Factor\nThis is a very unusual data type that is specific to R and its history as a language for statistical analysis.\n\n\nFUN Fact\nR’s predecessor, “S”, was invented at Bell Labs for doing data analysis\n\nFactors look like a character variable:\n\nf1 &lt;- factor(c(\"blue\", \"blue\", \"purple\", \"green\", \"green\", \"yellow\", \"green\"))\nf1\n\n[1] blue   blue   purple green  green  yellow green \nLevels: blue green purple yellow\n\n\nIt is a character variable, with pre-defined levels that are alphabetized. The text “Levels: …” are the predefined levels associated with that factor. Let’s compare this to a character variable by manually converting it to character.\n\nas.character(f1)\n\n[1] \"blue\"   \"blue\"   \"purple\" \"green\"  \"green\"  \"yellow\" \"green\" \n\n\nIn the character type, all the observations are in quotes and there is no “Level” information.\nLike other data types, you can manually coerce a fabric as thus:\n\nas.factor(x4)\n\n[1] orange banana\nLevels: banana orange\n\n\nUnder the hood, deep in the R internals, these are integers. The first factor level is designated 1, the second level is designated 2 and so forth. This order is set alphanumerically, but it can be manipulated by hand (run ?factor in the console for more information on how to do this).\n\nas.integer(f1)\n\n[1] 1 1 3 2 2 4 2\n\n\nFactors are used in statistical analysis and can be manipulated in several ways. To a large extent, you can ignore factors. However, you will see them referred to in R functions occasionally. It’s good to know they exist and the very basics of how they work.\n\n\n\n\n\n\nPutting it all together\n\n\n\nLook at the object created in the lesson in the Global Environment pane. For each object, the object class and the first few values will be listed.",
    "crumbs": [
      "Lessons",
      "Getting to know data in R",
      "Data Types"
    ]
  },
  {
    "objectID": "lessons/data-merging.html",
    "href": "lessons/data-merging.html",
    "title": "Combining Data Sets",
    "section": "",
    "text": "Learning Goals\n\n\n\n\n\nAt the end of this lesson, you should:\n\nunderstand the concept of a “key” for merging\nbe able to merge two data sets together\nknow the difference between left join, right join, full join, semi-join and anti-join\nAs usual, let’s start by importing data\nAnother data set to import:\ndownload.file(url = \"https://github.com/IdahoAgStats/r-for-ag-scientists/raw/main/data/genotypic_data_rotated.csv\",\n              destfile = here::here(\"data\", \"genotypic_data_rotated.csv\"))\nThis will take a minute\nFor merging, it is done in groups of two; that is, two tables at a time are merged together."
  },
  {
    "objectID": "lessons/data-merging.html#bind-rows",
    "href": "lessons/data-merging.html#bind-rows",
    "title": "Combining Data Sets",
    "section": "Bind rows",
    "text": "Bind rows\nIf you have two data sets of different observations (the keys do not match) but similar or identical column headers, these rows can be stacked togther using a row bind.\nExample syntax of a row_bind:\n\nnew1 &lt;- bind_rows(x, y)\n\nIn this function, the column names are matched and ordered according to the first data frame listed (“x” in this example). The default behavior is to return all unique columns from both data sets and fill in with missing data as needed.\n\n\n\n\n\n\n\n\n\nWe can manufacture a version of this with our data sets by filtering to a single trial and selecting a few columns. This is a silly toy example, but most of the time you will not be handed these data sets that are already merged. You will be given two or more data sets that need to be combined. Perhaps these are field experiments from different years or lab results from two different runs.\n\ntrial_1 &lt;- variety_trial %&gt;% filter(trial == \"SWIdahoCereals_HRS_PAR_2016\") %&gt;% select(trial, rep, variety, yield)\ntrial_2 &lt;- variety_trial %&gt;% filter(trial == \"SWIdahoCereals_SWS_PAR_2018\") %&gt;% select(trial, variety, rep, grain_protein)\n\nCompare data sets:\n\nhead(trial_1)\n\n                        trial rep    variety     yield\n1 SWIdahoCereals_HRS_PAR_2016   1   LCS Iron  78.27131\n2 SWIdahoCereals_HRS_PAR_2016   2   LCS Iron 124.19389\n3 SWIdahoCereals_HRS_PAR_2016   3   LCS Iron  85.20458\n4 SWIdahoCereals_HRS_PAR_2016   4   LCS Iron 140.56490\n5 SWIdahoCereals_HRS_PAR_2016   1 10SB0087-B  94.18977\n6 SWIdahoCereals_HRS_PAR_2016   2 10SB0087-B 121.59047\n\nhead(trial_2)\n\n                        trial     variety rep grain_protein\n1 SWIdahoCereals_SWS_PAR_2018       Melba   1        8.4525\n2 SWIdahoCereals_SWS_PAR_2018       Melba   2        7.7625\n3 SWIdahoCereals_SWS_PAR_2018       Melba   3        8.5675\n4 SWIdahoCereals_SWS_PAR_2018       Melba   4       10.4075\n5 SWIdahoCereals_SWS_PAR_2018 14-FAC-2043   1        8.3375\n6 SWIdahoCereals_SWS_PAR_2018 14-FAC-2043   2        8.2225\n\n\nBind the rows together:\n\ntogether &lt;- bind_rows(trial_2, trial_1)\nhead(together)\n\n                        trial     variety rep grain_protein yield\n1 SWIdahoCereals_SWS_PAR_2018       Melba   1        8.4525    NA\n2 SWIdahoCereals_SWS_PAR_2018       Melba   2        7.7625    NA\n3 SWIdahoCereals_SWS_PAR_2018       Melba   3        8.5675    NA\n4 SWIdahoCereals_SWS_PAR_2018       Melba   4       10.4075    NA\n5 SWIdahoCereals_SWS_PAR_2018 14-FAC-2043   1        8.3375    NA\n6 SWIdahoCereals_SWS_PAR_2018 14-FAC-2043   2        8.2225    NA\n\n\nIf you have ever used rbind(), this is an improvement. It will match column names across data sets and order them appropriately."
  },
  {
    "objectID": "lessons/data-merging.html#joins",
    "href": "lessons/data-merging.html#joins",
    "title": "Combining Data Sets",
    "section": "Joins",
    "text": "Joins\nMerging two data sets when it goes beyond a row bind can take an effort.\nAll joins follow this syntax:\n\nxxx_join(left_dataset, right_dataset)\n\nWhere “left_dataset” and “right_dataset” correspond to the left and right data sets in this diagram:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe importance of ‘keys’\n\n\n\nAll joins rely on “keys” to match observations. A key is a unique identifier; it is usually a unique for each row. This can be a single column or the result of multiple columns. This information is used to match information in one table (or data frame) with another. The extent to which these keys match or do not match is the essence of a merge.\n\n\nLet’s look at matches between “genotype”, “variety_trial”, and “metadata”.\nThe key between “metadata” and “variety_trial” is “trial”. There is exactly one row in the “metadata” file for each level of trial. The metadata file was designed to be like this. We did not need all those extra columns when it could be compressed into a smaller data set.\nThe file “genotype” is from a wholly different study. The extent of matches is considerably less complete than the matching between “variety_trial” and “metadata”.\n\nFull join\nAll observations are returned, regardless if matched.\nLet’s match “variety_trial” and “metadata”\n\nex_fulljoin &lt;- full_join(metadata, variety_trial, by = \"trial\")\n\ndim(ex_fulljoin)\n\n\n\ninner join\nReturns only the rows with matching information. Non-matches are filtered out of the data set.\nLet’s match “genotypes” and “variety_trial” (this will be big!).\nHow many of these match (where the key is “variety”, which matches “individual” in “genotype”)?\n\nintersect(variety_trial$variety, genotypes$individual)\n\n[1] \"Jefferson\"   \"UI Platinum\" \"LCS Star\"    \"UI Stone\"   \n\n\n\nex_innerjoin &lt;- inner_join(variety_trial, genotypes, by = join_by(\"variety\" == \"individual\"))\n\nCheck results\n\ndim(ex_innerjoin)\n\n[1]    76 10107\n\nsort(unique(ex_innerjoin$variety))\n\n[1] \"Jefferson\"   \"LCS Star\"    \"UI Platinum\" \"UI Stone\"   \n\n\nComplete this expression:\n\ntest &lt;- inner_join(genotypes, trial_1, by = join_by(         ))\n\n\n\nLeft join and right join\nPreserves all the rows in one data set and matches to that dataset in the other. In the left join, it is the first data set (the one on the left) where all the rows are kep. In the right join, it’s the data set to the right that is full preserved.\nLet’s compare the different when merging ‘trial_2’ with ‘metadata’.\n\nLeft join\n\nex_leftjoin_1 &lt;- left_join(trial_2, metadata, by = \"trial\")\nex_leftjoin_2 &lt;- left_join(metadata, trial_2, by = \"trial\")\n\n\n\nright join equivalent\n\n#ex_rightjoin_1 &lt;- right_join(metadata, trial_2, by = \"trial\")\nex_rightjoin_2 &lt;- right_join(trial_2, metadata, by = \"trial\")\n\nWhy did this error message result?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nWhen metadata is listed first, it is expecting on one match per key. In this case, there are many matches for the column “trial” in the object “trial_2”.\n\n\n\nWhat are some relationships between these 4 joins?\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nex_leftjoin_1 is the exact equivalent of ex_rightjoin_1, but the columns are in a different order.\n\nex_leftjoin_2 is the exact equivalent of ex_rightjoin_2, but the columsna are in a different order.\n\n\n\n\n\n\n\nSemi-join\nOne of my favorite joins! It does an inner join, but only return the columns for the first data set listed. It’s handy when you don’t want to generate gigantic objects.\nLet’s revisit matching “genotypes” and “variety_trial” like in the inner_join() example above.\n\nex_semijoin &lt;- semi_join(variety_trial, genotypes, by = join_by(\"variety\" == \"individual\"))\n\nHow do the dimensions of this object compare to the dimensions of ‘ex_innerjoin’?\n\n\nAnti-join\nThis is similar to semi_join(). It will return all the rows that do not match, and only the columns from the first data set mentioned.\n\nex_antijoin &lt;- anti_join(variety_trial, genotypes, by = join_by(\"variety\" == \"individual\"))\n\nDo any of the variety names match?\n\ntable(ex_antijoin$variety %in% genotypes$individual)\n\n\nFALSE \n 1806 \n\n\n\n\n\n\n\n\nNote\n\n\n\ndplyr updated!\nOne of the biggest changes is how it handles joins. It can now do some very flexible matching by numeric values, dates and other factors. More on this can be found in the documentation for join_by."
  },
  {
    "objectID": "lessons/data-merging.html#final-notes",
    "href": "lessons/data-merging.html#final-notes",
    "title": "Combining Data Sets",
    "section": "Final Notes",
    "text": "Final Notes\nThis is the end of lessons on data wrangling. There is additional functionality that we have not touched on that you may find useful to know.\n\n\n\n\n\n\n\nfunction name\nwhat it does\n\n\n\n\ntidyr::drop_na()\nremove rows with missing data\n\n\ndplyr::pull()\nextracts a single column and converts it to a vector\n\n\ndplyr::distinct()\nreturn rows with distinct observations (removes duplicates)\n\n\ndplyr::na_if()\nconverts a specificed value to NA\n\n\ndplyr::relocate()\nmove columns to another position\n\n\ntidyr::fill()\nfill is missing data based on surrounding data\n\n\n\nComplete list of dplyr functions and tidyr functions.\nR 4 Data Science by Hadley Wickam and Garret Grolemund provides comprehensive guide to data wrangling.\n\n\n\n\n\n\nPractice Problem\n\n\n\n\n\n\nDownload genotypic_data_rotated.csv (see script below), Import that file, along with, “trial_data.csv”, and “trial_metadata.csv”.\n\n\ndownload.file(url = \"https://github.com/IdahoAgStats/r-for-ag-scientists/raw/main/data/genotypic_data_rotated.csv\",\n              destfile = here::here(\"data\", \"genotypic_data_rotated.csv\"))\n\n\nDo an inner join between “genotypic_data_rotated.csv” and “trial_data.csv” using variety names.\nDo a semi-join of “genotypic_data_rotated.csv” with “trial_data.csv” and do the reverse. How does this compare with the inner join from the previous problem?\nDo an anti-join between “genotypic_data_rotated.csv” and “trial_data.csv”.\nJoin together all common observations between the 3 files (your choice on join).\n\nSolution\n\n\n\n\n\n\n\n\n\nPutting it all together\n\n\n\nAlthough this lesson did not demonstrate the use of the pipe, %&gt;%, it can be used with pipes:\n\nobj &lt;- left_join(x, y) %&gt;% right_join(z)\n\nThe first join is a left join like any other. The second join presumes that the first argument is what was passed to it through the pipe. An equivalent:\n\ntemp &lt;- left_join(x, y)\nobj &lt;-  right_join(temp, z)"
  },
  {
    "objectID": "lessons/data-export.html",
    "href": "lessons/data-export.html",
    "title": "Exporting Data”",
    "section": "",
    "text": "Learning Goals\n\n\n\n\n\nAt the end of this lesson, you should:\n\nBe able to export tabular data from R into a text file, .csv or .xlsx file\nBe able to save an R object and reload it into an R session.\nThis lesson is focused on exporting tabular data. It is a very short lesson because exporting data is quite similar to importing data. Like in data import, exporting data involves opening a connection between R and file system, writing the data to file and closing the connection.\nFirst, we need to load some data to write to file. R packages often come with data sets that can loaded with the data() command.\ndata(\"mtcars\")",
    "crumbs": [
      "Lessons",
      "Exporting R objects to file"
    ]
  },
  {
    "objectID": "lessons/data-export.html#exporting-to-csv-files",
    "href": "lessons/data-export.html#exporting-to-csv-files",
    "title": "Exporting Data”",
    "section": "Exporting to CSV files",
    "text": "Exporting to CSV files\n\nwrite.csv()\nFirst, check the documentation: ?write.csv\n\nwrite.csv(mtcars, here::here(\"outputs\", \"mtcars_1.csv\"), row.names = FALSE)\n\nSetting the row.names argument to FALSE ensures that a column of numbers without a header is not included in the file (which is likely to cause import errors in the future).\n\n\nwrite.table()\nThis function looks very similar to write.csv() because it is technically the same function. write.csv() is wrapper for write.table() using a specific set of default arguments for CSV files (e.g. sep = \",\"). In this case, we cannot rely on those default and must specify\n\nwrite.table(mtcars, here::here(\"outputs\", \"mtcars_2.csv\"), \n          row.names = FALSE, sep = \",\", quote = FALSE)\n\n\n\nwrite_csv()\nThis function is very similar to read.csv(), but it does not have a row names argument because it does not output rownames.\n\nlibrary(readr)\n\nwrite_csv(mtcars, here::here(\"outputs\", \"mtcars_3.csv\"))\n\nwrite_csv() is wrapper for write_delim().",
    "crumbs": [
      "Lessons",
      "Exporting R objects to file"
    ]
  },
  {
    "objectID": "lessons/data-export.html#exporting-to-text-file",
    "href": "lessons/data-export.html#exporting-to-text-file",
    "title": "Exporting Data”",
    "section": "Exporting to text file",
    "text": "Exporting to text file\nThis also uses write.table() or write.table():\n\nwrite.table(mtcars, here::here(\"outputs\", \"mtcars.txt\"), sep = \"\\t\",\n            quote = \"none\")\n\nwrite_delim(mtcars, here::here(\"outputs\", \"mtcars.txt\"), delim = \"\\t\",\n            quote = \"none\")",
    "crumbs": [
      "Lessons",
      "Exporting R objects to file"
    ]
  },
  {
    "objectID": "lessons/data-export.html#exporting-to-excel-file",
    "href": "lessons/data-export.html#exporting-to-excel-file",
    "title": "Exporting Data”",
    "section": "Exporting to Excel file",
    "text": "Exporting to Excel file\nUse the writexl package:\n\nlibrary(writexl)\n\nwrite_xlsx(mtcars, here::here(\"outputs\", \"mtcars.xlsx\"))\n\nThe help file is informative: ?write_xlsx",
    "crumbs": [
      "Lessons",
      "Exporting R objects to file"
    ]
  },
  {
    "objectID": "lessons/data-export.html#other-options",
    "href": "lessons/data-export.html#other-options",
    "title": "Exporting Data”",
    "section": "Other options",
    "text": "Other options\n\nsave()\nThis is special option to save objects in your environment to file. These can only be used by R, but are convenient if you plan to return to these object:\nSave one object:\n\nsave(mtcars, file = here::here(\"outputs\", \"mydata.RData\"))\n\nSave multiple objects:\n\ndata(\"sleep\")\nsave(mtcars, sleep, file = here::here(\"outputs\", \"more.RData\"))\n\nThese can be loaded back into an R session as thus:\n\nload(here::here(\"outputs\", \"mydata.RData\"))\n\n\n\n\n\n\n\nNote\n\n\n\nIf you are working with a specialized file type that has dedicated libraries for importing them into R and manipulating those objects, those dedicated libraries likely have export functions for that file type. For spatial object, the package sf can import, alter, and export shapefiles.\n\n\n\n\n\n\n\n\nPractice Problem\n\n\n\n\n\n\nRepeat the import practice problems. Export those files under a new file name. Make sure you use a new file name or a different output directory so you do not write over the original files.\nExamine the output files to make sure they look as expected? Where any row names accidentally introduced? Were missing cells converted to “NA”? Did any data become unexpectedly quoted?\n\n\n\n\n\n\n\n\n\n\nPutting it all together\n\n\n\nExporting data is a good thing to do during the data wrangling process. Once you have arranged in your data set into an ideal state, save it so you an easily reload it later.\nIt is very important that you check your output file (especially as a newer R programmer!) to make sure everything is as you expect. We have all accidentally output “myfile” instead of “myfile.csv”, and this can be highly inconvenient! You can do by manually opening the file or by importing back into R; either should tell you if the file export went as expected or not.",
    "crumbs": [
      "Lessons",
      "Exporting R objects to file"
    ]
  },
  {
    "objectID": "lessons/control-flow.html",
    "href": "lessons/control-flow.html",
    "title": "Control Flow Variables in R",
    "section": "",
    "text": "Here is a very brief introduction to control flow variables in R!\n\nwhile and if\n\nwhile indicates that a process will repeat until a condition is met. A function will loop through until the the test for while() evaluates to FALSE. Be careful not to get this stuck in an infinite loop!\n\n\nwhile(sometest) {\n  do something\n}\n\n\nif will only allow an action to occur if a test is passed. The action will only occur once (there is no looping).\n\n\nif(sometest) {\n  do action\n}\n\n\nif can be paired with else. Anything that evaluated to FALSE in the if test will go through the processes described in else. There is no TRUE/FALSE test for else, it just takes everything that evaluated to FALSE in the if test.\n\n\nif(sometest) {\n  do action\n} else {\n  do another action\n}\n\n\nnext is used within a while statement or for loop along with if. It indicates that the remaining commands in the loop should be skipped and the process moves onto the next iteration:\n\n\nwhile(sometest) {\n  do something\n  if(anothertest) \n    next # when \"anothertest\" is TRUE, \"other things to do\" is skipped\n          # and the next iteration is performed\n  other things to do \n}\n\n\nbreak is similar to next, except that it causes all of the repeating/looping to terminate. Like next, it is used within a while statement or for loop along with if.\n\n\nwhile(sometest) {\n  do something\n  if(anothertest) \n    break # when \"anothertest\" is TRUE,\n          # the entire process terminates immediately\n  other things to do \n}\n\n\n\nRow median polish example\n\n# initial the variables \nm &lt;- matrix(1:90, nrow = 9, ncol = 10, byrow = TRUE)\ndiff = 1\n# a while + if example function\nwhile (diff &gt; 0.001){\n  if(exists(\"new_m\")) {mat = new_m}\n    else {mat = m}\n  row_med1 = apply(mat, 1, median)\n  \n  if(exists(\"row_med2\")) {\n    diff = max(abs(row_med1 - row_med2))}\n  print(diff)\n  # this is a good place for 'break' statement, \n    # because without it, this code below must run \n    # and the loop restarted at the top in order for the \n    # 'while' statement to be evaluated again\n  over_eff = median(row_med1)\n  row_med2 &lt;- row_med1 - over_eff\n  med_matrix = matrix(rep(row_med1, each = ncol(mat)), \n                       nrow = nrow(mat), ncol = ncol(mat), byrow=TRUE)\n  new_m = mat - med_matrix\n}"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introductory R for Scientists",
    "section": "",
    "text": "This workshop will take you from zero to hero over the course of 30 hours of instruction and practice. It will introduce the R programming language, the graphical user interface RStudio and how R can be used to manage and analyse your data. At the end of this workshop, you will be able to:\n\nimport & export data\nunderstand data types and object types\nfilter, reshape, merge and manipulate your data\nmathematically transform data\ndo repeat actions in R\nplot data\nnavigate R help files\n\n\nWho is This workshop for?\nThis workshop is intended for beginner R users. No previous experience in R or any other programming or statistical language is expected (although previous R users whose skills have lapsed are welcome)\n\n\nWhat this workshop will not cover\n\nstatistical analysis\ngit, GitHub, or any version control\nusage of the terminal (e.g. bash)\n\n\n\nRequirements\n\nA laptop. You can opt to install R and RStudio on it (recommended if you plan to continue using R beyond the workshop), or you can use the online R programming environment provided by Posit Cloud.\n\n\n\nWhen\nMay 20-24, 2024\nMonday - Friday\n9am - 12pm | 1pm - 4pm Pacific Time\nAll sessions will take place on the University of Idaho campus in Moscow, Idaho.\n\n\nInstructors\nJulia Piaskowski\nHarpreet Kaur",
    "crumbs": [
      "Course Info",
      "Overview"
    ]
  },
  {
    "objectID": "CoC.html",
    "href": "CoC.html",
    "title": "Code of Conduct",
    "section": "",
    "text": "University of Idaho Carpentries is dedicated to providing a harassment-free experience for participants of the conference regardless of age, gender, sexual orientation, disability, physical appearance, race, or religion (or lack thereof).\nWe encourage the open exchange of ideas and expression and thus require an environment that recognizes the inherent worth of every person and group. An inclusive space free of harassment encourages interaction among diverse groups. We want to make certain our workshops and courses are welcoming, and encourages participants to be involved moving forward.\nAll participants (including organizers, attendees, instructors and volunteers) at UI Carpentries Workshops are required to agree to the following code of conduct. Reports of violation to this Code of Conduct should be addressed to the course/workshop lead instructor.\nThis Code of Conduct (CoC) applies to any participant in a University of Idaho Carpentries Workshop. Note that this code augments rather than replaces legal rights and obligations pertaining to any particular situation.\n\nExpected Behavior\nAll workshop/course participants are expected to behave in accordance with professional standards, with both this Code of Conduct as well as their respective employer’s policies governing appropriate workplace behavior, and all applicable laws.\nWe’re committed to providing welcome environments where people behave according to professional standards. We expect everyone at any UI Carpentries-affiliated event to contribute to a welcoming, civil, safe, and tolerant environment.\nExamples of encouraged behavior that contributes to a positive environment include:\n\nUsing welcoming and inclusive language\nBeing respectful of differing viewpoints and experiences\nGracefully accepting constructive criticism\nFocusing on what is best for everyone at the event\nShowing empathy towards other participants\n\n\n\nUnacceptable Behavior\nHarassment will not be tolerated in any form, including but not limited to:\n\nIntimidation or harassment of any kind.\nOffensive comments related to gender, gender identity and expression, sexual orientation, disability, physical appearance, body size, race, age, religion or any other status protected by laws in which the conference or program is being held.\nUnwelcome comments regarding a person’s lifestyle choices and practices, including those related to food, health, parenting, drugs, and employment.\nDeliberate misgendering, “outing,” or use of “dead” or rejected names.\nGratuitous or off-topic blatant sexual images or behavior in spaces where they are not appropriate.\nNot respecting the privacy of other participants\n\n\n\nHarassment in online channels\nSome of our workshops are online events. Please use these guidelines when engaging with participants. The above Code of Conduct applies to an online event, with the addition of:\n\nAvoid using overtly sexual or offensive usernames or profile photos which might detract from a friendly, safe and welcoming environment for all.\nDo not publish text/screenshots of anything shared in private communication channels without explicit consent from the author. This includes screenshots of private messages to public channels, as well as conversations on public channels to anywhere outside of UI Carpentries Workshop.\nDo not direct message someone without their permission.\nDo not record sessions without the presenter’s permission.\nThe meeting host/organizer should be aware of privacy concerns for different tools. For tips on security, a good place to start is: Securing Your Zoom Meetings.\n\nThis CoC applies to all University of Idaho Carpentries online spaces.\n\n\nResponses to Code of Conduct Violations\nWe will follow all University of Idaho and Idaho State requirements regarding how to handle incidents of harassment.\n\n\nWhat To Do If You Witness or Are Subject To Unacceptable Behavior\nIf you are being harassed, notice that someone else is being harassed, or have any other concerns relating to harassment, please contact the lead instructor immediately.\n\n\nAcknowledgements\nThis CoC is adapted from RConsortium CoC and the Carpentries CoC This policy is licensed under a Creative Commons Attribution 4.0 International license.",
    "crumbs": [
      "Course Info",
      "Code of Conduct"
    ]
  },
  {
    "objectID": "learning-quarto.html",
    "href": "learning-quarto.html",
    "title": "Working with Quarto Documents",
    "section": "",
    "text": "Quarto is a file format for weaving together code (R, python, and others), output, and text into a single notebook. It is a nice tool for putting together reports or doing analysis for yourself. Quarto also has applications for building websites (this website is build with Quarto!), formatting books, and making slideshow presentations. These are advanced applications that over time, you may want to try out yourself.\nWhile Quarto offers many advanced features, using only the basic features will enable users of many abilities to communicate their results with others. You can choose to learn more, but Quarto is nevertheless useful using only its foundational tools: mixing text, code, and code outputs.\nIt follows some of the standard syntax of markdown, which is a highly simplified version of HTML (“hypertext markup language”).\nA .qmd document can simply exist as is (and is highly useful), or you can choose to output it to many enabled formats such as .html (the easiest to do), .pdf, .docx and more. Click on “Render” at the top of a .qmd file in RStudio to see a rendered version of your Quarto document.",
    "crumbs": [
      "Course Info",
      "Quarto basics"
    ]
  },
  {
    "objectID": "learning-quarto.html#what-is-quarto-and-why-should-you-use-it",
    "href": "learning-quarto.html#what-is-quarto-and-why-should-you-use-it",
    "title": "Working with Quarto Documents",
    "section": "",
    "text": "Quarto is a file format for weaving together code (R, python, and others), output, and text into a single notebook. It is a nice tool for putting together reports or doing analysis for yourself. Quarto also has applications for building websites (this website is build with Quarto!), formatting books, and making slideshow presentations. These are advanced applications that over time, you may want to try out yourself.\nWhile Quarto offers many advanced features, using only the basic features will enable users of many abilities to communicate their results with others. You can choose to learn more, but Quarto is nevertheless useful using only its foundational tools: mixing text, code, and code outputs.\nIt follows some of the standard syntax of markdown, which is a highly simplified version of HTML (“hypertext markup language”).\nA .qmd document can simply exist as is (and is highly useful), or you can choose to output it to many enabled formats such as .html (the easiest to do), .pdf, .docx and more. Click on “Render” at the top of a .qmd file in RStudio to see a rendered version of your Quarto document.",
    "crumbs": [
      "Course Info",
      "Quarto basics"
    ]
  },
  {
    "objectID": "learning-quarto.html#basics-of-quarto",
    "href": "learning-quarto.html#basics-of-quarto",
    "title": "Working with Quarto Documents",
    "section": "Basics of quarto",
    "text": "Basics of quarto\n\nText Formatting\n\n\n\n\n\n\n\nMarkdown Syntax\nOutput\n\n\n\n\n*italics* and **bold**\nitalics and bold\n\n\nsuperscript^2^ / subscript~2~\nsuperscript2 / subscript2\n\n\n~~strikethrough~~\nstrikethrough\n\n\n`verbatim code`\nverbatim code\n\n\n\n\n\nHeadings\n\n\n\n\n\n\n\nMarkdown Syntax\nOutput\n\n\n\n\n# Header 1\nHeader 1\n\n\n## Header 2\nHeader 2\n\n\n### Header 3\nHeader 3\n\n\n#### Header 4\nHeader 4\n\n\n##### Header 5\nHeader 5\n\n\n###### Header 6\nHeader 6\n\n\n\n\n\nLists\n\n\n\n\n\n\n\nMarkdown Syntax\nOutput\n\n\n\n\n* unordered list\n    + sub-item 1\n    + sub-item 2\n        - sub-sub-item 1\n\nunordered list\n\nsub-item 1\nsub-item 2\n\nsub-sub-item 1\n\n\n\n\n\n*   item 2\n\n    Continued (indent 4 spaces)\n\nitem 2\nContinued (indent 4 spaces)\n\n\n\n1. ordered list\n2. item 2\n    i) sub-item 1\n         A.  sub-sub-item 1\n\nordered list\nitem 2\n\nsub-item 1\n\nsub-sub-item 1\n\n\n\n\n\n(@)  A list whose numbering\n\ncontinues after\n\n(@)  an interruption\n\nA list whose numbering\n\ncontinues after\n\nan interruption\n\n\n\nterm\n: definition\n\nterm\n\ndefinition\n\n\n\n\n\n\n\nSource Code\nUse ``` to delimit blocks of source code:\n```\ncode\n``` \nAdd a language to syntax highlight code blocks:\n```r\n1 + 1\n``` \nIf you are creating HTML output there is a wide variety of options available for code block output. See the article on code blocks for additional details.\n\n\nTables\n\nMarkdown Syntax\n| Right | Left | Default | Center |\n|------:|:-----|---------|:------:|\n|   12  |  12  |    12   |    12  |\n|  123  |  123 |   123   |   123  |\n|    1  |    1 |     1   |     1  |\n\n\nOutput\n\n\n\nRight\nLeft\nDefault\nCenter\n\n\n\n\n12\n12\n12\n12\n\n\n123\n123\n123\n123\n\n\n1\n1\n1\n1\n\n\n\n\n\n\n\n\n\nTo Learn More\n\n\n\nThere are many more options for formatting Quarto documents and embedding information in a Quarto document. Visit Quarto’s markdown page to learn more.",
    "crumbs": [
      "Course Info",
      "Quarto basics"
    ]
  },
  {
    "objectID": "learning-quarto.html#what-else-can-quarto-be-used-for",
    "href": "learning-quarto.html#what-else-can-quarto-be-used-for",
    "title": "Working with Quarto Documents",
    "section": "What else can quarto be used for?",
    "text": "What else can quarto be used for?\nThere is a rich array of possibilities for Quarto documents, the majority of which we will not address in this class. Take a look at this gallery to get a better sense of what you can do with Quarto and decide for yourself if it’s worth the effort to learn better.\nI started learning how to use markdown for html documents, then made a few presentations with Quarto’s predecessor, Rmarkdown (I’m not sure this is worth the effort). I next started building website with Rmarkdown and Quarto, and have found this to be a great tool for sharing information via websites. If you never do this, that is completely okay! Not everyone neesd these tools, but it you do, Quarto can make implementation easier.",
    "crumbs": [
      "Course Info",
      "Quarto basics"
    ]
  },
  {
    "objectID": "lessons/data-aggregation.html",
    "href": "lessons/data-aggregation.html",
    "title": "Aggregating & Summarising Data",
    "section": "",
    "text": "Learning Goals\n\n\n\n\n\nAt the end of this lesson, you should:\n\nbe able to aggregate data and perform actions on those aggregated data using group_by() and summarise()\nunderstand when to use rowwise() for operations\n\n\n\n\nYou may find yourself wanting to calculate summary statistics across a grouping variable. To do this, a data set needs to be split up by that variable, a summary statistic calculated, and the resulting data recombined, or ‘split-apply-combine’. There’s some nice tools to do this in the dplyr package.\n\nPrep Work\nFirst, load libraries & import data:\n\nlibrary(dplyr)\n\nvariety_trials &lt;- read.csv(here::here(\"data\", \"trial_data.csv\")) %&gt;% \n  mutate(trial = gsub(\"_H_\", \"_H-\", trial)) %&gt;% \n  tidyr::separate(trial, c(\"program\", \"crop\", \"location\", \"year\"),\n                  sep = \"_\", remove = FALSE)\n\n\n\nBasic grouping & aggregation\nThe group_by will group data and then any statistic can be calculated or summary action can be done on that grouped data using summarise().\nThe basic formula:\n\nmydata %&gt;% group_by(variable) %&gt;% summarise(new_var = ...)\n\nThis data set has several categorical variables that can be used for grouping:\n\nstr(variety_trials)\n\n'data.frame':   1882 obs. of  10 variables:\n $ trial        : chr  \"SWIdahoCereals_H-S_PAR_2018\" \"SWIdahoCereals_H-S_PAR_2018\" \"SWIdahoCereals_H-S_PAR_2018\" \"SWIdahoCereals_H-S_PAR_2018\" ...\n $ program      : chr  \"SWIdahoCereals\" \"SWIdahoCereals\" \"SWIdahoCereals\" \"SWIdahoCereals\" ...\n $ crop         : chr  \"H-S\" \"H-S\" \"H-S\" \"H-S\" ...\n $ location     : chr  \"PAR\" \"PAR\" \"PAR\" \"PAR\" ...\n $ year         : chr  \"2018\" \"2018\" \"2018\" \"2018\" ...\n $ rep          : int  1 2 3 4 1 2 3 4 1 2 ...\n $ variety      : chr  \"12SB0197\" \"12SB0197\" \"12SB0197\" \"12SB0197\" ...\n $ yield        : num  71.7 108.6 81.7 103.8 65.3 ...\n $ grain_protein: num  9.83 9.6 11.27 10.35 10.23 ...\n $ test_weight  : num  62.1 64.2 65.6 64.3 62.8 65.2 65.1 65.6 65 65.3 ...\n\n\nThe function tally() counts observations:\n\nvariety_trials %&gt;% group_by(trial) %&gt;% tally()\n\n# A tibble: 28 × 2\n   trial                           n\n   &lt;chr&gt;                       &lt;int&gt;\n 1 SWIdahoCereals_H-S_PAR_2018    88\n 2 SWIdahoCereals_H-S_WEI_2018    96\n 3 SWIdahoCereals_H-W_PAR_2017   120\n 4 SWIdahoCereals_H-W_PAR_2018    80\n 5 SWIdahoCereals_H-W_WEI_2018    48\n 6 SWIdahoCereals_HRS_PAR_2016    60\n 7 SWIdahoCereals_HRS_PAR_2017    32\n 8 SWIdahoCereals_HRS_PAR_2019    60\n 9 SWIdahoCereals_HRS_PAR_2020    48\n10 SWIdahoCereals_HRW_PAR_2019    44\n# ℹ 18 more rows\n\n\nLet’s group by crop and pull out the mean yield and standard deviation.\n\nyield_crop &lt;- variety_trials %&gt;% group_by(crop) %&gt;% \n  summarise(yield_mean = mean(yield, na.rm = TRUE),\n            yield_sd = sd(yield, na.rm = TRUE),\n            yield_min = min(yield, na.rm = TRUE),\n            yield_max = max(yield, na.rm = TRUE),\n            total = n())\n\nyield_crop\n\n# A tibble: 8 × 6\n  crop  yield_mean yield_sd yield_min yield_max total\n  &lt;chr&gt;      &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt; &lt;int&gt;\n1 H-S         57.6     34.3    16.6        119.   184\n2 H-W         84.4     42.2     4.17       199.   248\n3 HRS        111.      38.5    56.0        498.   200\n4 HRW        136.      45.0    66.2        197.   100\n5 HWS        116.      32.0    56.6        253.   132\n6 HWW        115.      38.5    68.7        192.    76\n7 SWS        104.      42.4    12.1        219.   316\n8 SWW         94.0     43.9     0.705      201.   626\n\n\n\n\n\n\n\n\nNote\n\n\n\nsummarise() only returns a single value back for each group. If you want more than that (e.g. to run a linear model on each group), there are other tools for that. This is intended to be addressed in Lesson ‘repeating actions’.\n\n\n\n\nGrouping across multiple variables\nLet’s examine how many crops and years there are using the table() command:\n\ntable(variety_trials$crop, variety_trials$year)\n\n     \n      2016 2017 2018 2019 2020\n  H-S    0    0  184    0    0\n  H-W    0  120  128    0    0\n  HRS   60   32    0   60   48\n  HRW    0    0    0   44   56\n  HWS   44   32    0   24   32\n  HWW    0    0    0   44   32\n  SWS   40   40  132   56   48\n  SWW    0  160  206  108  152\n\n\nThis tells us how many rows of data occur for each variable combination. This information can help inform us how to group information.\nYou can group by as many conditions as you want:\n\nvariety_trials %&gt;% group_by(crop, year) %&gt;% \n  summarise(protein_na = sum(is.na(grain_protein))) %&gt;% arrange(desc(protein_na))\n\n`summarise()` has grouped output by 'crop'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 24 × 3\n# Groups:   crop [8]\n   crop  year  protein_na\n   &lt;chr&gt; &lt;chr&gt;      &lt;int&gt;\n 1 SWW   2017         160\n 2 H-W   2018         128\n 3 H-W   2017         120\n 4 H-S   2018          96\n 5 SWW   2018          90\n 6 SWS   2018          64\n 7 SWS   2017          40\n 8 HRS   2017          32\n 9 HWS   2017          32\n10 HRW   2019           4\n# ℹ 14 more rows\n\n\n\n\n\n\n\n\nFYI\n\n\n\nYou can group by a numeric variable. If you do that, dplyr will look for common values to group observations. This can be successful when there are repeat ‘integers’ (e.g. year, replicate), but if all values are unique (which is often the case with floating point numbers), then the number of groups is the number of observations.\n\n\n\n\nSummarising across multiple variables\nUse across() to conduct the same summary action(s) across multiple columns.\n\nvariety_trials %&gt;% group_by(trial) %&gt;% \n  summarise(across(c(yield, grain_protein), ~ mean(.x, na.rm = T)))\n\n# A tibble: 28 × 3\n   trial                       yield grain_protein\n   &lt;chr&gt;                       &lt;dbl&gt;         &lt;dbl&gt;\n 1 SWIdahoCereals_H-S_PAR_2018  91.0         10.9 \n 2 SWIdahoCereals_H-S_WEI_2018  27.0        NaN   \n 3 SWIdahoCereals_H-W_PAR_2017 121.         NaN   \n 4 SWIdahoCereals_H-W_PAR_2018  63.1        NaN   \n 5 SWIdahoCereals_H-W_WEI_2018  28.4        NaN   \n 6 SWIdahoCereals_HRS_PAR_2016 111.          14.3 \n 7 SWIdahoCereals_HRS_PAR_2017 150.         NaN   \n 8 SWIdahoCereals_HRS_PAR_2019 106.          11.7 \n 9 SWIdahoCereals_HRS_PAR_2020  90.6         12.7 \n10 SWIdahoCereals_HRW_PAR_2019  88.2          8.20\n# ℹ 18 more rows\n\n\n\n\nRow-wise summaries\nMany operations in R are already vectorized across rows, but when they are not, you can use rowwise() to implement that.\nField disease scoring may benefit from this system. Often, several measurements are made on a single experimental unit (usually a plot), and those measurements are averaged together to create a final disease incidence score. Here is how to do that with rowwise().\nFirst, simulate a set of disease scores between 0 and 100 (indicating percent infection).\n\n# step 1: generate a set of possible scores: 0, 10, 20,...100\nscore_range &lt;- c(0:10 * 10L)\n# sample those possible scores to generate 50 data points\nscores &lt;- sample(score_range, 50, replace = TRUE)\n# arrange those 50 data points into a datafrmae of 5 columns, each column reflecting 10 observations\ndisease_df &lt;- data.frame(plot = letters[1:10],\n                         score1 = scores[1:10],\n                         score5 = scores[11:20],\n                         score3 = scores[21:30],\n                         score4 = scores[31:40],\n                         score2 = scores[41:50])\ndisease_df\n\n   plot score1 score5 score3 score4 score2\n1     a     80     10     60     90     80\n2     b      0     60     60     90     30\n3     c    100     90     10     60     20\n4     d     70      0     70     20     80\n5     e     10     90     80     40     10\n6     f    100      0     20     80     90\n7     g      0      0     90     10     50\n8     h     10     10     70     80      0\n9     i    100    100     20      0     50\n10    j     50    100     50     70    100\n\n\nData sets exist like this. A person might have a set of 10 experimental plots to evaluate for some trait. The trait assay protocol may require that multiple observations be gathered per plot (from a statistical standpoint, this is a technical replicate, not a true replicate) and then reduced to a single number per plot using a simple mean. Row-wise functions can accomplish this.\n\ndisease_df_sum &lt;- disease_df %&gt;% rowwise() %&gt;% \n  mutate(score_final = mean(score1:score2),\n        max_score = max(score1:score2))\ndisease_df_sum\n\n# A tibble: 10 × 8\n# Rowwise: \n   plot  score1 score5 score3 score4 score2 score_final max_score\n   &lt;chr&gt;  &lt;int&gt;  &lt;int&gt;  &lt;int&gt;  &lt;int&gt;  &lt;int&gt;       &lt;dbl&gt;     &lt;int&gt;\n 1 a         80     10     60     90     80          80        80\n 2 b          0     60     60     90     30          15        30\n 3 c        100     90     10     60     20          60       100\n 4 d         70      0     70     20     80          75        80\n 5 e         10     90     80     40     10          10        10\n 6 f        100      0     20     80     90          95       100\n 7 g          0      0     90     10     50          25        50\n 8 h         10     10     70     80      0           5        10\n 9 i        100    100     20      0     50          75       100\n10 j         50    100     50     70    100          75       100\n\n\n\n\n\n\n\n\nPractice Problem\n\n\n\n\n\n\nAs usual, consider how these data aggregation functions can support your own work.\n\nFor some of these exercises, you may need to use other dplyr functions.\n\nImport “weather_data.csv”. Group the data by station and year and count the number of missing data points for ‘tmax’, ‘tmin’ and ‘tavg’.\nImport “weather_data.csv”, group the data by ‘station’ and ‘julian_day’ and calculate the average minimum and maximum temperatures for the groups from ‘tmin’ and ‘tmax’. If you already imported the data set from the previous problem, you don’t need to import it again if you did not change the data set.\nImport “weather_data.csv”, calculate the difference between the ‘tmin’ and ‘tmax’ for each day. Group the data by year and return the smallest and largest differences for each year. Consider how to handle missing data. If you already imported the data set from the previous problem, you don’t need to import it again if you did not change the data set.\n\nSolution\n\n\n\n\n\n\n\n\n\nPutting it all together\n\n\n\nIt is possible use mutate() or summary() commands on a grouped data frame. A summary() call will return one value per group + summary function (e.g. mean). A mutate() call will return one value per row + summary function. All the previous examples in this lesson used summary(). Here is one example using mutate():\n\nvariety_trials %&gt;% \n  select(trial, rep, variety, crop, yield) %&gt;% group_by(crop) %&gt;%\n  mutate(relative_yield = yield/mean(yield, na.rm=TRUE)) %&gt;% \n  arrange(desc(yield)) %&gt;% head(15)\n\n# A tibble: 15 × 6\n# Groups:   crop [6]\n   trial                         rep variety        crop  yield relative_yield\n   &lt;chr&gt;                       &lt;int&gt; &lt;chr&gt;          &lt;chr&gt; &lt;dbl&gt;          &lt;dbl&gt;\n 1 SWIdahoCereals_HRS_PAR_2017     1 WB9411         HRS    498.           4.50\n 2 SWIdahoCereals_HRS_PAR_2017     3 12SB0197       HRS    297.           2.68\n 3 SWIdahoCereals_HWS_PAR_2017     3 Dayn           HWS    253.           2.18\n 4 SWIdahoCereals_SWS_PAR_2017     1 UI Stone       SWS    219.           2.12\n 5 SWIdahoCereals_SWS_PAR_2017     4 UI Stone       SWS    217.           2.09\n 6 SWIdahoCereals_SWS_PAR_2017     4 WA8277         SWS    204.           1.97\n 7 SWIdahoCereals_SWW_PAR_2017     1 Bobtail        SWW    201.           2.14\n 8 SWIdahoCereals_H-W_PAR_2017     3 WA8269         H-W    199.           2.36\n 9 SWIdahoCereals_HWS_PAR_2017     1 LCS Star       HWS    198.           1.71\n10 SWIdahoCereals_HRW_PAR_2020     2 LCS Jet        HRW    197.           1.45\n11 SWIdahoCereals_HRW_PAR_2020     3 LCS Rocket     HRW    196.           1.44\n12 SWIdahoCereals_SWW_PAR_2017     2 Agripro Legion SWW    194.           2.06\n13 SWIdahoCereals_H-W_PAR_2017     4 NSA10-2196     H-W    193.           2.29\n14 SWIdahoCereals_HWS_PAR_2017     4 LCS Star       HWS    193.           1.66\n15 SWIdahoCereals_HRW_PAR_2020     2 Scorpio        HRW    193.           1.42\n\n\nIn this case, the mean value used for calculating ‘relative_yield’ is the group mean."
  },
  {
    "objectID": "lessons/data-import.html",
    "href": "lessons/data-import.html",
    "title": "Importing Data into R",
    "section": "",
    "text": "Learning Goals\n\n\n\n\n\nAt the end of this lesson, you should:\n\nknow how to set your working directory\nknow how to specify a file path\nBe able to import CSV and Excel files into R\nunderstand the main arguments for importing .xlsx, .xls and .csv files",
    "crumbs": [
      "Lessons",
      "Importing tabular file"
    ]
  },
  {
    "objectID": "lessons/data-import.html#working-directory-and-file-paths",
    "href": "lessons/data-import.html#working-directory-and-file-paths",
    "title": "Importing Data into R",
    "section": "Working directory and file paths",
    "text": "Working directory and file paths\nWhile you can simulate data or load existing data sets associated with packages for your research, most of you will need to load pre-existing data sets from you computer, or a cloud server, some other external device.\nThe first thing you need to understand is the working directory and file paths. When an R session is initiated, it ascertains what the root working directory is based on the default settings for your R installation and any other.\nYou can check this with getwd(). You can set the file path relative to the current working directory or set an absolute path (that is, independent of your current directory). You can read more about absolute and relative paths here.\nWhen opening an R project (an .Rproj file), the working directory is automatically set to the directory where the .Rproj is located. Otherise, you can set the working directory using setwd() or under “Session” in the RStudio Ribbon.\n\nQuarto files and the {Here} package\nWhen working with an R notebook like a Quarto document or an Rmarkdown document, the working directory within code chunks is automatically set to where the quarto document is located on your file system. This is the case regardless of whether you set the working directory or where the .Rproj file is located.\nTo import a data set located in another directory from where the quarto document is located, you can use bash strategies for navigating up and down directory structures (e.g. “../data/somefile.csv”). Another solution is to use the here.\nThe function here() in the here package will reconstruct a path based on the system you are using (Windows, Mac, Linux, etc). Each directory must be specified and the final item specified is the file to import.\n\nlibrary(here)\n\nhere() starts at /home/runner/work/r-for-ag-scientists/r-for-ag-scientists\n\nhere(\"directory1\", \"subdirectory\", \"my_file.txt\")\n\n[1] \"/home/runner/work/r-for-ag-scientists/r-for-ag-scientists/directory1/subdirectory/my_file.txt\"\n\n\nIf you don’t want to load an entire package, but use the function from it, you can use the notation package_name::function(). The code below uses that when calling the here() function: here::here().",
    "crumbs": [
      "Lessons",
      "Importing tabular file"
    ]
  },
  {
    "objectID": "lessons/data-import.html#how-to-import",
    "href": "lessons/data-import.html#how-to-import",
    "title": "Importing Data into R",
    "section": "How to Import",
    "text": "How to Import\nThere are several ways to import data into R.\n\nUse the “Import Dataset” tool in the Environment pane.\n\n\n\n\n\n\n\n\n\n\n\nUse the Files pane in RStudio\n\n\n\n\n\n\n\n\n\n\nBoth of them open a new window that looks like this:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nWhile these point-and-click interfaces are very convenient, they don’t automatically leave a trail of breadcrumbs to help you repeat the process in the future. But, they do generate R code that we can capture and reuse. They are handy shortcuts that I have found especially helpful when trying to import file formats I work with rarely.\n\n\n\nManual command line import\n\nUltimately, this is how anything is imported into R. As mentioned, first two options listed above are actually tools for generating code that will import a data set through the command-line!\nThere’s 4 common approaches for importing data into R:\n\nread.csv()\nread_csv()\nread_excel()\nread_delim()\n\n\nread.csv()\nA very commonly used function for reading in “comma separated values” (CSV) files. I personally like this format because it is not proprietary and is compatible across many operating systems. It also limits all sorts of extraneous formatting that itself is a barrier to reproducible research (e.g. highlighting is discarded once a CSV file is closed).\nExample usage:\n\nmycsv1 &lt;- read.csv(here::here(\"data\", \"trial_metadata.csv\"))\n\nResult:\n\nstr(mycsv1)\n\n'data.frame':   28 obs. of  13 variables:\n $ trial            : chr  \"SWIdahoCereals_HWW_PAR_2020\" \"SWIdahoCereals_SWW_PAR_2020\" \"SWIdahoCereals_H_W_PAR_2018\" \"SWIdahoCereals_SWW_PAR_2018\" ...\n $ program          : chr  \"SWIdahoCereals\" \"SWIdahoCereals\" \"SWIdahoCereals\" \"SWIdahoCereals\" ...\n $ pi               : chr  \"OWalsh\" \"OWalsh\" \"OWalsh\" \"OWalsh\" ...\n $ nursery          : chr  \"HWW\" \"SWW\" \"H_W\" \"SWW\" ...\n $ year             : int  2020 2020 2018 2018 2018 2018 2016 2016 2016 2017 ...\n $ location         : chr  \"Parma\" \"Parma\" \"Parma\" \"Parma\" ...\n $ grower_cooperator: chr  \"UI Parma REE Center\" \"UI Parma REE Center\" \"UI Parma REE Center\" \"UI Parma REE Center\" ...\n $ irrigation       : chr  \"irrigated\" \"irrigated\" \"irrigated\" \"irrigated\" ...\n $ latitude         : num  43.8 43.8 43.8 43.8 43.8 ...\n $ longitude        : num  -117 -117 -117 -117 -117 ...\n $ planting_date    : chr  \"10/7/2019\" \"10/7/2019\" \"10/25/2017\" \"10/25/2017\" ...\n $ harvest_date     : chr  \"7/21/2020\" \"7/21/2020\" \"7/17/2018\" \"7/17/2018\" ...\n $ exp_design       : chr  \"RCBD\" \"RCBD\" \"RCBD\" \"RCBD\" ...\n\n\nDetails:\nread.csv() is actually a “wrapper” for another function, read.table(). It has taken read.table() and set the default arguments to work with CSV files. read.table() is a more generalized form providing more flexibility.\nThe default arguments include:\n\ncolnames = TRUE: the first row of data is assumed to be the column names * nothing in the data set will be used for row names unless we explicitly indicate so\nsep = \",\": each data point is separated from another by a comma * a newline indicator is used to separate rows of data\nna.strings = c(\"NA\", \"\"): cells with a either no data (““) or an”NA” will be treated as missing.\nif a column of data consists of non-numeric characters, that column vector will be treated as character and not a factor\n\n\n\nread_csv()\nThis function is part of readr. It has very similar functionality to read.csv(), but it parses the data a wee bit different.\nExample Usage:\nFirst, load the package readr that contains the function read_csv().\n\nlibrary(readr)\nmycsv2 &lt;- read_csv(here::here(\"data\", \"trial_metadata.csv\"))\n\nRows: 28 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (10): trial, program, pi, nursery, location, grower_cooperator, irrigati...\ndbl  (3): year, latitude, longitude\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nResult:\n\nstr(mycsv2)\n\nspc_tbl_ [28 × 13] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ trial            : chr [1:28] \"SWIdahoCereals_HWW_PAR_2020\" \"SWIdahoCereals_SWW_PAR_2020\" \"SWIdahoCereals_H_W_PAR_2018\" \"SWIdahoCereals_SWW_PAR_2018\" ...\n $ program          : chr [1:28] \"SWIdahoCereals\" \"SWIdahoCereals\" \"SWIdahoCereals\" \"SWIdahoCereals\" ...\n $ pi               : chr [1:28] \"OWalsh\" \"OWalsh\" \"OWalsh\" \"OWalsh\" ...\n $ nursery          : chr [1:28] \"HWW\" \"SWW\" \"H_W\" \"SWW\" ...\n $ year             : num [1:28] 2020 2020 2018 2018 2018 ...\n $ location         : chr [1:28] \"Parma\" \"Parma\" \"Parma\" \"Parma\" ...\n $ grower_cooperator: chr [1:28] \"UI Parma REE Center\" \"UI Parma REE Center\" \"UI Parma REE Center\" \"UI Parma REE Center\" ...\n $ irrigation       : chr [1:28] \"irrigated\" \"irrigated\" \"irrigated\" \"irrigated\" ...\n $ latitude         : num [1:28] 43.8 43.8 43.8 43.8 43.8 ...\n $ longitude        : num [1:28] -117 -117 -117 -117 -117 ...\n $ planting_date    : chr [1:28] \"10/7/2019\" \"10/7/2019\" \"10/25/2017\" \"10/25/2017\" ...\n $ harvest_date     : chr [1:28] \"7/21/2020\" \"7/21/2020\" \"7/17/2018\" \"7/17/2018\" ...\n $ exp_design       : chr [1:28] \"RCBD\" \"RCBD\" \"RCBD\" \"RCBD\" ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   trial = col_character(),\n  ..   program = col_character(),\n  ..   pi = col_character(),\n  ..   nursery = col_character(),\n  ..   year = col_double(),\n  ..   location = col_character(),\n  ..   grower_cooperator = col_character(),\n  ..   irrigation = col_character(),\n  ..   latitude = col_double(),\n  ..   longitude = col_double(),\n  ..   planting_date = col_character(),\n  ..   harvest_date = col_character(),\n  ..   exp_design = col_character()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\n\nDetails:\nThis function takes similar arguments to read.csv(), although the output is more extensive.\n\nLike in read.csv(), the default separator is “,”, missing data are coded as empty string \"\" or NA and the first line is assumed to be the column header\nit does not bother with a row names attribute\nthe argument trim_ws will remove leading and trailing whitespace for data entries. So the column header ” soil pH” will become “soil pH”.\nColumn are preserved more clearly than read.csv() (including spaces and special characters). I’m honestly not fond of this behavior and usually clean up weird column names with janitor::clean_names().\n\nThe output is largely similar, although read_csv() actually parses dates, unlike read.csv().\n\n\nread_excel()\nThis function will read in MS Excel files (reliably)! It is truly amazing. For many many years, it was cumbersome and/or impossible to read Excel files direclty into R.\nExample Usage:\nLoad the package that contains the function read_excel(), readxl.\n\nlibrary(readxl)\nmyxl &lt;- read_excel(here::here(\"data\", \"field_trial_2009.xlsx\"), \n                   sheet = \"site_02\", \n                   trim_ws = TRUE, \n                   na = c(\"\", \"NA\"))\n\nResults:\n\nstr(myxl)\n\ntibble [80 × 30] (S3: tbl_df/tbl/data.frame)\n $ plot    : num [1:80] 1 2 3 4 5 6 7 8 9 10 ...\n $ bloc    : num [1:80] 1 1 1 1 1 1 1 1 1 1 ...\n $ rep     : num [1:80] 1 1 1 1 1 1 1 1 1 1 ...\n $ Ptrt    : chr [1:80] \"high\" \"high\" \"high\" \"high\" ...\n $ inoc    : chr [1:80] \"myco\" \"myco\" \"myco\" \"myco\" ...\n $ Cv      : chr [1:80] \"OTIS\" \"ALPOWA\" \"BlancaG\" \"WALWORTH\" ...\n $ order   : num [1:80] 1 2 3 4 5 17 18 16 20 19 ...\n $ height  : num [1:80] 49 48.7 40.3 45.7 59 ...\n $ spikes  : num [1:80] NA 240 192 360 216 340 220 228 208 256 ...\n $ tstwt   : num [1:80] 61.9 61.2 61.3 60.6 61.7 60.2 61.2 61.2 62.1 62.1 ...\n $ HI      : num [1:80] 0.385 0.375 0.444 0.385 0.481 0.387 0.5 0.5 0.474 0.409 ...\n $ YieldKg : num [1:80] 1144 1274 1026 1026 922 ...\n $ YieldBu : num [1:80] 16.5 18.5 14.9 15.1 13.3 ...\n $ tkw     : num [1:80] 35.1 32.2 37.6 30.8 40.1 ...\n $ myco    : num [1:80] 37.5 30 35.7 15.4 14.3 ...\n $ PT1     : num [1:80] 4391 4500 4546 3436 4121 ...\n $ PT2     : num [1:80] 1040 726 605 702 1036 ...\n $ PT3     : num [1:80] 375 85.5 315.6 247.4 161.9 ...\n $ Pseeds  : num [1:80] 3182 2523 3156 3389 2473 ...\n $ cruc    : num [1:80] 6 10 4 5 2 3 9 7 39 66 ...\n $ Cu      : num [1:80] 6.11 4.72 5.99 5.69 4.48 ...\n $ Fe      : num [1:80] 46.4 27.2 46.8 36.5 34.2 ...\n $ Mn      : num [1:80] 28 21.5 28.2 28.4 23.8 ...\n $ Zn      : num [1:80] 16.2 14.2 18.3 22.1 15.1 ...\n $ Protein : num [1:80] 14.3 12.7 14.7 16.3 12 ...\n $ SDS     : num [1:80] 9.9 9.9 13.1 12.5 9.6 13.7 13.4 9.3 9.6 10.2 ...\n $ PT1_2   : num [1:80] 4371 4455 4442 3481 4146 ...\n $ PT2_2   : num [1:80] 968 659 544 635 965 ...\n $ PT3_2   : num [1:80] 387 104 328 262 179 ...\n $ Pseeds_2: num [1:80] 3103 2482 3083 3296 2434 ...\n\n\nDetails\n\nBy default, read_excel() will import the first sheet unless it named by position (e.g. 1, 2, 3) or name (like in the previous example).\nThe default argument for missing values is only an empty string \"\"\nIt returns results very similar to read_csv().\nThere is also an argument, range for setting a custom range of cells to read in.\n\n\n\nread_delim()\nFor reading in text files! It’s pretty simple. Text files are not used terribly frequently, but I see them now and then with really huge files, such as genotyping data.\n\nmytxt &lt;- read.delim(here::here(\"data\", \"genotypic_data.txt\"))\n\nDetails\nThis function is a more extensive version of read.csv(). It has a longer list of argument and slight different default values for those arguments that read.csv. Run ?write.delim in the console for more details.\n\n\n\n\n\n\nNote\n\n\n\nIt’s useful to understand how R has read a data set into an R session. R has opened a connection to the file that you have specified, read file information into the R session using system memory (your computer’s RAM), and then closed the connection.\nThis is a one-way process from your file to R\nOnce a file is loaded and the connection closed, there is no longer any link between the object loaded into memory in R and its origin file (located on on your computer, a cloud server, etc). Any changes made to the object in R will not change the file on your computer unless you explicitly run scripts to overwrite that file. This is good thing; it gives you freedom to experiment with and manipulate an object without worrying about messing up the original file.\nWe will discuss later how to export R objects to your file system when you want to capture changes made to an object.\n\n\n\n\nTroubleshooting Import errors\nThings frequently go wrong when importing data. This can sometimes be corrected by changing the import arguments, but often it indicates problems with the incoming data.\nSome possible errors and how to fix them:\n\nSome variables which should be numeric are characters instead. At least one item contains an unexpected character that renders that observation - and the rest of the vector - as a character. This might be two decimal points, a comma, or a “O” instead of “0”. If possible, manually inspect the data and correct the error.\nMissing data are not coded as missing. Import functions have default values for what is interpreted as missing. Check the documentation and adjust the arguments as needed to capture what code a data sets is using to indicate missing data.\n\nThe best choice is to properly arrange your data set prior to import. Broman & Woo (2018) provides some straightforward recommendations on how to manage data in spreadsheets.\n\n\nImporting Other Data types\nThe instructions provided above are for importing tabular data that is generally not “big data”.\nBig data is a subjective term that is system-dependent (and is rapidly changing as PC computing power and memory increases). Some personal computers can easily handle a 50 Mb file, while others cannot. If you are waiting more than 5 seconds for your data to import, then consider other options. A deep discussion about how to handle large data sets are beyond the scope of this workshop, but at the very minimum, consider the package data.table and its high-performance functions for reading and writing data, fread() and fwrite(). If your data sets are too big to load directly into R, consider arrow.\nYou may also be working with data types that are not strictly tabular, at least in the form they are stored on a computer. Here are some common non-tabular data types and packages to handle import of those.\n\nspatial data: sf, sp, raster\nSAS data sets: haven, haven::read_sas()\nSPSS data sets: haven, haven::read_sav()\ntabular files on Google drive: googledrive\nimage files: magick\n\n…and so much more.\n\n\n\n\n\n\nPractice Problem\n\n\n\n\n\n\nImport one of your data sets using two of the functions taught:\n\n(save your data in different format to enable this)\n\nread.csv()\nread_csv()\nread_excel()\nread.delim()\n\n\nExamine the data imported using View(imported_data). Did everything import as expected? Are your variables coded as they should be? Are numeric variables numeric? Are missing data detected as thus?\n\n\n\n\n\n\n\n\n\n\nPutting it all together\n\n\n\nNote how easy it is to import data from the ‘Files’ pane; navigate to the file and click on it! It’s important that that the code generated is saved so (1) you can reuse the code; and (2) so you can link the data set loaded to a set of R commands you ran should you ever need to rerun them (which is highly likely).",
    "crumbs": [
      "Lessons",
      "Importing tabular file"
    ]
  },
  {
    "objectID": "lessons/data-structures.html",
    "href": "lessons/data-structures.html",
    "title": "Data Structures",
    "section": "",
    "text": "The longest and most important lesson of them all! These are the foundation of everything you are likely to do R as a scientists. Understanding these will take time and practice, so you may find yourself returning to this page to remind yourself of these data structures.",
    "crumbs": [
      "Lessons",
      "Getting to know data in R",
      "Data Structures"
    ]
  },
  {
    "objectID": "lessons/data-structures.html#introduction-to-common-data-structures",
    "href": "lessons/data-structures.html#introduction-to-common-data-structures",
    "title": "Data Structures",
    "section": "Introduction to Common Data Structures",
    "text": "Introduction to Common Data Structures\nPreviously, we looked at data types. Now we need to consider how those types are arranged into complex structures (that is, objects) we can access and manipulate.\nThere are several data structures commonly used in R:\n\nvector\ndata.frame\nmatrix\nlist\n\n\nThe vector\nA collection of items all coerced to be the same data type that we learned about in the previous lesson. These are sometimes called “atomic vectors” in the R documentation.\n\nv1 &lt;- 1:10\nv2 &lt;- c(\"apples\", \"pears\", \"oranges\")\nv3 &lt;- c(1, 5, 7, 85)\n\nA vector can also consist of only one value or no value.\n\nv4 &lt;- \"violets\"\nv5 &lt;- TRUE\nv6 &lt;- NA\n\nIt has the attribute length and each item in a vector can also be named.\n\nlength(v1); length(v2); length(v3)\n\n[1] 10\n\n\n[1] 3\n\n\n[1] 4\n\n\n\nnames(v3) &lt;- c(\"A\", \"B\", \"C\", \"D\")\nv3\n\n A  B  C  D \n 1  5  7 85 \n\n\n\nAccessing items\nItems in a vector can be accessed by referencing the numeric position in the vector, starting at 1 and ending at the vector length. If a vector has length of one, it not necessary to index that.\nx[1] will access the first item in the vector, while x[5] will access the 5th element. Multiple item can be indexed: x[c(1,5)]. If an index position, it repeated, that item will be returned as often as it is called:\n\nv1[1]\n\n[1] 1\n\nv1[5]\n\n[1] 5\n\nv1[c(1,5)]\n\n[1] 1 5\n\nv1[c(1,1)]\n\n[1] 1 1\n\n\nAny collection of numbers can be used to index items in a vector:\n\nv1[c(1, 1:5)]\n\n[1] 1 1 2 3 4 5\n\n\nWhat happens if a negative number is used?\n\nv1[-1]\n\n[1]  2  3  4  5  6  7  8  9 10\n\n\nEverything but that index position is returned.\nWhat if you index a position that does not exist?\n\nv1[0]\n\ninteger(0)\n\nv1[20]\n\n[1] NA\n\n\nItems in a vector can also be accessed by their name:\n\nv3[\"A\"]\n\nA \n1 \n\n\nWhat happens if there are replicate names in a vector and you try to index (extract a value) for that name?\n\nnames(v3) &lt;- c(\"A\", \"B\", \"C\", \"A\")\nv3\n\n A  B  C  A \n 1  5  7 85 \n\nv3[\"A\"]\n\nA \n1 \n\n\nOnly the first instance of a name is returned.\n\n\n\nThe data frame\nA collection of vectors all of the name length. Each vector is a single data type, but different columns can be different data types. This is similar to a typical workbook you might open in Excel or another spreadsheet program. These can be only one column wide, but they often consist of more than that.\n\nd1 &lt;- data.frame(var1 = 1:5,\n                 var2 = c(\"a\", \"b\", \"a\", \"b\", \"c\"),\n                 var3 = c(\"alpha\", \"beta\", \"gamma\", \"zeta\", \"psi\"))\nd1\n\n  var1 var2  var3\n1    1    a alpha\n2    2    b  beta\n3    3    a gamma\n4    4    b  zeta\n5    5    c   psi\n\n\nNotes that is a single value is supplied for a column, it will be repeated for the entire column.\nA data frame has attributes for:\n\nnrow number of rows\nncol number of columns\ncolnames column names\nrownames row names (if none are provided, R will generate integer row names starting at 1)\n\n\n\n\n\n\n\nNote\n\n\n\nWhile duplicate column names in a data frame are allowed, they are not advised, and may throw an error during data import, depending on the import function used.\n\n\nCheck the number of rows and columns:\n\nnrow(d1)\n\n[1] 5\n\nncol(d1); length(d1)\n\n[1] 3\n\n\n[1] 3\n\ndim(d1) # tells us row and column lengths in one command\n\n[1] 5 3\n\n\nLook at the rownames and colnames atrributes:\n\nrownames(d1)\n\n[1] \"1\" \"2\" \"3\" \"4\" \"5\"\n\ncolnames(d1)\n\n[1] \"var1\" \"var2\" \"var3\"\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe rownames attribute can be set, but if it is not, it is automatically created within R from 1 to the total number of rows. Row names are a tricky attribute than many packages in R do not support. A function may toss out your row names without any warning!\nIn general, I do not recommend setting the row names attribute in data frames to anything other than the default values unless a package function specifically requires it.\n\n\nWhat does length(d1) return? How about names(d1)?\nWe can look at the overall structure of a data.frame with View():\n\nView(d1)\n\nIf a particularly large file is loaded into R, using View() may be very slow (if you have a large number of rows) and provide an incomplete view (if you have a large number of columns). In that case, you can use str() to look at a data frame’s structure:\n\nstr(d1)\n\n'data.frame':   5 obs. of  3 variables:\n $ var1: int  1 2 3 4 5\n $ var2: chr  \"a\" \"b\" \"a\" \"b\" ...\n $ var3: chr  \"alpha\" \"beta\" \"gamma\" \"zeta\" ...\n\n\nThe data frame is the most common data structure scientists use in R\n\nAccessing items\nLike vectors, data frames can be indexed by position, except now we have two dimensions to consider. You can extract individual elements in a data frame by references the row and column position, my_dataframe[row, column].\n\nExtract the items located in the first 2 row2 and last 2 columns:\n\nVisual of what we want:\n\n\n\n\n\n\n\n\n\n(This graphic is an overlay of green over blue, creating a dark teal color. The green represents rows indexed, the blue is columns indexed and the teal is the intersection between those two. If a color is not visible, that is because it is under the teal overlay.)\n\nd1[1:2, 2:3]\n\n  var2  var3\n1    a alpha\n2    b  beta\n\n\n\nExtract the first two rows and all of the columns:\n\n\n\n\n\n\n\n\n\n\n\nd1[1:2, ]\n\n  var1 var2  var3\n1    1    a alpha\n2    2    b  beta\n\n\nWhen the column position is left empty, all columns are returned\n\nExtract the entire first column and all rows:\n\n\n\n\n\n\n\n\n\n\n\nd1[ ,1]\n\n[1] 1 2 3 4 5\n\n\nWhen the row position is left empty, all rows are returned\n\nExtract the values located in the first 2 rows and first two columns:\n\n\n\n\n\n\n\n\n\n\n\nd1[1:2, 1:2]\n\n  var1 var2\n1    1    a\n2    2    b\n\n\n\nReturn everything except the third columns\n\n\n\n\n\n\n\n\n\n\n\nd1[ ,-3]\n\n  var1 var2\n1    1    a\n2    2    b\n3    3    a\n4    4    b\n5    5    c\n\n\n\nReturn everything except the first 2 rows:\n\n\n\n\n\n\n\n\n\n\n\nd1[-(1:2),  ]\n\n  var1 var2  var3\n3    3    a gamma\n4    4    b  zeta\n5    5    c   psi\n\n\n\n\n\n\n\n\nThings to note\n\n\n\nIndexing accepts numeric/integer vectors, so you can use a sequence (3:10), or concatenated positions (c(1, 2, 5, 10)), or a combination of both (c(1:10, 13)).\nWhen indexing positions in a vector or data frame (or anything else), the amount of white space does not affect the outcome. These are equivalent: d[1,2], d[1, 2], d[ 1, 2]\n\n\n\n\nColumn Referencing\nData in R data frames can also be referred to by their column names using the notation dataframe$column_name:\n\nd1$var1\n\n[1] 1 2 3 4 5\n\n\nThe data are returned as a vector (with the typical attributes of a vector: length and names).\nThis can also be used to create a new column in the data frame:\n\nd1$var4 &lt;- 0:-4\n\nIn this example, a new column called “var4” was created, consisting of sequence numbers from zero to -4.\n\n\n  var1 var2  var3 var4\n1    1    a alpha    0\n2    2    b  beta   -1\n3    3    a gamma   -2\n4    4    b  zeta   -3\n5    5    c   psi   -4\n\n\n\n\nValue replacement\nThere are likely to be moments when you want to replace values in a data frame or vector with something else. You can do that with indexing and variable assignment.\nLet’s image that we want to assign the third value in the second column as NA. First, we index the that position, then we assign a value to it (NA in this case):\n\nd1[3, 2] &lt;- NA\n\n\n\n\nThe matrix\nA very mile-high view of the matrix is given here because you while may encounter this, it is a less commonly used data structure in R.\nLike a data frame, a matrix is a collection of vectors all the same length, except all vectors must be the same data type (e.g. numeric, character, etc).\nAn R matrix is not strictly identical to the mathematical concept of a matrix, but if you make an R matrix consisting only of numbers, it can be used like a mathematical matrix. Furthermore, there several mathematical operations that are intended to only work on matrices such as matrix pre-multiplication %*% or extraction of a diagonal from a square matrix, diag().\nA matrix lacks some of the attributes and functionality that are possible for data frames. Columns names can be given, but they cannot be used to index columns (i.e. my_matrix$col will throw an error).\nMatrices are not commonly seen in user-facing functions in R, but within R internals, they are widely used. You may occasionally come across a package requiring a matrix or perhaps you work in a math-intensive discipline where matrix operations are part of your regular work.\n\n\n\n\n\n\nFYI: how to make a matrix\n\n\n\n\n\nA matrix can be created by providing a vector of numbers and telling it to populate a table of given dimensions:\n\nx = 1:100\nm1 &lt;- matrix(data = x, nrow = 5, ncol = 20, byrow = TRUE)\n\n\n\n\n\n\nThe list\nThis is the least structured and hence most flexible data structure that exists in R. A list is like a closet that happens to be filled with other objects, or your kitchen sink, or the trunk of your car. It’s a collection of objects of varying sizes, types, and so on. A vector, scalar and data frame can all be combined into a list. A list can contain other lists inside of it (although this list nesting can be cumbersome to deal with).\n\nL1 &lt;- list(v1, v2, v3, d1, m1)\nstr(L1)\n\nList of 5\n $ : int [1:10] 1 2 3 4 5 6 7 8 9 10\n $ : chr [1:3] \"apples\" \"pears\" \"oranges\"\n $ : Named num [1:4] 1 5 7 85\n  ..- attr(*, \"names\")= chr [1:4] \"A\" \"B\" \"C\" \"A\"\n $ :'data.frame':   5 obs. of  4 variables:\n  ..$ var1: int [1:5] 1 2 3 4 5\n  ..$ var2: chr [1:5] \"a\" \"b\" NA \"b\" ...\n  ..$ var3: chr [1:5] \"alpha\" \"beta\" \"gamma\" \"zeta\" ...\n  ..$ var4: int [1:5] 0 -1 -2 -3 -4\n $ : int [1:5, 1:20] 1 21 41 61 81 2 22 42 62 82 ...\n\n\nEach list item can have a name. Or not.\n\nL1 &lt;- list(\"number\" = v1, \"flower\" = v3, v4, \"df\" = d1, m1)\nnames(L1)\n\n[1] \"number\" \"flower\" \"\"       \"df\"     \"\"      \n\nstr(L1)\n\nList of 5\n $ number: int [1:10] 1 2 3 4 5 6 7 8 9 10\n $ flower: Named num [1:4] 1 5 7 85\n  ..- attr(*, \"names\")= chr [1:4] \"A\" \"B\" \"C\" \"A\"\n $       : chr \"violets\"\n $ df    :'data.frame': 5 obs. of  4 variables:\n  ..$ var1: int [1:5] 1 2 3 4 5\n  ..$ var2: chr [1:5] \"a\" \"b\" NA \"b\" ...\n  ..$ var3: chr [1:5] \"alpha\" \"beta\" \"gamma\" \"zeta\" ...\n  ..$ var4: int [1:5] 0 -1 -2 -3 -4\n $       : int [1:5, 1:20] 1 21 41 61 81 2 22 42 62 82 ...\n\n\n\n\n\n\n\n\nNote\n\n\n\nIf you end up with too many objects in your global environment, you can always delete them with the rm() function:\nrm(myvar)\nrm(var1, var2, var3)\nIf one object ends up with the wrong name, you can copy the object to a new name and delete the old version:\nnew &lt;- old\nrm(old)\n\n\n\nAccessing items\nAs mentioned earlier, lists are relatively unstructured and follow fewer rules. You can access list items by their numeric position, list[[1]], or their name (if it exists), list$name.\n\nL1[[1]]\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\nL1$df\n\n  var1 var2  var3 var4\n1    1    a alpha    0\n2    2    b  beta   -1\n3    3 &lt;NA&gt; gamma   -2\n4    4    b  zeta   -3\n5    5    c   psi   -4\n\n\nOnce a list item is accessed, the normal indexing rules apply. The 4th item in the list called “L1” is a data frame.\n\nL1[[4]]\n\n  var1 var2  var3 var4\n1    1    a alpha    0\n2    2    b  beta   -1\n3    3 &lt;NA&gt; gamma   -2\n4    4    b  zeta   -3\n5    5    c   psi   -4\n\nL1[[4]]$var1\n\n[1] 1 2 3 4 5\n\nL1[[4]][1:2,]\n\n  var1 var2  var3 var4\n1    1    a alpha    0\n2    2    b  beta   -1",
    "crumbs": [
      "Lessons",
      "Getting to know data in R",
      "Data Structures"
    ]
  },
  {
    "objectID": "lessons/data-structures.html#checking-the-class-of-a-data-structure",
    "href": "lessons/data-structures.html#checking-the-class-of-a-data-structure",
    "title": "Data Structures",
    "section": "Checking the class of a data structure",
    "text": "Checking the class of a data structure\nUse the class() command.\n\nclass(v1)\n\n[1] \"integer\"\n\nclass(d1)\n\n[1] \"data.frame\"\n\nclass(L1)\n\n[1] \"list\"\n\n\nYou can also explicitly ask R if an object is a specific data structure:\n\nis.data.frame(d1)\n\n[1] TRUE\n\nis.matrix(d1)\n\n[1] FALSE\n\nis.list(L1)\n\n[1] TRUE\n\nis.data.frame(L1)\n\n[1] FALSE\n\n\nCoercion from is also possible. If you find yourself working with matrices, you can convert a data.frame to a matrix. Or a function may return a matrix that you need converted back to a data frame:\n\nas.data.frame()\nas.matrix()\nas.list()",
    "crumbs": [
      "Lessons",
      "Getting to know data in R",
      "Data Structures"
    ]
  },
  {
    "objectID": "lessons/data-structures.html#final-notes",
    "href": "lessons/data-structures.html#final-notes",
    "title": "Data Structures",
    "section": "Final Notes",
    "text": "Final Notes\nThere are several more object types, but these are by far the ones you are most likely to encounter and use.\n\nMore resources:\n\nFor a deeper look into vectors, read this chapter from R 4 Data Science\nTo learn more about subsetting, read this chapter from Advanced R (they are not kidding; this book is advanced.)\n\nFor a very comprehensive guide to R object types, check out the official R language manual. Warning: this manual is extremely technical! If you choose to check it out, be patient with yourself. It may take several readings to fully understand the content.\n\n\n\n\n\n\nPutting it all together\n\n\n\nWhen information is extracted from a vector, data.frame, matrix or list using these tools, the returned information can always be assigned to a new object:\n\nnew &lt;- d1[1:2, -3]\n\nSometimes, we need that information assigned to a new object so we can it use later. Other times, printing the extracted information to the console is sufficient for meeting researcher needs.",
    "crumbs": [
      "Lessons",
      "Getting to know data in R",
      "Data Structures"
    ]
  },
  {
    "objectID": "lessons/data-wrangling.html",
    "href": "lessons/data-wrangling.html",
    "title": "Introduction to Data Wrangling",
    "section": "",
    "text": "Learning Goals\n\n\n\n\n\nAt the end of this lesson, you should:\n\nbe able to select columns in R using select()\nbe able to filter a data set using filter()\nbe aware of how to conditionally create new variables using case_when()\nknow to create new variables using mutate()\nbe able to rename variables using rename()\nbe able to sort a data set using arrange()\nbe table to use separate() to split up single variables into multiple variables\n\n\n\n\nFirst, load libraries:\n\nlibrary(dplyr); library(tidyr)\n\nNext, import data:\n\nvariety_trials &lt;- read.csv(here::here(\"data\", \"trial_data.csv\"))\nweather &lt;- read.csv(here::here(\"data\", \"weather_data.csv\"))\n\n\n\n\n\n\n\nWhat is going on with here::here()?\n\n\n\n\n\nThe here() function is from the here package. This package simplifies working directory issues by setting it to where the nearest .Rproj files exists. When using a .qmd file, it looks for the .Rproj file that is the same directory as that file and moves up the directory tree.\n\n\n\n\nTidyverse notes\nThis lesson relies on group of packages called the “Tidyverse”, in particular dplyr and tidyr.\nThese packages follow a special set of rules called “non-standard evaluation” (sometimes abbreviated “NSE”). Tidyverse non-standard evaluation uses quotes far less often than “base R” (base R are package that are installed automatically when R is updated). It also uses indexing $ less frequently. You can name a variable directly instead of using dataset$var.\nMany functions in the Tidyverse follow this structure:\nfunction(dataset, action)\nWhere “dataset” is the data framed being input and “action” is whatever action is being taken.\n\n\nSelection columns\nThe function select is used to specify column you want to keep (all rows are returned). Columns can be specified by name or position (i.e. the first two columns in the data set would be 1:2).\nSelect by name:\n\nselect1 &lt;- select(variety_trials, variety, yield, grain_protein)\nhead(select1)\n\n    variety     yield grain_protein\n1  12SB0197  71.69333        9.8325\n2  12SB0197 108.60301        9.6025\n3  12SB0197  81.71237       11.2700\n4  12SB0197 103.84303       10.3500\n5 Jefferson  65.26589       10.2350\n6 Jefferson 104.37355       11.0400\n\n\nYou can also select on what columns you do not want:\n\nselect2 &lt;- select(variety_trials, -trial)\nselect3 &lt;- select(variety_trials, -c(trial))\n\nhead(select2); head(select3)\n\n  rep   variety     yield grain_protein test_weight\n1   1  12SB0197  71.69333        9.8325        62.1\n2   2  12SB0197 108.60301        9.6025        64.2\n3   3  12SB0197  81.71237       11.2700        65.6\n4   4  12SB0197 103.84303       10.3500        64.3\n5   1 Jefferson  65.26589       10.2350        62.8\n6   2 Jefferson 104.37355       11.0400        65.2\n\n\n  rep   variety     yield grain_protein test_weight\n1   1  12SB0197  71.69333        9.8325        62.1\n2   2  12SB0197 108.60301        9.6025        64.2\n3   3  12SB0197  81.71237       11.2700        65.6\n4   4  12SB0197 103.84303       10.3500        64.3\n5   1 Jefferson  65.26589       10.2350        62.8\n6   2 Jefferson 104.37355       11.0400        65.2\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe variables specified in select() will appear in the new data frame in exactly the order they were listed in the function call.\n\n\nSometimes, you might want to select many columns that share something common about their name:\n\nselect4 &lt;- select(variety_trials, starts_with(\"r\"))\nhead(select4)\n\n  rep\n1   1\n2   2\n3   3\n4   4\n5   1\n6   2\n\n\nThis particular example is not all that useful, but you might have a large data set, with several dozen variables that all start with “snp” followed by some alpha-numeric code (e.g. “snp4738”). This function will enable you to select these column more efficiently than naming every single one.\nThere are more options for pattern matching on column names:\n\n?tidyselect::starts_with #another option for searching help from the R console\n\n\n\n\n\n\n\n\n\n\n\n\nFiltering rows\nThe function filter is used to specify rows you want to keep (all columns are returned). This command uses logical operators for deciding what to keep.\n\nfilter1 &lt;- filter(variety_trials, variety == \"Stephens\") # match one name\nfilter2 &lt;- filter(variety_trials, variety %in% c(\"Stephens\", \"Bobtail\")) # match multiple names\nfilter3 &lt;- filter(variety_trials, yield &gt; 50 & grain_protein &lt;= 14) # filter on multiple conditions\n\ndim(filter1); dim(filter2); dim(filter3)\n\n[1] 4 6\n\n\n[1] 16  6\n\n\n[1] 1017    6\n\n\n\n\n\n\n\n\nNote\n\n\n\nIt is also possible to select by numeric position:\n\nselect(variety_trials, c(1:3, 4))\n\nWhile selecting by numeric position works, it is an unreliable choice because it depends on column order or row order being exactly as you expect it. This may work the first time you write + run code, but it is likely to fail over time as you sort, augment or change data sets.\n\n\n\n\n\n\n\n\nPractice Problem\n\n\n\n\n\n\nImport “trial_metadata.csv” with the readr function read_csv().\nSelect columns that contain “i” in the column name and assign it a name “select_colm”.\nFilter “select_colm” and filter when variety is “Jefferson” and “Dayn”, and yield greater than or equal to 70. Assign these results to a new object.\n\n\n\n\n\n\nCreating new variables\nYou can quite create new variables with a mutate() function call:\nmutate(dataset, var_name = variable)\nExamples:\n\nnew_var &lt;- rbinom(n = nrow(variety_trials), size = 1, prob = 0.5)\n\nmutate1 &lt;- mutate(variety_trials, \n                    dataset = \"example\",\n                    row_position = 1:n(),\n                    trial_id = trial,\n                    random_yield = yield + rnorm(n = n()),\n                    binom_var = new_var, \n                    yield_protein = yield + grain_protein)\n\ntable(new_var)\n\nnew_var\n  0   1 \n944 938 \n\nhead(mutate1)\n\n                        trial rep   variety     yield grain_protein test_weight\n1 SWIdahoCereals_H_S_PAR_2018   1  12SB0197  71.69333        9.8325        62.1\n2 SWIdahoCereals_H_S_PAR_2018   2  12SB0197 108.60301        9.6025        64.2\n3 SWIdahoCereals_H_S_PAR_2018   3  12SB0197  81.71237       11.2700        65.6\n4 SWIdahoCereals_H_S_PAR_2018   4  12SB0197 103.84303       10.3500        64.3\n5 SWIdahoCereals_H_S_PAR_2018   1 Jefferson  65.26589       10.2350        62.8\n6 SWIdahoCereals_H_S_PAR_2018   2 Jefferson 104.37355       11.0400        65.2\n  dataset row_position                    trial_id random_yield binom_var\n1 example            1 SWIdahoCereals_H_S_PAR_2018     70.95810         0\n2 example            2 SWIdahoCereals_H_S_PAR_2018    108.78351         0\n3 example            3 SWIdahoCereals_H_S_PAR_2018     81.45312         0\n4 example            4 SWIdahoCereals_H_S_PAR_2018    102.36713         0\n5 example            5 SWIdahoCereals_H_S_PAR_2018     64.55818         1\n6 example            6 SWIdahoCereals_H_S_PAR_2018    102.38536         0\n  yield_protein\n1      81.52583\n2     118.20551\n3      92.98237\n4     114.19303\n5      75.50089\n6     115.41355\n\n\nThis created 6 new variables:\n\ndataset which is a character with the value “example” for all rows\nrow_position providing the row number, starting at 1 and ending at n(), a function that returns the total nubmer of rows in the data frame\nrange_new which is a copy of the variable “range”\nrandom_yield which is the sum of the value for yield plus a random deviation from the function rnorm. This operation is vectorized, using the ‘yield’ measurement for each row and generating a new random deviate for each row.\nbinom_var the binomial outcomes variable created in the new_var .... statement.\nyield_protein the addition of two variables in the data set (this is also vectorized, calculating this for each row)\n\nThese example cover the majority of what you are likely to experience: creating a constant, calculating new variables from existing variables, pulling in an external variables, and so forth.\nThis is equivalent to what was taught earlier using $ notation:\n\nmutate1 &lt;- variety_trials # first, copy the data frame\nmutate1$dateset &lt;- \"example\"\nmutate1$row_position &lt;- 1:nrow(mutate1)\nmutate1$trial_new &lt;- mutate1$trial # note that NSE cannot be used\nmutate1$random_yield &lt;- mutate1$yield + rnorm(nrow(mutate1))\nmutate1$binom_var = new_var\nmutate1$yield_protein &lt;- mutate1$yield + mutate1$grain_protein\n\nThis can be a bit longer and cumbersome compared to mutate statements, but it does work.\n\ncase_when(), a special addition to mutate statements\nOccasionally, you will need a define a variable conditionally, based on information from other variables. Here is an example for weather data. Here, a special minimum value is created where all data for “tmin_F” less than 50°F are set at 50:\n\nweather &lt;- mutate(weather, new_min = case_when(\n  tmin_F &lt;= 50 ~ 50,\n  TRUE ~ tmin_F))\n\nEverything to the left of the tilde ~ is a logical expression to evaluate. Everything to the right of the tilde is the value to put if the logical expression evaluates to TRUE.\nThis can easily become more complex with the addition of other logical expressions and categorical levels to create.\nIf you have a categorical variable that needs further refinement (e.g. collapsing of multiple levels into one), check out the package forcats, which provides many functions for manipulating categorical (factor or character) variables.\n\n\n\nRenaming Variables\nCompared to mutate(), the function for renaming variables, rename(), is a breeze!\nrename(dataset, new_name = \"old_name\")\nThis is similar to variable assignment:\nnew_name &lt;- old_name\nExcept that quotes are always used when specifying the old variable name.\nExample:\n\nrename1 &lt;- rename(variety_trials, cultivar = \"variety\")\nhead(rename1, 3)\n\n                        trial rep cultivar     yield grain_protein test_weight\n1 SWIdahoCereals_H_S_PAR_2018   1 12SB0197  71.69333        9.8325        62.1\n2 SWIdahoCereals_H_S_PAR_2018   2 12SB0197 108.60301        9.6025        64.2\n3 SWIdahoCereals_H_S_PAR_2018   3 12SB0197  81.71237       11.2700        65.6\n\n\nAlso, you can use rename notation in select statements:\n\nrename2 &lt;- select(variety_trials, cultivar = \"variety\", yield, protein = \"grain_protein\")\n\nThis function selected the columns “variety”, “yield” and “grain_protein”, while renaming “variety to”cultivar” and “grain_protein” to “protein” - a handy shortcut.\n\n\nSplit up variables\nYou may encounter variables with information about multiple things. In agriculture, I see variables with values such as “Moscow_2021”, “Moscow_2022”, “StJohn_2021”, “StJohn_2022”. This variables is indicating multiple things - location and year in this exmample. This is a useful variable by itself, but a researcher might want to separate out location and year for other analytical purposes. The tidyr function separate() can do that.\nThe first column of “variety_trials” contains considerable information, all separated by an underscore:\n\nvariety_trials$trial[1]\n\n[1] \"SWIdahoCereals_H_S_PAR_2018\"\n\n\nThe first term is the program conducting the trial, the second is the crop grown, the third term is a location code, and the last term is the year. Let’s separate those terms into separate columns/variables.\nBefore running a separate() command, always check the variable to make sure it is structured as you expect.\nUse distinct() to determine the unique observations for the column “trial” in the the object “variety_trials”.\n\ndistinct(variety_trials, trial)\n\n                         trial\n1  SWIdahoCereals_H_S_PAR_2018\n2  SWIdahoCereals_H_S_WEI_2018\n3  SWIdahoCereals_H_W_PAR_2017\n4  SWIdahoCereals_H_W_PAR_2018\n5  SWIdahoCereals_H_W_WEI_2018\n6  SWIdahoCereals_HRS_PAR_2016\n7  SWIdahoCereals_HRS_PAR_2017\n8  SWIdahoCereals_HRS_PAR_2019\n9  SWIdahoCereals_HRS_PAR_2020\n10 SWIdahoCereals_HRW_PAR_2019\n11 SWIdahoCereals_HRW_PAR_2020\n12 SWIdahoCereals_HWS_PAR_2016\n13 SWIdahoCereals_HWS_PAR_2017\n14 SWIdahoCereals_HWS_PAR_2019\n15 SWIdahoCereals_HWS_PAR_2020\n16 SWIdahoCereals_HWW_PAR_2019\n17 SWIdahoCereals_HWW_PAR_2020\n18 SWIdahoCereals_SWS_PAR_2016\n19 SWIdahoCereals_SWS_PAR_2017\n20 SWIdahoCereals_SWS_PAR_2018\n21 SWIdahoCereals_SWS_PAR_2019\n22 SWIdahoCereals_SWS_PAR_2020\n23 SWIdahoCereals_SWS_WEI_2018\n24 SWIdahoCereals_SWW_PAR_2017\n25 SWIdahoCereals_SWW_PAR_2018\n26 SWIdahoCereals_SWW_PAR_2019\n27 SWIdahoCereals_SWW_PAR_2020\n28 SWIdahoCereals_SWW_WEI_2018\n\n\nThe variable variety_trials$trial uses an underscore to separate its components. However, one of the terms we mean to keep as one component does have an underscore inside of it, which will interpreted incorrectly as a term separator. The function gsub() can be used to fix this.\n\nvariety_trials$trial &lt;- gsub(pattern = \"_H_\", replacement = \"_H-\", x = variety_trials$trial)\n\nNow, separate() will split the variable into 4 components:\n\nvariety_trials &lt;- separate(variety_trials, trial, \n                           into = c(\"program\", \"crop\", \"location\", \"year\"),\n                           sep = \"_\", \n                           remove = FALSE)\n\nThe argument remove = FALSE indicates that we want to keep the input variable (“trial”). By default, it would be removed.\nThe opposite function is tidyr::unite() which will paste these variable together, separate by any character string you specify. unite() also can ignore missing data when pasting information together, avoiding this unfortunate result: “some.var_NA_NA_another.var”. You would get “some.var_another.var” instead.\n\n\nSorting a data set\nPrior to dplyr, sorting in R was a nightmare. Excel makes this so easy! Why was R torturing us??? But, dplyr has made this much easier:\narrange(dataset, variable1, variable2, ....)\nYou can sort on as many variables as you like! It will sort on the first variables listed and within that, the second variable listed, and so on.\nExample;\n\narrange1 &lt;- arrange(variety_trials, variety, yield)\narrange1\n\n                           trial        program crop location year rep\n1    SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   3\n2    SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   4\n3    SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   2\n4    SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   1\n5    SWIdahoCereals_HRW_PAR_2019 SWIdahoCereals  HRW      PAR 2019   2\n6    SWIdahoCereals_HRW_PAR_2019 SWIdahoCereals  HRW      PAR 2019   1\n7    SWIdahoCereals_HRW_PAR_2019 SWIdahoCereals  HRW      PAR 2019   3\n8    SWIdahoCereals_HRW_PAR_2019 SWIdahoCereals  HRW      PAR 2019   4\n9    SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   1\n10   SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   2\n11   SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   3\n12   SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   4\n13   SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   1\n14   SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   3\n15   SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   4\n16   SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   2\n17   SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   3\n18   SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   4\n19   SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   2\n20   SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   1\n21   SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   3\n22   SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   4\n23   SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   1\n24   SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   2\n25   SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   2\n26   SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   4\n27   SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   3\n28   SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   1\n29   SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   1\n30   SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   4\n31   SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   3\n32   SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   2\n33   SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   2\n34   SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   4\n35   SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   3\n36   SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   1\n37   SWIdahoCereals_SWS_PAR_2016 SWIdahoCereals  SWS      PAR 2016   2\n38   SWIdahoCereals_SWS_PAR_2016 SWIdahoCereals  SWS      PAR 2016   3\n39   SWIdahoCereals_SWS_PAR_2016 SWIdahoCereals  SWS      PAR 2016   4\n40   SWIdahoCereals_SWS_PAR_2016 SWIdahoCereals  SWS      PAR 2016   1\n41   SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   1\n42   SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   3\n43   SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   2\n44   SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   4\n45   SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   1\n46   SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   3\n47   SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   4\n48   SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   2\n49   SWIdahoCereals_HRS_PAR_2017 SWIdahoCereals  HRS      PAR 2017   1\n50   SWIdahoCereals_HRS_PAR_2017 SWIdahoCereals  HRS      PAR 2017   4\n51   SWIdahoCereals_HRS_PAR_2017 SWIdahoCereals  HRS      PAR 2017   2\n52   SWIdahoCereals_HRS_PAR_2017 SWIdahoCereals  HRS      PAR 2017   3\n53   SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   1\n54   SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   3\n55   SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   2\n56   SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   4\n57   SWIdahoCereals_HWS_PAR_2017 SWIdahoCereals  HWS      PAR 2017   4\n58   SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   1\n59   SWIdahoCereals_HWS_PAR_2019 SWIdahoCereals  HWS      PAR 2019   4\n60   SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   3\n61   SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   2\n62   SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   4\n63   SWIdahoCereals_HWS_PAR_2019 SWIdahoCereals  HWS      PAR 2019   3\n64   SWIdahoCereals_HWS_PAR_2019 SWIdahoCereals  HWS      PAR 2019   1\n65   SWIdahoCereals_HWS_PAR_2019 SWIdahoCereals  HWS      PAR 2019   2\n66   SWIdahoCereals_HWS_PAR_2017 SWIdahoCereals  HWS      PAR 2017   3\n67   SWIdahoCereals_HWS_PAR_2017 SWIdahoCereals  HWS      PAR 2017   2\n68   SWIdahoCereals_HWS_PAR_2017 SWIdahoCereals  HWS      PAR 2017   1\n69   SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   2\n70   SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   2\n71   SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   2\n72   SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   2\n73   SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   1\n74   SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   4\n75   SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   3\n76   SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   2\n77   SWIdahoCereals_SWS_PAR_2017 SWIdahoCereals  SWS      PAR 2017   1\n78   SWIdahoCereals_SWS_PAR_2017 SWIdahoCereals  SWS      PAR 2017   3\n79   SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   1\n80   SWIdahoCereals_SWS_PAR_2017 SWIdahoCereals  SWS      PAR 2017   2\n81   SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   3\n82   SWIdahoCereals_SWS_PAR_2017 SWIdahoCereals  SWS      PAR 2017   4\n83   SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   4\n84   SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   2\n85   SWIdahoCereals_HRS_PAR_2017 SWIdahoCereals  HRS      PAR 2017   4\n86   SWIdahoCereals_HRS_PAR_2017 SWIdahoCereals  HRS      PAR 2017   3\n87   SWIdahoCereals_HRS_PAR_2017 SWIdahoCereals  HRS      PAR 2017   2\n88   SWIdahoCereals_HRS_PAR_2017 SWIdahoCereals  HRS      PAR 2017   1\n89   SWIdahoCereals_HRW_PAR_2019 SWIdahoCereals  HRW      PAR 2019   2\n90   SWIdahoCereals_HRW_PAR_2019 SWIdahoCereals  HRW      PAR 2019   3\n91   SWIdahoCereals_HRW_PAR_2019 SWIdahoCereals  HRW      PAR 2019   1\n92   SWIdahoCereals_HRW_PAR_2019 SWIdahoCereals  HRW      PAR 2019   4\n93   SWIdahoCereals_H-W_WEI_2018 SWIdahoCereals  H-W      WEI 2018   1\n94   SWIdahoCereals_H-W_WEI_2018 SWIdahoCereals  H-W      WEI 2018   3\n95   SWIdahoCereals_H-W_WEI_2018 SWIdahoCereals  H-W      WEI 2018   2\n96   SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   3\n97   SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   1\n98   SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   2\n99   SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   4\n100  SWIdahoCereals_SWS_PAR_2020 SWIdahoCereals  SWS      PAR 2020   4\n101  SWIdahoCereals_SWS_PAR_2020 SWIdahoCereals  SWS      PAR 2020   2\n102  SWIdahoCereals_SWS_PAR_2020 SWIdahoCereals  SWS      PAR 2020   1\n103  SWIdahoCereals_SWS_PAR_2020 SWIdahoCereals  SWS      PAR 2020   3\n104  SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   4\n105  SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   2\n106  SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   1\n107  SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   3\n108  SWIdahoCereals_HRS_PAR_2020 SWIdahoCereals  HRS      PAR 2020   4\n109  SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   3\n110  SWIdahoCereals_HRS_PAR_2020 SWIdahoCereals  HRS      PAR 2020   2\n111  SWIdahoCereals_HRS_PAR_2020 SWIdahoCereals  HRS      PAR 2020   1\n112  SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   4\n113  SWIdahoCereals_HRS_PAR_2020 SWIdahoCereals  HRS      PAR 2020   3\n114  SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   2\n115  SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   1\n116  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   4\n117  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   1\n118  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   3\n119  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   2\n120  SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   1\n121  SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   2\n122  SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   4\n123  SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   3\n124  SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   1\n125  SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   3\n126  SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   2\n127  SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   4\n128  SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   4\n129  SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   3\n130  SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   1\n131  SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   2\n132  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   4\n133  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   1\n134  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   2\n135  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   3\n136  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   2\n137  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   3\n138  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   1\n139  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   2\n140  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   4\n141  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   4\n142  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   3\n143  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   1\n144  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   3\n145  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   2\n146  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   1\n147  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   4\n148  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   2\n149  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   1\n150  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   3\n151  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   4\n152  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   2\n153  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   1\n154  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   4\n155  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   3\n156  SWIdahoCereals_HWS_PAR_2020 SWIdahoCereals  HWS      PAR 2020   4\n157  SWIdahoCereals_HWS_PAR_2020 SWIdahoCereals  HWS      PAR 2020   2\n158  SWIdahoCereals_HWS_PAR_2020 SWIdahoCereals  HWS      PAR 2020   1\n159  SWIdahoCereals_HWS_PAR_2020 SWIdahoCereals  HWS      PAR 2020   3\n160  SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   3\n161  SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   2\n162  SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   1\n163  SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   4\n164  SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   1\n165  SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   2\n166  SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   3\n167  SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   4\n168  SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   1\n169  SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   3\n170  SWIdahoCereals_HWS_PAR_2020 SWIdahoCereals  HWS      PAR 2020   4\n171  SWIdahoCereals_HWS_PAR_2019 SWIdahoCereals  HWS      PAR 2019   4\n172  SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   2\n173  SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   4\n174  SWIdahoCereals_HWS_PAR_2020 SWIdahoCereals  HWS      PAR 2020   2\n175  SWIdahoCereals_HWS_PAR_2020 SWIdahoCereals  HWS      PAR 2020   3\n176  SWIdahoCereals_HWS_PAR_2019 SWIdahoCereals  HWS      PAR 2019   3\n177  SWIdahoCereals_HWS_PAR_2019 SWIdahoCereals  HWS      PAR 2019   2\n178  SWIdahoCereals_HWS_PAR_2020 SWIdahoCereals  HWS      PAR 2020   1\n179  SWIdahoCereals_HWS_PAR_2019 SWIdahoCereals  HWS      PAR 2019   1\n180  SWIdahoCereals_HWS_PAR_2017 SWIdahoCereals  HWS      PAR 2017   4\n181  SWIdahoCereals_HWS_PAR_2017 SWIdahoCereals  HWS      PAR 2017   2\n182  SWIdahoCereals_HWS_PAR_2017 SWIdahoCereals  HWS      PAR 2017   1\n183  SWIdahoCereals_HWS_PAR_2017 SWIdahoCereals  HWS      PAR 2017   3\n184  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   2\n185  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   1\n186  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   4\n187  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   3\n188  SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   1\n189  SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   2\n190  SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   3\n191  SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   4\n192  SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   1\n193  SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   3\n194  SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   4\n195  SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   2\n196  SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   2\n197  SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   3\n198  SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   4\n199  SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   1\n200  SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   3\n201  SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   4\n202  SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   1\n203  SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   2\n204  SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   3\n205  SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   2\n206  SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   4\n207  SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   1\n208  SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   4\n209  SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   3\n210  SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   2\n211  SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   1\n212  SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   3\n213  SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   1\n214  SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   2\n215  SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   4\n216  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   2\n217  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   4\n218  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   3\n219  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   1\n220  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   2\n221  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   3\n222  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   1\n223  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   1\n224  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   3\n225  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   4\n226  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   2\n227  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   4\n228  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   2\n229  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   3\n230  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   1\n231  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   3\n232  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   4\n233  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   2\n234  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   1\n235  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   3\n236  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   2\n237  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   1\n238  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   3\n239  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   1\n240  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   4\n241  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   2\n242  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   3\n243  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   2\n244  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   1\n245  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   3\n246  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   1\n247  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   2\n248  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   4\n249  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   3\n250  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   2\n251  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   3\n252  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   1\n253  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   2\n254  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   1\n255  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   4\n256  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   3\n257  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   1\n258  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   2\n259  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   2\n260  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   4\n261  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   1\n262  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   3\n263  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   4\n264  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   1\n265  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   3\n266  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   2\n267  SWIdahoCereals_HWS_PAR_2016 SWIdahoCereals  HWS      PAR 2016   2\n268  SWIdahoCereals_HWS_PAR_2016 SWIdahoCereals  HWS      PAR 2016   3\n269  SWIdahoCereals_HWS_PAR_2016 SWIdahoCereals  HWS      PAR 2016   4\n270  SWIdahoCereals_HWS_PAR_2016 SWIdahoCereals  HWS      PAR 2016   1\n271  SWIdahoCereals_HWS_PAR_2016 SWIdahoCereals  HWS      PAR 2016   3\n272  SWIdahoCereals_HWS_PAR_2017 SWIdahoCereals  HWS      PAR 2017   3\n273  SWIdahoCereals_HWS_PAR_2016 SWIdahoCereals  HWS      PAR 2016   4\n274  SWIdahoCereals_HWS_PAR_2016 SWIdahoCereals  HWS      PAR 2016   2\n275  SWIdahoCereals_HWS_PAR_2017 SWIdahoCereals  HWS      PAR 2017   4\n276  SWIdahoCereals_HWS_PAR_2016 SWIdahoCereals  HWS      PAR 2016   1\n277  SWIdahoCereals_HWS_PAR_2017 SWIdahoCereals  HWS      PAR 2017   2\n278  SWIdahoCereals_HWS_PAR_2017 SWIdahoCereals  HWS      PAR 2017   1\n279  SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   3\n280  SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   3\n281  SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   3\n282  SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   3\n283  SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   3\n284  SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   4\n285  SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   1\n286  SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   2\n287  SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   4\n288  SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   3\n289  SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   1\n290  SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   2\n291  SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   2\n292  SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   2\n293  SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   2\n294  SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   2\n295  SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   3\n296  SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   1\n297  SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   4\n298  SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   2\n299  SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   4\n300  SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   4\n301  SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   4\n302  SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   4\n303  SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   3\n304  SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   1\n305  SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   2\n306  SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   3\n307  SWIdahoCereals_SWS_PAR_2020 SWIdahoCereals  SWS      PAR 2020   2\n308  SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   4\n309  SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   4\n310  SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   1\n311  SWIdahoCereals_SWS_PAR_2020 SWIdahoCereals  SWS      PAR 2020   1\n312  SWIdahoCereals_SWS_PAR_2020 SWIdahoCereals  SWS      PAR 2020   3\n313  SWIdahoCereals_SWS_PAR_2020 SWIdahoCereals  SWS      PAR 2020   4\n314  SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   2\n315  SWIdahoCereals_H-W_WEI_2018 SWIdahoCereals  H-W      WEI 2018   1\n316  SWIdahoCereals_H-W_WEI_2018 SWIdahoCereals  H-W      WEI 2018   2\n317  SWIdahoCereals_H-W_WEI_2018 SWIdahoCereals  H-W      WEI 2018   3\n318  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   3\n319  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   1\n320  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   4\n321  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   2\n322  SWIdahoCereals_HWW_PAR_2019 SWIdahoCereals  HWW      PAR 2019   3\n323  SWIdahoCereals_HWW_PAR_2019 SWIdahoCereals  HWW      PAR 2019   1\n324  SWIdahoCereals_HWW_PAR_2019 SWIdahoCereals  HWW      PAR 2019   2\n325  SWIdahoCereals_HWW_PAR_2019 SWIdahoCereals  HWW      PAR 2019   4\n326  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   2\n327  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   1\n328  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   4\n329  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   3\n330  SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   1\n331  SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   2\n332  SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   3\n333  SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   4\n334  SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   1\n335  SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   3\n336  SWIdahoCereals_HWS_PAR_2016 SWIdahoCereals  HWS      PAR 2016   4\n337  SWIdahoCereals_HWS_PAR_2016 SWIdahoCereals  HWS      PAR 2016   3\n338  SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   2\n339  SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   4\n340  SWIdahoCereals_HWS_PAR_2016 SWIdahoCereals  HWS      PAR 2016   1\n341  SWIdahoCereals_HWS_PAR_2016 SWIdahoCereals  HWS      PAR 2016   2\n342  SWIdahoCereals_HWS_PAR_2017 SWIdahoCereals  HWS      PAR 2017   4\n343  SWIdahoCereals_HWS_PAR_2017 SWIdahoCereals  HWS      PAR 2017   3\n344  SWIdahoCereals_HWS_PAR_2017 SWIdahoCereals  HWS      PAR 2017   2\n345  SWIdahoCereals_HWS_PAR_2017 SWIdahoCereals  HWS      PAR 2017   1\n346  SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   1\n347  SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   2\n348  SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   3\n349  SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   4\n350  SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   1\n351  SWIdahoCereals_HRS_PAR_2020 SWIdahoCereals  HRS      PAR 2020   2\n352  SWIdahoCereals_HRS_PAR_2020 SWIdahoCereals  HRS      PAR 2020   4\n353  SWIdahoCereals_HRS_PAR_2020 SWIdahoCereals  HRS      PAR 2020   1\n354  SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   4\n355  SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   2\n356  SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   3\n357  SWIdahoCereals_HRS_PAR_2020 SWIdahoCereals  HRS      PAR 2020   3\n358  SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   3\n359  SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   2\n360  SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   4\n361  SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   1\n362  SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   2\n363  SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   1\n364  SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   3\n365  SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   4\n366  SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   1\n367  SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   3\n368  SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   2\n369  SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   4\n370  SWIdahoCereals_H-W_WEI_2018 SWIdahoCereals  H-W      WEI 2018   2\n371  SWIdahoCereals_H-W_WEI_2018 SWIdahoCereals  H-W      WEI 2018   3\n372  SWIdahoCereals_H-W_WEI_2018 SWIdahoCereals  H-W      WEI 2018   1\n373  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   3\n374  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   1\n375  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   4\n376  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   2\n377  SWIdahoCereals_HWW_PAR_2019 SWIdahoCereals  HWW      PAR 2019   2\n378  SWIdahoCereals_HWW_PAR_2019 SWIdahoCereals  HWW      PAR 2019   4\n379  SWIdahoCereals_HWW_PAR_2019 SWIdahoCereals  HWW      PAR 2019   1\n380  SWIdahoCereals_HWW_PAR_2019 SWIdahoCereals  HWW      PAR 2019   3\n381  SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   3\n382  SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   1\n383  SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   4\n384  SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   2\n385  SWIdahoCereals_HRS_PAR_2020 SWIdahoCereals  HRS      PAR 2020   4\n386  SWIdahoCereals_HRS_PAR_2020 SWIdahoCereals  HRS      PAR 2020   1\n387  SWIdahoCereals_HRS_PAR_2020 SWIdahoCereals  HRS      PAR 2020   2\n388  SWIdahoCereals_HRS_PAR_2020 SWIdahoCereals  HRS      PAR 2020   3\n389  SWIdahoCereals_SWS_PAR_2020 SWIdahoCereals  SWS      PAR 2020   2\n390  SWIdahoCereals_SWS_PAR_2020 SWIdahoCereals  SWS      PAR 2020   3\n391  SWIdahoCereals_SWS_PAR_2020 SWIdahoCereals  SWS      PAR 2020   4\n392  SWIdahoCereals_SWS_PAR_2020 SWIdahoCereals  SWS      PAR 2020   1\n393  SWIdahoCereals_H-W_WEI_2018 SWIdahoCereals  H-W      WEI 2018   2\n394  SWIdahoCereals_H-W_WEI_2018 SWIdahoCereals  H-W      WEI 2018   3\n395  SWIdahoCereals_H-W_WEI_2018 SWIdahoCereals  H-W      WEI 2018   1\n396  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   4\n397  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   3\n398  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   1\n399  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   2\n400  SWIdahoCereals_HWW_PAR_2019 SWIdahoCereals  HWW      PAR 2019   3\n401  SWIdahoCereals_HWW_PAR_2019 SWIdahoCereals  HWW      PAR 2019   2\n402  SWIdahoCereals_HWW_PAR_2019 SWIdahoCereals  HWW      PAR 2019   1\n403  SWIdahoCereals_HWW_PAR_2019 SWIdahoCereals  HWW      PAR 2019   4\n404  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   3\n405  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   2\n406  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   1\n407  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   4\n408  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   2\n409  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   3\n410  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   1\n411  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   4\n412  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   3\n413  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   1\n414  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   2\n415  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   3\n416  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   2\n417  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   4\n418  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   1\n419  SWIdahoCereals_HWS_PAR_2020 SWIdahoCereals  HWS      PAR 2020   4\n420  SWIdahoCereals_HWS_PAR_2020 SWIdahoCereals  HWS      PAR 2020   2\n421  SWIdahoCereals_HWS_PAR_2020 SWIdahoCereals  HWS      PAR 2020   3\n422  SWIdahoCereals_HWS_PAR_2020 SWIdahoCereals  HWS      PAR 2020   1\n423  SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   2\n424  SWIdahoCereals_HRS_PAR_2020 SWIdahoCereals  HRS      PAR 2020   3\n425  SWIdahoCereals_HRS_PAR_2020 SWIdahoCereals  HRS      PAR 2020   1\n426  SWIdahoCereals_HRS_PAR_2020 SWIdahoCereals  HRS      PAR 2020   4\n427  SWIdahoCereals_HRS_PAR_2020 SWIdahoCereals  HRS      PAR 2020   2\n428  SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   3\n429  SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   4\n430  SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   1\n431  SWIdahoCereals_HWW_PAR_2019 SWIdahoCereals  HWW      PAR 2019   3\n432  SWIdahoCereals_HWW_PAR_2019 SWIdahoCereals  HWW      PAR 2019   1\n433  SWIdahoCereals_HWW_PAR_2019 SWIdahoCereals  HWW      PAR 2019   2\n434  SWIdahoCereals_HWW_PAR_2019 SWIdahoCereals  HWW      PAR 2019   4\n435  SWIdahoCereals_HWW_PAR_2020 SWIdahoCereals  HWW      PAR 2020   4\n436  SWIdahoCereals_HWW_PAR_2020 SWIdahoCereals  HWW      PAR 2020   3\n437  SWIdahoCereals_HWW_PAR_2020 SWIdahoCereals  HWW      PAR 2020   2\n438  SWIdahoCereals_HWW_PAR_2020 SWIdahoCereals  HWW      PAR 2020   1\n439  SWIdahoCereals_HWW_PAR_2020 SWIdahoCereals  HWW      PAR 2020   2\n440  SWIdahoCereals_HWW_PAR_2020 SWIdahoCereals  HWW      PAR 2020   3\n441  SWIdahoCereals_HWW_PAR_2020 SWIdahoCereals  HWW      PAR 2020   4\n442  SWIdahoCereals_HWW_PAR_2020 SWIdahoCereals  HWW      PAR 2020   1\n443  SWIdahoCereals_HWW_PAR_2020 SWIdahoCereals  HWW      PAR 2020   4\n444  SWIdahoCereals_HWW_PAR_2020 SWIdahoCereals  HWW      PAR 2020   2\n445  SWIdahoCereals_HWW_PAR_2020 SWIdahoCereals  HWW      PAR 2020   3\n446  SWIdahoCereals_HWW_PAR_2020 SWIdahoCereals  HWW      PAR 2020   1\n447  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   2\n448  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   1\n449  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   4\n450  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   3\n451  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   4\n452  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   1\n453  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   2\n454  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   3\n455  SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   1\n456  SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   2\n457  SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   3\n458  SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   4\n459  SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   1\n460  SWIdahoCereals_HRS_PAR_2020 SWIdahoCereals  HRS      PAR 2020   2\n461  SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   3\n462  SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   4\n463  SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   2\n464  SWIdahoCereals_HRS_PAR_2020 SWIdahoCereals  HRS      PAR 2020   4\n465  SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   3\n466  SWIdahoCereals_HRS_PAR_2020 SWIdahoCereals  HRS      PAR 2020   1\n467  SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   1\n468  SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   2\n469  SWIdahoCereals_HRS_PAR_2020 SWIdahoCereals  HRS      PAR 2020   3\n470  SWIdahoCereals_HRS_PAR_2017 SWIdahoCereals  HRS      PAR 2017   3\n471  SWIdahoCereals_HRS_PAR_2017 SWIdahoCereals  HRS      PAR 2017   2\n472  SWIdahoCereals_HRS_PAR_2017 SWIdahoCereals  HRS      PAR 2017   4\n473  SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   4\n474  SWIdahoCereals_HRS_PAR_2017 SWIdahoCereals  HRS      PAR 2017   1\n475  SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   1\n476  SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   2\n477  SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   4\n478  SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   3\n479  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   4\n480  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   3\n481  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   2\n482  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   1\n483  SWIdahoCereals_H-W_WEI_2018 SWIdahoCereals  H-W      WEI 2018   2\n484  SWIdahoCereals_H-W_WEI_2018 SWIdahoCereals  H-W      WEI 2018   3\n485  SWIdahoCereals_H-W_WEI_2018 SWIdahoCereals  H-W      WEI 2018   1\n486  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   3\n487  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   2\n488  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   1\n489  SWIdahoCereals_HRW_PAR_2019 SWIdahoCereals  HRW      PAR 2019   2\n490  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   4\n491  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   2\n492  SWIdahoCereals_HRW_PAR_2019 SWIdahoCereals  HRW      PAR 2019   3\n493  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   3\n494  SWIdahoCereals_HRW_PAR_2019 SWIdahoCereals  HRW      PAR 2019   1\n495  SWIdahoCereals_HRW_PAR_2019 SWIdahoCereals  HRW      PAR 2019   4\n496  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   1\n497  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   4\n498  SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   1\n499  SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   4\n500  SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   2\n501  SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   3\n502  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   2\n503  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   4\n504  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   3\n505  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   1\n506  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   3\n507  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   2\n508  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   1\n509  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   4\n510  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   1\n511  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   2\n512  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   3\n513  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   3\n514  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   4\n515  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   1\n516  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   2\n517  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   1\n518  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   3\n519  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   4\n520  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   2\n521  SWIdahoCereals_HWS_PAR_2016 SWIdahoCereals  HWS      PAR 2016   3\n522  SWIdahoCereals_HWS_PAR_2016 SWIdahoCereals  HWS      PAR 2016   1\n523  SWIdahoCereals_HWS_PAR_2016 SWIdahoCereals  HWS      PAR 2016   2\n524  SWIdahoCereals_HWS_PAR_2016 SWIdahoCereals  HWS      PAR 2016   4\n525  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   2\n526  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   1\n527  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   3\n528  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   4\n529  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   2\n530  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   3\n531  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   4\n532  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   1\n533  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   2\n534  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   4\n535  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   3\n536  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   1\n537  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   1\n538  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   2\n539  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   4\n540  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   3\n541  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   3\n542  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   1\n543  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   4\n544  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   4\n545  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   2\n546  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   1\n547  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   3\n548  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   2\n549  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   1\n550  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   2\n551  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   4\n552  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   3\n553  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   2\n554  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   3\n555  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   1\n556  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   4\n557  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   2\n558  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   1\n559  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   3\n560  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   4\n561  SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   1\n562  SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   3\n563  SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   2\n564  SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   4\n565  SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   1\n566  SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   1\n567  SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   3\n568  SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   4\n569  SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   3\n570  SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   2\n571  SWIdahoCereals_HRS_PAR_2017 SWIdahoCereals  HRS      PAR 2017   3\n572  SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   2\n573  SWIdahoCereals_HRS_PAR_2017 SWIdahoCereals  HRS      PAR 2017   4\n574  SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   4\n575  SWIdahoCereals_HRS_PAR_2017 SWIdahoCereals  HRS      PAR 2017   2\n576  SWIdahoCereals_HRS_PAR_2017 SWIdahoCereals  HRS      PAR 2017   1\n577  SWIdahoCereals_H-W_WEI_2018 SWIdahoCereals  H-W      WEI 2018   3\n578  SWIdahoCereals_H-W_WEI_2018 SWIdahoCereals  H-W      WEI 2018   2\n579  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   2\n580  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   4\n581  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   3\n582  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   1\n583  SWIdahoCereals_H-W_WEI_2018 SWIdahoCereals  H-W      WEI 2018   1\n584  SWIdahoCereals_HRW_PAR_2019 SWIdahoCereals  HRW      PAR 2019   3\n585  SWIdahoCereals_HRW_PAR_2019 SWIdahoCereals  HRW      PAR 2019   2\n586  SWIdahoCereals_HRW_PAR_2019 SWIdahoCereals  HRW      PAR 2019   1\n587  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   2\n588  SWIdahoCereals_HRW_PAR_2019 SWIdahoCereals  HRW      PAR 2019   4\n589  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   1\n590  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   4\n591  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   3\n592  SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   1\n593  SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   4\n594  SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   3\n595  SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   2\n596  SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   1\n597  SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   2\n598  SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   3\n599  SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   4\n600  SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   1\n601  SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   3\n602  SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   4\n603  SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   2\n604  SWIdahoCereals_HRW_PAR_2019 SWIdahoCereals  HRW      PAR 2019   3\n605  SWIdahoCereals_HRW_PAR_2019 SWIdahoCereals  HRW      PAR 2019   4\n606  SWIdahoCereals_HRW_PAR_2019 SWIdahoCereals  HRW      PAR 2019   2\n607  SWIdahoCereals_HRW_PAR_2019 SWIdahoCereals  HRW      PAR 2019   1\n608  SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   1\n609  SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   2\n610  SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   4\n611  SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   3\n612  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   1\n613  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   3\n614  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   2\n615  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   4\n616  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   4\n617  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   2\n618  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   1\n619  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   3\n620  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   4\n621  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   1\n622  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   3\n623  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   2\n624  SWIdahoCereals_HWS_PAR_2017 SWIdahoCereals  HWS      PAR 2017   3\n625  SWIdahoCereals_HWS_PAR_2016 SWIdahoCereals  HWS      PAR 2016   1\n626  SWIdahoCereals_HWS_PAR_2016 SWIdahoCereals  HWS      PAR 2016   4\n627  SWIdahoCereals_HWS_PAR_2016 SWIdahoCereals  HWS      PAR 2016   2\n628  SWIdahoCereals_HWS_PAR_2016 SWIdahoCereals  HWS      PAR 2016   3\n629  SWIdahoCereals_HWS_PAR_2017 SWIdahoCereals  HWS      PAR 2017   2\n630  SWIdahoCereals_HWS_PAR_2017 SWIdahoCereals  HWS      PAR 2017   4\n631  SWIdahoCereals_HWS_PAR_2017 SWIdahoCereals  HWS      PAR 2017   1\n632  SWIdahoCereals_HWW_PAR_2019 SWIdahoCereals  HWW      PAR 2019   3\n633  SWIdahoCereals_HWW_PAR_2019 SWIdahoCereals  HWW      PAR 2019   2\n634  SWIdahoCereals_HWW_PAR_2019 SWIdahoCereals  HWW      PAR 2019   4\n635  SWIdahoCereals_HWW_PAR_2019 SWIdahoCereals  HWW      PAR 2019   1\n636  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   3\n637  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   2\n638  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   1\n639  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   2\n640  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   4\n641  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   1\n642  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   3\n643  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   3\n644  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   2\n645  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   1\n646  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   2\n647  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   3\n648  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   4\n649  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   1\n650  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   3\n651  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   1\n652  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   4\n653  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   2\n654  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   3\n655  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   2\n656  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   1\n657  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   3\n658  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   2\n659  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   1\n660  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   4\n661  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   3\n662  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   2\n663  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   1\n664  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   2\n665  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   3\n666  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   1\n667  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   4\n668  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   2\n669  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   1\n670  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   4\n671  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   3\n672  SWIdahoCereals_H-W_WEI_2018 SWIdahoCereals  H-W      WEI 2018   3\n673  SWIdahoCereals_H-W_WEI_2018 SWIdahoCereals  H-W      WEI 2018   2\n674  SWIdahoCereals_H-W_WEI_2018 SWIdahoCereals  H-W      WEI 2018   1\n675  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   2\n676  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   3\n677  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   1\n678  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   4\n679  SWIdahoCereals_HRW_PAR_2019 SWIdahoCereals  HRW      PAR 2019   2\n680  SWIdahoCereals_HRW_PAR_2019 SWIdahoCereals  HRW      PAR 2019   3\n681  SWIdahoCereals_HRW_PAR_2019 SWIdahoCereals  HRW      PAR 2019   1\n682  SWIdahoCereals_HRW_PAR_2019 SWIdahoCereals  HRW      PAR 2019   4\n683  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   2\n684  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   3\n685  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   1\n686  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   4\n687  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   2\n688  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   1\n689  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   3\n690  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   4\n691  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   2\n692  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   1\n693  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   3\n694  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   4\n695  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   2\n696  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   1\n697  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   4\n698  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   3\n699  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   2\n700  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   1\n701  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   3\n702  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   4\n703  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   2\n704  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   2\n705  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   3\n706  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   4\n707  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   1\n708  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   4\n709  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   3\n710  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   1\n711  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   2\n712  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   4\n713  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   1\n714  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   3\n715  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   1\n716  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   4\n717  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   2\n718  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   3\n719  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   1\n720  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   2\n721  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   3\n722  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   4\n723  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   2\n724  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   3\n725  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   4\n726  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   1\n727  SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   1\n728  SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   1\n729  SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   1\n730  SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   1\n731  SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   4\n732  SWIdahoCereals_SWS_PAR_2020 SWIdahoCereals  SWS      PAR 2020   2\n733  SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   3\n734  SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   3\n735  SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   1\n736  SWIdahoCereals_SWS_PAR_2020 SWIdahoCereals  SWS      PAR 2020   3\n737  SWIdahoCereals_SWS_PAR_2020 SWIdahoCereals  SWS      PAR 2020   4\n738  SWIdahoCereals_SWS_PAR_2020 SWIdahoCereals  SWS      PAR 2020   1\n739  SWIdahoCereals_SWS_PAR_2016 SWIdahoCereals  SWS      PAR 2016   2\n740  SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   4\n741  SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   1\n742  SWIdahoCereals_SWS_PAR_2016 SWIdahoCereals  SWS      PAR 2016   4\n743  SWIdahoCereals_SWS_PAR_2017 SWIdahoCereals  SWS      PAR 2017   4\n744  SWIdahoCereals_SWS_PAR_2017 SWIdahoCereals  SWS      PAR 2017   1\n745  SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   2\n746  SWIdahoCereals_SWS_PAR_2016 SWIdahoCereals  SWS      PAR 2016   3\n747  SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   2\n748  SWIdahoCereals_SWS_PAR_2017 SWIdahoCereals  SWS      PAR 2017   2\n749  SWIdahoCereals_SWS_PAR_2016 SWIdahoCereals  SWS      PAR 2016   1\n750  SWIdahoCereals_SWS_PAR_2017 SWIdahoCereals  SWS      PAR 2017   3\n751  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   1\n752  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   3\n753  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   4\n754  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   2\n755  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   1\n756  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   3\n757  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   2\n758  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   4\n759  SWIdahoCereals_HWW_PAR_2020 SWIdahoCereals  HWW      PAR 2020   4\n760  SWIdahoCereals_HWW_PAR_2020 SWIdahoCereals  HWW      PAR 2020   2\n761  SWIdahoCereals_HWW_PAR_2020 SWIdahoCereals  HWW      PAR 2020   3\n762  SWIdahoCereals_HWW_PAR_2020 SWIdahoCereals  HWW      PAR 2020   1\n763  SWIdahoCereals_H-W_WEI_2018 SWIdahoCereals  H-W      WEI 2018   3\n764  SWIdahoCereals_H-W_WEI_2018 SWIdahoCereals  H-W      WEI 2018   2\n765  SWIdahoCereals_H-W_WEI_2018 SWIdahoCereals  H-W      WEI 2018   1\n766  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   1\n767  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   3\n768  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   4\n769  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   2\n770  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   2\n771  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   1\n772  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   3\n773  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   4\n774  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   4\n775  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   1\n776  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   2\n777  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   3\n778  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   1\n779  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   2\n780  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   3\n781  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   4\n782  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   3\n783  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   2\n784  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   1\n785  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   4\n786  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   3\n787  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   4\n788  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   2\n789  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   2\n790  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   3\n791  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   1\n792  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   1\n793  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   3\n794  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   2\n795  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   1\n796  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   1\n797  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   2\n798  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   1\n799  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   4\n800  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   3\n801  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   4\n802  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   2\n803  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   3\n804  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   4\n805  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   2\n806  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   3\n807  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   4\n808  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   2\n809  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   3\n810  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   1\n811  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   1\n812  SWIdahoCereals_HWW_PAR_2019 SWIdahoCereals  HWW      PAR 2019   3\n813  SWIdahoCereals_HWW_PAR_2019 SWIdahoCereals  HWW      PAR 2019   2\n814  SWIdahoCereals_HWW_PAR_2019 SWIdahoCereals  HWW      PAR 2019   1\n815  SWIdahoCereals_HWW_PAR_2019 SWIdahoCereals  HWW      PAR 2019   4\n816  SWIdahoCereals_HWW_PAR_2020 SWIdahoCereals  HWW      PAR 2020   4\n817  SWIdahoCereals_HWW_PAR_2020 SWIdahoCereals  HWW      PAR 2020   2\n818  SWIdahoCereals_HWW_PAR_2020 SWIdahoCereals  HWW      PAR 2020   1\n819  SWIdahoCereals_HWW_PAR_2020 SWIdahoCereals  HWW      PAR 2020   3\n820  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   2\n821  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   3\n822  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   2\n823  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   1\n824  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   3\n825  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   4\n826  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   1\n827  SWIdahoCereals_H-W_WEI_2018 SWIdahoCereals  H-W      WEI 2018   3\n828  SWIdahoCereals_H-W_WEI_2018 SWIdahoCereals  H-W      WEI 2018   2\n829  SWIdahoCereals_H-W_WEI_2018 SWIdahoCereals  H-W      WEI 2018   1\n830  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   4\n831  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   2\n832  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   3\n833  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   1\n834  SWIdahoCereals_HWW_PAR_2019 SWIdahoCereals  HWW      PAR 2019   3\n835  SWIdahoCereals_HWW_PAR_2019 SWIdahoCereals  HWW      PAR 2019   2\n836  SWIdahoCereals_HWW_PAR_2019 SWIdahoCereals  HWW      PAR 2019   1\n837  SWIdahoCereals_HWW_PAR_2019 SWIdahoCereals  HWW      PAR 2019   4\n838  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   4\n839  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   2\n840  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   1\n841  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   3\n842  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   2\n843  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   1\n844  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   4\n845  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   3\n846  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   1\n847  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   2\n848  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   4\n849  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   3\n850  SWIdahoCereals_H-W_WEI_2018 SWIdahoCereals  H-W      WEI 2018   2\n851  SWIdahoCereals_H-W_WEI_2018 SWIdahoCereals  H-W      WEI 2018   1\n852  SWIdahoCereals_H-W_WEI_2018 SWIdahoCereals  H-W      WEI 2018   3\n853  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   3\n854  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   4\n855  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   2\n856  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   1\n857  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   3\n858  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   2\n859  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   1\n860  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   3\n861  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   1\n862  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   4\n863  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   2\n864  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   1\n865  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   4\n866  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   2\n867  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   1\n868  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   2\n869  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   3\n870  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   3\n871  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   4\n872  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   2\n873  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   1\n874  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   4\n875  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   3\n876  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   3\n877  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   2\n878  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   4\n879  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   2\n880  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   1\n881  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   3\n882  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   1\n883  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   3\n884  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   1\n885  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   4\n886  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   2\n887  SWIdahoCereals_H-W_WEI_2018 SWIdahoCereals  H-W      WEI 2018   3\n888  SWIdahoCereals_H-W_WEI_2018 SWIdahoCereals  H-W      WEI 2018   2\n889  SWIdahoCereals_H-W_WEI_2018 SWIdahoCereals  H-W      WEI 2018   1\n890  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   3\n891  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   2\n892  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   1\n893  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   1\n894  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   4\n895  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   2\n896  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   3\n897  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   4\n898  SWIdahoCereals_H-W_WEI_2018 SWIdahoCereals  H-W      WEI 2018   1\n899  SWIdahoCereals_H-W_WEI_2018 SWIdahoCereals  H-W      WEI 2018   2\n900  SWIdahoCereals_H-W_WEI_2018 SWIdahoCereals  H-W      WEI 2018   3\n901  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   1\n902  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   3\n903  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   4\n904  SWIdahoCereals_HWW_PAR_2019 SWIdahoCereals  HWW      PAR 2019   2\n905  SWIdahoCereals_HWW_PAR_2019 SWIdahoCereals  HWW      PAR 2019   1\n906  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   2\n907  SWIdahoCereals_HWW_PAR_2019 SWIdahoCereals  HWW      PAR 2019   3\n908  SWIdahoCereals_HWW_PAR_2019 SWIdahoCereals  HWW      PAR 2019   4\n909  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   2\n910  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   1\n911  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   3\n912  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   4\n913  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   2\n914  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   4\n915  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   3\n916  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   1\n917  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   2\n918  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   4\n919  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   1\n920  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   3\n921  SWIdahoCereals_HWW_PAR_2020 SWIdahoCereals  HWW      PAR 2020   2\n922  SWIdahoCereals_HWW_PAR_2020 SWIdahoCereals  HWW      PAR 2020   4\n923  SWIdahoCereals_HWW_PAR_2020 SWIdahoCereals  HWW      PAR 2020   1\n924  SWIdahoCereals_HWW_PAR_2020 SWIdahoCereals  HWW      PAR 2020   3\n925  SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   3\n926  SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   1\n927  SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   2\n928  SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   4\n929  SWIdahoCereals_HWW_PAR_2020 SWIdahoCereals  HWW      PAR 2020   2\n930  SWIdahoCereals_HWW_PAR_2020 SWIdahoCereals  HWW      PAR 2020   1\n931  SWIdahoCereals_HWW_PAR_2020 SWIdahoCereals  HWW      PAR 2020   3\n932  SWIdahoCereals_HWW_PAR_2020 SWIdahoCereals  HWW      PAR 2020   4\n933  SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   1\n934  SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   2\n935  SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   3\n936  SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   4\n937  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   3\n938  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   2\n939  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   1\n940  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   1\n941  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   3\n942  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   2\n943  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   2\n944  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   4\n945  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   1\n946  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   3\n947  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   4\n948  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   3\n949  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   2\n950  SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   1\n951  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   4\n952  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   2\n953  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   1\n954  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   3\n955  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   1\n956  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   2\n957  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   4\n958  SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   3\n959  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   4\n960  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   1\n961  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   2\n962  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   3\n963  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   2\n964  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   1\n965  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   4\n966  SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   3\n967  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   1\n968  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   2\n969  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   3\n970  SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   4\n971  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   3\n972  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   4\n973  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   2\n974  SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   1\n975  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   4\n976  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   2\n977  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   4\n978  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   3\n979  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   2\n980  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   1\n981  SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   3\n982  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   1\n983  SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   3\n984  SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   3\n985  SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   3\n986  SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   3\n987  SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   3\n988  SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   1\n989  SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   4\n990  SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   3\n991  SWIdahoCereals_SWS_PAR_2020 SWIdahoCereals  SWS      PAR 2020   3\n992  SWIdahoCereals_SWS_PAR_2020 SWIdahoCereals  SWS      PAR 2020   2\n993  SWIdahoCereals_SWS_PAR_2020 SWIdahoCereals  SWS      PAR 2020   1\n994  SWIdahoCereals_SWS_PAR_2020 SWIdahoCereals  SWS      PAR 2020   4\n995  SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   2\n996  SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   2\n997  SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   1\n998  SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   4\n999  SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   2\n1000 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   3\n1001 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   4\n1002 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   1\n1003 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   3\n1004 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   4\n1005 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   1\n1006 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   2\n1007 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   2\n1008 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   4\n1009 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   1\n1010 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   3\n1011 SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   3\n1012 SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   2\n1013 SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   1\n1014 SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   4\n1015 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   1\n1016 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   3\n1017 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   2\n1018 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   4\n1019 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   3\n1020 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   4\n1021 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   1\n1022 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   2\n1023 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   2\n1024 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   3\n1025 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   4\n1026 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   1\n1027 SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   2\n1028 SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   3\n1029 SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   1\n1030 SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   4\n1031 SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   2\n1032 SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   1\n1033 SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   4\n1034 SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   3\n1035 SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   1\n1036 SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   2\n1037 SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   3\n1038 SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   4\n1039 SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   1\n1040 SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   4\n1041 SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   1\n1042 SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   2\n1043 SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   3\n1044 SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   1\n1045 SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   3\n1046 SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   2\n1047 SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   4\n1048 SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   2\n1049 SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   3\n1050 SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   4\n1051 SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   1\n1052 SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   2\n1053 SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   4\n1054 SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   3\n1055 SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   1\n1056 SWIdahoCereals_HRS_PAR_2020 SWIdahoCereals  HRS      PAR 2020   4\n1057 SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   3\n1058 SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   2\n1059 SWIdahoCereals_HRS_PAR_2020 SWIdahoCereals  HRS      PAR 2020   3\n1060 SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   2\n1061 SWIdahoCereals_HRS_PAR_2020 SWIdahoCereals  HRS      PAR 2020   1\n1062 SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   4\n1063 SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   1\n1064 SWIdahoCereals_HRS_PAR_2020 SWIdahoCereals  HRS      PAR 2020   2\n1065 SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   3\n1066 SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   4\n1067 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   3\n1068 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   4\n1069 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   2\n1070 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   1\n1071 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   2\n1072 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   1\n1073 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   4\n1074 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   3\n1075 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   2\n1076 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   4\n1077 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   3\n1078 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   1\n1079 SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   4\n1080 SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   4\n1081 SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   4\n1082 SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   4\n1083 SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   1\n1084 SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   3\n1085 SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   4\n1086 SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   2\n1087 SWIdahoCereals_HWS_PAR_2019 SWIdahoCereals  HWS      PAR 2019   2\n1088 SWIdahoCereals_HWS_PAR_2019 SWIdahoCereals  HWS      PAR 2019   4\n1089 SWIdahoCereals_HWS_PAR_2019 SWIdahoCereals  HWS      PAR 2019   3\n1090 SWIdahoCereals_HWS_PAR_2016 SWIdahoCereals  HWS      PAR 2016   4\n1091 SWIdahoCereals_HWS_PAR_2016 SWIdahoCereals  HWS      PAR 2016   2\n1092 SWIdahoCereals_HWS_PAR_2016 SWIdahoCereals  HWS      PAR 2016   1\n1093 SWIdahoCereals_HWS_PAR_2016 SWIdahoCereals  HWS      PAR 2016   3\n1094 SWIdahoCereals_HWS_PAR_2019 SWIdahoCereals  HWS      PAR 2019   1\n1095 SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   2\n1096 SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   1\n1097 SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   3\n1098 SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   4\n1099 SWIdahoCereals_SWS_PAR_2016 SWIdahoCereals  SWS      PAR 2016   2\n1100 SWIdahoCereals_SWS_PAR_2016 SWIdahoCereals  SWS      PAR 2016   3\n1101 SWIdahoCereals_SWS_PAR_2016 SWIdahoCereals  SWS      PAR 2016   4\n1102 SWIdahoCereals_SWS_PAR_2016 SWIdahoCereals  SWS      PAR 2016   1\n1103 SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   4\n1104 SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   1\n1105 SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   3\n1106 SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   2\n1107 SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   4\n1108 SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   4\n1109 SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   4\n1110 SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   4\n1111 SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   4\n1112 SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   1\n1113 SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   1\n1114 SWIdahoCereals_SWS_PAR_2020 SWIdahoCereals  SWS      PAR 2020   2\n1115 SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   3\n1116 SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   2\n1117 SWIdahoCereals_SWS_PAR_2020 SWIdahoCereals  SWS      PAR 2020   4\n1118 SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   4\n1119 SWIdahoCereals_SWS_PAR_2016 SWIdahoCereals  SWS      PAR 2016   3\n1120 SWIdahoCereals_SWS_PAR_2020 SWIdahoCereals  SWS      PAR 2020   1\n1121 SWIdahoCereals_SWS_PAR_2020 SWIdahoCereals  SWS      PAR 2020   3\n1122 SWIdahoCereals_SWS_PAR_2016 SWIdahoCereals  SWS      PAR 2016   2\n1123 SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   2\n1124 SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   3\n1125 SWIdahoCereals_SWS_PAR_2017 SWIdahoCereals  SWS      PAR 2017   1\n1126 SWIdahoCereals_SWS_PAR_2016 SWIdahoCereals  SWS      PAR 2016   4\n1127 SWIdahoCereals_SWS_PAR_2017 SWIdahoCereals  SWS      PAR 2017   3\n1128 SWIdahoCereals_SWS_PAR_2017 SWIdahoCereals  SWS      PAR 2017   2\n1129 SWIdahoCereals_SWS_PAR_2016 SWIdahoCereals  SWS      PAR 2016   1\n1130 SWIdahoCereals_SWS_PAR_2017 SWIdahoCereals  SWS      PAR 2017   4\n1131 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   2\n1132 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   4\n1133 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   1\n1134 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   3\n1135 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   4\n1136 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   1\n1137 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   2\n1138 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   3\n1139 SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   1\n1140 SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   1\n1141 SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   1\n1142 SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   1\n1143 SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   1\n1144 SWIdahoCereals_SWS_PAR_2020 SWIdahoCereals  SWS      PAR 2020   4\n1145 SWIdahoCereals_SWS_PAR_2020 SWIdahoCereals  SWS      PAR 2020   2\n1146 SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   1\n1147 SWIdahoCereals_SWS_PAR_2020 SWIdahoCereals  SWS      PAR 2020   3\n1148 SWIdahoCereals_SWS_PAR_2020 SWIdahoCereals  SWS      PAR 2020   1\n1149 SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   3\n1150 SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   2\n1151 SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   2\n1152 SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   4\n1153 SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   3\n1154 SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   4\n1155 SWIdahoCereals_SWS_PAR_2017 SWIdahoCereals  SWS      PAR 2017   2\n1156 SWIdahoCereals_SWS_PAR_2017 SWIdahoCereals  SWS      PAR 2017   3\n1157 SWIdahoCereals_SWS_PAR_2017 SWIdahoCereals  SWS      PAR 2017   4\n1158 SWIdahoCereals_SWS_PAR_2017 SWIdahoCereals  SWS      PAR 2017   1\n1159 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   4\n1160 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   3\n1161 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   2\n1162 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   1\n1163 SWIdahoCereals_HWW_PAR_2020 SWIdahoCereals  HWW      PAR 2020   4\n1164 SWIdahoCereals_HWW_PAR_2020 SWIdahoCereals  HWW      PAR 2020   1\n1165 SWIdahoCereals_HWW_PAR_2020 SWIdahoCereals  HWW      PAR 2020   2\n1166 SWIdahoCereals_HWW_PAR_2020 SWIdahoCereals  HWW      PAR 2020   3\n1167 SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   3\n1168 SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   3\n1169 SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   2\n1170 SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   2\n1171 SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   1\n1172 SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   1\n1173 SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   3\n1174 SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   1\n1175 SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   4\n1176 SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   3\n1177 SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   2\n1178 SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   4\n1179 SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   1\n1180 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   1\n1181 SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   2\n1182 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   4\n1183 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   2\n1184 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   3\n1185 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   3\n1186 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   2\n1187 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   4\n1188 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   1\n1189 SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   2\n1190 SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   3\n1191 SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   3\n1192 SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   2\n1193 SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   1\n1194 SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   4\n1195 SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   1\n1196 SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   4\n1197 SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   3\n1198 SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   3\n1199 SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   1\n1200 SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   1\n1201 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   1\n1202 SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   2\n1203 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   3\n1204 SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   2\n1205 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   2\n1206 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   4\n1207 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   2\n1208 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   3\n1209 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   1\n1210 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   4\n1211 SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   3\n1212 SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   2\n1213 SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   1\n1214 SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   3\n1215 SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   1\n1216 SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   2\n1217 SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   4\n1218 SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   1\n1219 SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   2\n1220 SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   3\n1221 SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   4\n1222 SWIdahoCereals_HWS_PAR_2020 SWIdahoCereals  HWS      PAR 2020   4\n1223 SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   1\n1224 SWIdahoCereals_HWS_PAR_2017 SWIdahoCereals  HWS      PAR 2017   2\n1225 SWIdahoCereals_HWS_PAR_2019 SWIdahoCereals  HWS      PAR 2019   3\n1226 SWIdahoCereals_HWS_PAR_2020 SWIdahoCereals  HWS      PAR 2020   2\n1227 SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   3\n1228 SWIdahoCereals_HWS_PAR_2019 SWIdahoCereals  HWS      PAR 2019   1\n1229 SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   4\n1230 SWIdahoCereals_HWS_PAR_2019 SWIdahoCereals  HWS      PAR 2019   2\n1231 SWIdahoCereals_HWS_PAR_2019 SWIdahoCereals  HWS      PAR 2019   4\n1232 SWIdahoCereals_HWS_PAR_2020 SWIdahoCereals  HWS      PAR 2020   3\n1233 SWIdahoCereals_HWS_PAR_2020 SWIdahoCereals  HWS      PAR 2020   1\n1234 SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   2\n1235 SWIdahoCereals_HWS_PAR_2016 SWIdahoCereals  HWS      PAR 2016   3\n1236 SWIdahoCereals_HWS_PAR_2017 SWIdahoCereals  HWS      PAR 2017   3\n1237 SWIdahoCereals_HWS_PAR_2016 SWIdahoCereals  HWS      PAR 2016   1\n1238 SWIdahoCereals_HWS_PAR_2016 SWIdahoCereals  HWS      PAR 2016   2\n1239 SWIdahoCereals_HWS_PAR_2017 SWIdahoCereals  HWS      PAR 2017   1\n1240 SWIdahoCereals_HWS_PAR_2017 SWIdahoCereals  HWS      PAR 2017   4\n1241 SWIdahoCereals_HWS_PAR_2016 SWIdahoCereals  HWS      PAR 2016   4\n1242 SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   3\n1243 SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   2\n1244 SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   1\n1245 SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   4\n1246 SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   2\n1247 SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   3\n1248 SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   1\n1249 SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   3\n1250 SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   4\n1251 SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   1\n1252 SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   2\n1253 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   3\n1254 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   4\n1255 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   2\n1256 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   4\n1257 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   2\n1258 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   1\n1259 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   3\n1260 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   1\n1261 SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   3\n1262 SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   3\n1263 SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   3\n1264 SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   3\n1265 SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   1\n1266 SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   3\n1267 SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   2\n1268 SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   1\n1269 SWIdahoCereals_SWS_PAR_2016 SWIdahoCereals  SWS      PAR 2016   2\n1270 SWIdahoCereals_SWS_PAR_2020 SWIdahoCereals  SWS      PAR 2020   2\n1271 SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   4\n1272 SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   2\n1273 SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   3\n1274 SWIdahoCereals_SWS_PAR_2016 SWIdahoCereals  SWS      PAR 2016   4\n1275 SWIdahoCereals_SWS_PAR_2020 SWIdahoCereals  SWS      PAR 2020   3\n1276 SWIdahoCereals_SWS_PAR_2020 SWIdahoCereals  SWS      PAR 2020   1\n1277 SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   4\n1278 SWIdahoCereals_SWS_PAR_2020 SWIdahoCereals  SWS      PAR 2020   4\n1279 SWIdahoCereals_SWS_PAR_2016 SWIdahoCereals  SWS      PAR 2016   3\n1280 SWIdahoCereals_SWS_PAR_2016 SWIdahoCereals  SWS      PAR 2016   1\n1281 SWIdahoCereals_SWS_PAR_2017 SWIdahoCereals  SWS      PAR 2017   3\n1282 SWIdahoCereals_SWS_PAR_2017 SWIdahoCereals  SWS      PAR 2017   2\n1283 SWIdahoCereals_SWS_PAR_2017 SWIdahoCereals  SWS      PAR 2017   4\n1284 SWIdahoCereals_SWS_PAR_2017 SWIdahoCereals  SWS      PAR 2017   1\n1285 SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   3\n1286 SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   2\n1287 SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   1\n1288 SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   4\n1289 SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   3\n1290 SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   2\n1291 SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   1\n1292 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   1\n1293 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   2\n1294 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   3\n1295 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   4\n1296 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   1\n1297 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   2\n1298 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   4\n1299 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   3\n1300 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   4\n1301 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   2\n1302 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   3\n1303 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   1\n1304 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   1\n1305 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   4\n1306 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   2\n1307 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   3\n1308 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   4\n1309 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   3\n1310 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   2\n1311 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   1\n1312 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   3\n1313 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   4\n1314 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   1\n1315 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   2\n1316 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   4\n1317 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   2\n1318 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   3\n1319 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   1\n1320 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   1\n1321 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   2\n1322 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   3\n1323 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   4\n1324 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   2\n1325 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   1\n1326 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   4\n1327 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   3\n1328 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   3\n1329 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   1\n1330 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   2\n1331 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   4\n1332 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   1\n1333 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   2\n1334 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   4\n1335 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   3\n1336 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   3\n1337 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   2\n1338 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   1\n1339 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   4\n1340 SWIdahoCereals_SWS_PAR_2016 SWIdahoCereals  SWS      PAR 2016   3\n1341 SWIdahoCereals_SWS_PAR_2016 SWIdahoCereals  SWS      PAR 2016   4\n1342 SWIdahoCereals_SWS_PAR_2016 SWIdahoCereals  SWS      PAR 2016   2\n1343 SWIdahoCereals_SWS_PAR_2016 SWIdahoCereals  SWS      PAR 2016   1\n1344 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   4\n1345 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   1\n1346 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   2\n1347 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   3\n1348 SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   3\n1349 SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   2\n1350 SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   1\n1351 SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   3\n1352 SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   2\n1353 SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   4\n1354 SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   1\n1355 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   1\n1356 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   2\n1357 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   4\n1358 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   3\n1359 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   3\n1360 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   2\n1361 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   1\n1362 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   4\n1363 SWIdahoCereals_HWS_PAR_2016 SWIdahoCereals  HWS      PAR 2016   2\n1364 SWIdahoCereals_HWS_PAR_2016 SWIdahoCereals  HWS      PAR 2016   3\n1365 SWIdahoCereals_HWS_PAR_2016 SWIdahoCereals  HWS      PAR 2016   1\n1366 SWIdahoCereals_HWS_PAR_2016 SWIdahoCereals  HWS      PAR 2016   4\n1367 SWIdahoCereals_H-W_WEI_2018 SWIdahoCereals  H-W      WEI 2018   2\n1368 SWIdahoCereals_H-W_WEI_2018 SWIdahoCereals  H-W      WEI 2018   1\n1369 SWIdahoCereals_H-W_WEI_2018 SWIdahoCereals  H-W      WEI 2018   3\n1370 SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   2\n1371 SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   3\n1372 SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   1\n1373 SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   4\n1374 SWIdahoCereals_HWW_PAR_2019 SWIdahoCereals  HWW      PAR 2019   1\n1375 SWIdahoCereals_HWW_PAR_2019 SWIdahoCereals  HWW      PAR 2019   2\n1376 SWIdahoCereals_HWW_PAR_2019 SWIdahoCereals  HWW      PAR 2019   4\n1377 SWIdahoCereals_HWW_PAR_2019 SWIdahoCereals  HWW      PAR 2019   3\n1378 SWIdahoCereals_HWS_PAR_2016 SWIdahoCereals  HWS      PAR 2016   2\n1379 SWIdahoCereals_HWS_PAR_2016 SWIdahoCereals  HWS      PAR 2016   3\n1380 SWIdahoCereals_HWS_PAR_2016 SWIdahoCereals  HWS      PAR 2016   1\n1381 SWIdahoCereals_HWS_PAR_2016 SWIdahoCereals  HWS      PAR 2016   4\n1382 SWIdahoCereals_H-W_WEI_2018 SWIdahoCereals  H-W      WEI 2018   2\n1383 SWIdahoCereals_H-W_WEI_2018 SWIdahoCereals  H-W      WEI 2018   1\n1384 SWIdahoCereals_H-W_WEI_2018 SWIdahoCereals  H-W      WEI 2018   3\n1385 SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   1\n1386 SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   2\n1387 SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   3\n1388 SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   4\n1389 SWIdahoCereals_HRW_PAR_2019 SWIdahoCereals  HRW      PAR 2019   2\n1390 SWIdahoCereals_HRW_PAR_2019 SWIdahoCereals  HRW      PAR 2019   1\n1391 SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   2\n1392 SWIdahoCereals_HRW_PAR_2019 SWIdahoCereals  HRW      PAR 2019   3\n1393 SWIdahoCereals_HRW_PAR_2019 SWIdahoCereals  HRW      PAR 2019   4\n1394 SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   1\n1395 SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   3\n1396 SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   4\n1397 SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   1\n1398 SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   2\n1399 SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   4\n1400 SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   3\n1401 SWIdahoCereals_HWW_PAR_2019 SWIdahoCereals  HWW      PAR 2019   1\n1402 SWIdahoCereals_HWW_PAR_2019 SWIdahoCereals  HWW      PAR 2019   3\n1403 SWIdahoCereals_HWW_PAR_2019 SWIdahoCereals  HWW      PAR 2019   2\n1404 SWIdahoCereals_HWW_PAR_2019 SWIdahoCereals  HWW      PAR 2019   4\n1405 SWIdahoCereals_SWS_PAR_2017 SWIdahoCereals  SWS      PAR 2017   1\n1406 SWIdahoCereals_SWS_PAR_2017 SWIdahoCereals  SWS      PAR 2017   2\n1407 SWIdahoCereals_SWS_PAR_2017 SWIdahoCereals  SWS      PAR 2017   3\n1408 SWIdahoCereals_SWS_PAR_2017 SWIdahoCereals  SWS      PAR 2017   4\n1409 SWIdahoCereals_SWS_PAR_2017 SWIdahoCereals  SWS      PAR 2017   3\n1410 SWIdahoCereals_SWS_PAR_2017 SWIdahoCereals  SWS      PAR 2017   1\n1411 SWIdahoCereals_SWS_PAR_2017 SWIdahoCereals  SWS      PAR 2017   4\n1412 SWIdahoCereals_SWS_PAR_2017 SWIdahoCereals  SWS      PAR 2017   2\n1413 SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   1\n1414 SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   2\n1415 SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   3\n1416 SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   4\n1417 SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   1\n1418 SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   3\n1419 SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   4\n1420 SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   2\n1421 SWIdahoCereals_HRS_PAR_2020 SWIdahoCereals  HRS      PAR 2020   2\n1422 SWIdahoCereals_HRS_PAR_2020 SWIdahoCereals  HRS      PAR 2020   1\n1423 SWIdahoCereals_HRS_PAR_2020 SWIdahoCereals  HRS      PAR 2020   4\n1424 SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   4\n1425 SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   2\n1426 SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   3\n1427 SWIdahoCereals_HRS_PAR_2020 SWIdahoCereals  HRS      PAR 2020   3\n1428 SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   1\n1429 SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   3\n1430 SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   4\n1431 SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   2\n1432 SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   1\n1433 SWIdahoCereals_HWW_PAR_2019 SWIdahoCereals  HWW      PAR 2019   2\n1434 SWIdahoCereals_HWW_PAR_2019 SWIdahoCereals  HWW      PAR 2019   1\n1435 SWIdahoCereals_HWW_PAR_2019 SWIdahoCereals  HWW      PAR 2019   3\n1436 SWIdahoCereals_HWW_PAR_2019 SWIdahoCereals  HWW      PAR 2019   4\n1437 SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   3\n1438 SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   1\n1439 SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   2\n1440 SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   4\n1441 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   1\n1442 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   2\n1443 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   4\n1444 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   3\n1445 SWIdahoCereals_H-W_WEI_2018 SWIdahoCereals  H-W      WEI 2018   2\n1446 SWIdahoCereals_H-W_WEI_2018 SWIdahoCereals  H-W      WEI 2018   1\n1447 SWIdahoCereals_H-W_WEI_2018 SWIdahoCereals  H-W      WEI 2018   3\n1448 SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   3\n1449 SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   2\n1450 SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   1\n1451 SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   4\n1452 SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   4\n1453 SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   3\n1454 SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   1\n1455 SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   2\n1456 SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   2\n1457 SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   2\n1458 SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   2\n1459 SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   2\n1460 SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   1\n1461 SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   4\n1462 SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   1\n1463 SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   3\n1464 SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   4\n1465 SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   2\n1466 SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   2\n1467 SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   3\n1468 SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   2\n1469 SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   3\n1470 SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   4\n1471 SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   1\n1472 SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   3\n1473 SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   4\n1474 SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   2\n1475 SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   1\n1476 SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   2\n1477 SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   1\n1478 SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   4\n1479 SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   3\n1480 SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   1\n1481 SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   1\n1482 SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   1\n1483 SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   1\n1484 SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   3\n1485 SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   1\n1486 SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   2\n1487 SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   1\n1488 SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   2\n1489 SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   3\n1490 SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   4\n1491 SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   4\n1492 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   1\n1493 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   2\n1494 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   3\n1495 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   4\n1496 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   2\n1497 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   4\n1498 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   1\n1499 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   3\n1500 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   2\n1501 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   1\n1502 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   4\n1503 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   3\n1504 SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   1\n1505 SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   2\n1506 SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   4\n1507 SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   3\n1508 SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   3\n1509 SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   1\n1510 SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   2\n1511 SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   4\n1512 SWIdahoCereals_SWS_PAR_2020 SWIdahoCereals  SWS      PAR 2020   4\n1513 SWIdahoCereals_SWS_PAR_2020 SWIdahoCereals  SWS      PAR 2020   2\n1514 SWIdahoCereals_SWS_PAR_2020 SWIdahoCereals  SWS      PAR 2020   1\n1515 SWIdahoCereals_SWS_PAR_2020 SWIdahoCereals  SWS      PAR 2020   3\n1516 SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   1\n1517 SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   2\n1518 SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   3\n1519 SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   4\n1520 SWIdahoCereals_SWS_PAR_2020 SWIdahoCereals  SWS      PAR 2020   4\n1521 SWIdahoCereals_SWS_PAR_2020 SWIdahoCereals  SWS      PAR 2020   3\n1522 SWIdahoCereals_SWS_PAR_2020 SWIdahoCereals  SWS      PAR 2020   1\n1523 SWIdahoCereals_SWS_PAR_2020 SWIdahoCereals  SWS      PAR 2020   2\n1524 SWIdahoCereals_SWS_PAR_2020 SWIdahoCereals  SWS      PAR 2020   4\n1525 SWIdahoCereals_SWS_PAR_2020 SWIdahoCereals  SWS      PAR 2020   2\n1526 SWIdahoCereals_SWS_PAR_2020 SWIdahoCereals  SWS      PAR 2020   3\n1527 SWIdahoCereals_SWS_PAR_2020 SWIdahoCereals  SWS      PAR 2020   1\n1528 SWIdahoCereals_SWS_PAR_2020 SWIdahoCereals  SWS      PAR 2020   4\n1529 SWIdahoCereals_SWS_PAR_2020 SWIdahoCereals  SWS      PAR 2020   2\n1530 SWIdahoCereals_SWS_PAR_2020 SWIdahoCereals  SWS      PAR 2020   1\n1531 SWIdahoCereals_SWS_PAR_2020 SWIdahoCereals  SWS      PAR 2020   3\n1532 SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   2\n1533 SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   2\n1534 SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   2\n1535 SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   2\n1536 SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   1\n1537 SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   3\n1538 SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   2\n1539 SWIdahoCereals_SWS_PAR_2016 SWIdahoCereals  SWS      PAR 2016   2\n1540 SWIdahoCereals_SWS_PAR_2016 SWIdahoCereals  SWS      PAR 2016   3\n1541 SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   4\n1542 SWIdahoCereals_SWS_PAR_2016 SWIdahoCereals  SWS      PAR 2016   4\n1543 SWIdahoCereals_SWS_PAR_2016 SWIdahoCereals  SWS      PAR 2016   1\n1544 SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   1\n1545 SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   2\n1546 SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   4\n1547 SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   3\n1548 SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   3\n1549 SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   2\n1550 SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   1\n1551 SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   2\n1552 SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   4\n1553 SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   1\n1554 SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   3\n1555 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   2\n1556 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   4\n1557 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   3\n1558 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   1\n1559 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   2\n1560 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   1\n1561 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   4\n1562 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   3\n1563 SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   3\n1564 SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   2\n1565 SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   1\n1566 SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   2\n1567 SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   4\n1568 SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   1\n1569 SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   3\n1570 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   4\n1571 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   2\n1572 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   3\n1573 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   3\n1574 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   4\n1575 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   1\n1576 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   2\n1577 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   4\n1578 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   2\n1579 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   3\n1580 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   1\n1581 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   1\n1582 SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   3\n1583 SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   2\n1584 SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   1\n1585 SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   4\n1586 SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   3\n1587 SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   1\n1588 SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   2\n1589 SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   3\n1590 SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   2\n1591 SWIdahoCereals_SWW_WEI_2018 SWIdahoCereals  SWW      WEI 2018   1\n1592 SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   1\n1593 SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   3\n1594 SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   2\n1595 SWIdahoCereals_SWW_PAR_2018 SWIdahoCereals  SWW      PAR 2018   4\n1596 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   2\n1597 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   3\n1598 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   4\n1599 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   4\n1600 SWIdahoCereals_SWW_PAR_2019 SWIdahoCereals  SWW      PAR 2019   1\n1601 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   3\n1602 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   2\n1603 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   1\n1604 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   1\n1605 SWIdahoCereals_SWW_PAR_2017 SWIdahoCereals  SWW      PAR 2017   2\n1606 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   4\n1607 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   3\n1608 SWIdahoCereals_HRW_PAR_2019 SWIdahoCereals  HRW      PAR 2019   1\n1609 SWIdahoCereals_HRW_PAR_2019 SWIdahoCereals  HRW      PAR 2019   3\n1610 SWIdahoCereals_HRW_PAR_2019 SWIdahoCereals  HRW      PAR 2019   2\n1611 SWIdahoCereals_HRW_PAR_2019 SWIdahoCereals  HRW      PAR 2019   4\n1612 SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   2\n1613 SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   1\n1614 SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   3\n1615 SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   4\n1616 SWIdahoCereals_HRW_PAR_2019 SWIdahoCereals  HRW      PAR 2019   1\n1617 SWIdahoCereals_HRW_PAR_2019 SWIdahoCereals  HRW      PAR 2019   2\n1618 SWIdahoCereals_HRW_PAR_2019 SWIdahoCereals  HRW      PAR 2019   3\n1619 SWIdahoCereals_HRW_PAR_2019 SWIdahoCereals  HRW      PAR 2019   4\n1620 SWIdahoCereals_H-W_WEI_2018 SWIdahoCereals  H-W      WEI 2018   2\n1621 SWIdahoCereals_H-W_WEI_2018 SWIdahoCereals  H-W      WEI 2018   3\n1622 SWIdahoCereals_H-W_WEI_2018 SWIdahoCereals  H-W      WEI 2018   1\n1623 SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   1\n1624 SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   3\n1625 SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   4\n1626 SWIdahoCereals_H-W_PAR_2018 SWIdahoCereals  H-W      PAR 2018   2\n1627 SWIdahoCereals_HRW_PAR_2019 SWIdahoCereals  HRW      PAR 2019   1\n1628 SWIdahoCereals_HRW_PAR_2019 SWIdahoCereals  HRW      PAR 2019   2\n1629 SWIdahoCereals_HRW_PAR_2019 SWIdahoCereals  HRW      PAR 2019   3\n1630 SWIdahoCereals_HRW_PAR_2019 SWIdahoCereals  HRW      PAR 2019   4\n1631 SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   1\n1632 SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   2\n1633 SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   3\n1634 SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   4\n1635 SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   1\n1636 SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   3\n1637 SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   4\n1638 SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   2\n1639 SWIdahoCereals_HRW_PAR_2019 SWIdahoCereals  HRW      PAR 2019   1\n1640 SWIdahoCereals_HRW_PAR_2019 SWIdahoCereals  HRW      PAR 2019   2\n1641 SWIdahoCereals_HRW_PAR_2019 SWIdahoCereals  HRW      PAR 2019   3\n1642 SWIdahoCereals_HRW_PAR_2019 SWIdahoCereals  HRW      PAR 2019   4\n1643 SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   1\n1644 SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   2\n1645 SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   3\n1646 SWIdahoCereals_HRW_PAR_2020 SWIdahoCereals  HRW      PAR 2020   4\n1647 SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   3\n1648 SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   3\n1649 SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   3\n1650 SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   3\n1651 SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   1\n1652 SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   4\n1653 SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   3\n1654 SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   4\n1655 SWIdahoCereals_SWS_PAR_2016 SWIdahoCereals  SWS      PAR 2016   2\n1656 SWIdahoCereals_SWS_PAR_2016 SWIdahoCereals  SWS      PAR 2016   3\n1657 SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   1\n1658 SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   3\n1659 SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   2\n1660 SWIdahoCereals_SWS_PAR_2016 SWIdahoCereals  SWS      PAR 2016   4\n1661 SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   2\n1662 SWIdahoCereals_SWS_PAR_2017 SWIdahoCereals  SWS      PAR 2017   1\n1663 SWIdahoCereals_SWS_PAR_2017 SWIdahoCereals  SWS      PAR 2017   2\n1664 SWIdahoCereals_SWS_PAR_2016 SWIdahoCereals  SWS      PAR 2016   1\n1665 SWIdahoCereals_SWS_PAR_2017 SWIdahoCereals  SWS      PAR 2017   4\n1666 SWIdahoCereals_SWS_PAR_2017 SWIdahoCereals  SWS      PAR 2017   3\n1667 SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   4\n1668 SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   4\n1669 SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   4\n1670 SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   4\n1671 SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   1\n1672 SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   2\n1673 SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   3\n1674 SWIdahoCereals_SWS_PAR_2016 SWIdahoCereals  SWS      PAR 2016   2\n1675 SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   4\n1676 SWIdahoCereals_SWS_PAR_2016 SWIdahoCereals  SWS      PAR 2016   3\n1677 SWIdahoCereals_SWS_PAR_2017 SWIdahoCereals  SWS      PAR 2017   2\n1678 SWIdahoCereals_SWS_PAR_2016 SWIdahoCereals  SWS      PAR 2016   4\n1679 SWIdahoCereals_SWS_PAR_2016 SWIdahoCereals  SWS      PAR 2016   1\n1680 SWIdahoCereals_SWS_PAR_2017 SWIdahoCereals  SWS      PAR 2017   3\n1681 SWIdahoCereals_SWS_PAR_2017 SWIdahoCereals  SWS      PAR 2017   1\n1682 SWIdahoCereals_SWS_PAR_2017 SWIdahoCereals  SWS      PAR 2017   4\n1683 SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   1\n1684 SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   1\n1685 SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   1\n1686 SWIdahoCereals_SWS_WEI_2018 SWIdahoCereals  SWS      WEI 2018   1\n1687 SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   3\n1688 SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   2\n1689 SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   4\n1690 SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   4\n1691 SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   3\n1692 SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   1\n1693 SWIdahoCereals_SWS_PAR_2019 SWIdahoCereals  SWS      PAR 2019   1\n1694 SWIdahoCereals_SWS_PAR_2018 SWIdahoCereals  SWS      PAR 2018   2\n1695 SWIdahoCereals_SWS_PAR_2016 SWIdahoCereals  SWS      PAR 2016   2\n1696 SWIdahoCereals_SWS_PAR_2016 SWIdahoCereals  SWS      PAR 2016   4\n1697 SWIdahoCereals_SWS_PAR_2016 SWIdahoCereals  SWS      PAR 2016   3\n1698 SWIdahoCereals_SWS_PAR_2017 SWIdahoCereals  SWS      PAR 2017   3\n1699 SWIdahoCereals_SWS_PAR_2016 SWIdahoCereals  SWS      PAR 2016   1\n1700 SWIdahoCereals_SWS_PAR_2017 SWIdahoCereals  SWS      PAR 2017   2\n1701 SWIdahoCereals_SWS_PAR_2017 SWIdahoCereals  SWS      PAR 2017   1\n1702 SWIdahoCereals_SWS_PAR_2017 SWIdahoCereals  SWS      PAR 2017   4\n1703 SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   1\n1704 SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   3\n1705 SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   2\n1706 SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   4\n1707 SWIdahoCereals_HWS_PAR_2020 SWIdahoCereals  HWS      PAR 2020   2\n1708 SWIdahoCereals_HWS_PAR_2020 SWIdahoCereals  HWS      PAR 2020   3\n1709 SWIdahoCereals_HWS_PAR_2020 SWIdahoCereals  HWS      PAR 2020   1\n1710 SWIdahoCereals_HWS_PAR_2020 SWIdahoCereals  HWS      PAR 2020   4\n1711 SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   3\n1712 SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   1\n1713 SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   2\n1714 SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   4\n1715 SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   1\n1716 SWIdahoCereals_HWS_PAR_2020 SWIdahoCereals  HWS      PAR 2020   3\n1717 SWIdahoCereals_HWS_PAR_2020 SWIdahoCereals  HWS      PAR 2020   2\n1718 SWIdahoCereals_HWS_PAR_2016 SWIdahoCereals  HWS      PAR 2016   3\n1719 SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   3\n1720 SWIdahoCereals_HWS_PAR_2016 SWIdahoCereals  HWS      PAR 2016   4\n1721 SWIdahoCereals_HWS_PAR_2017 SWIdahoCereals  HWS      PAR 2017   3\n1722 SWIdahoCereals_HWS_PAR_2020 SWIdahoCereals  HWS      PAR 2020   4\n1723 SWIdahoCereals_HWS_PAR_2019 SWIdahoCereals  HWS      PAR 2019   4\n1724 SWIdahoCereals_HWS_PAR_2019 SWIdahoCereals  HWS      PAR 2019   3\n1725 SWIdahoCereals_HWS_PAR_2020 SWIdahoCereals  HWS      PAR 2020   1\n1726 SWIdahoCereals_HWS_PAR_2019 SWIdahoCereals  HWS      PAR 2019   1\n1727 SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   2\n1728 SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   4\n1729 SWIdahoCereals_HWS_PAR_2016 SWIdahoCereals  HWS      PAR 2016   1\n1730 SWIdahoCereals_HWS_PAR_2016 SWIdahoCereals  HWS      PAR 2016   2\n1731 SWIdahoCereals_HWS_PAR_2019 SWIdahoCereals  HWS      PAR 2019   2\n1732 SWIdahoCereals_HWS_PAR_2017 SWIdahoCereals  HWS      PAR 2017   2\n1733 SWIdahoCereals_HWS_PAR_2017 SWIdahoCereals  HWS      PAR 2017   4\n1734 SWIdahoCereals_HWS_PAR_2017 SWIdahoCereals  HWS      PAR 2017   1\n1735 SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   1\n1736 SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   2\n1737 SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   3\n1738 SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   4\n1739 SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   2\n1740 SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   1\n1741 SWIdahoCereals_HWS_PAR_2020 SWIdahoCereals  HWS      PAR 2020   2\n1742 SWIdahoCereals_HWS_PAR_2020 SWIdahoCereals  HWS      PAR 2020   4\n1743 SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   3\n1744 SWIdahoCereals_HWS_PAR_2020 SWIdahoCereals  HWS      PAR 2020   1\n1745 SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   4\n1746 SWIdahoCereals_HWS_PAR_2019 SWIdahoCereals  HWS      PAR 2019   2\n1747 SWIdahoCereals_HWS_PAR_2016 SWIdahoCereals  HWS      PAR 2016   3\n1748 SWIdahoCereals_HWS_PAR_2019 SWIdahoCereals  HWS      PAR 2019   4\n1749 SWIdahoCereals_HWS_PAR_2016 SWIdahoCereals  HWS      PAR 2016   4\n1750 SWIdahoCereals_HWS_PAR_2019 SWIdahoCereals  HWS      PAR 2019   3\n1751 SWIdahoCereals_HWS_PAR_2020 SWIdahoCereals  HWS      PAR 2020   3\n1752 SWIdahoCereals_HWS_PAR_2019 SWIdahoCereals  HWS      PAR 2019   1\n1753 SWIdahoCereals_HWS_PAR_2016 SWIdahoCereals  HWS      PAR 2016   2\n1754 SWIdahoCereals_HWS_PAR_2017 SWIdahoCereals  HWS      PAR 2017   4\n1755 SWIdahoCereals_HWS_PAR_2017 SWIdahoCereals  HWS      PAR 2017   3\n1756 SWIdahoCereals_HWS_PAR_2017 SWIdahoCereals  HWS      PAR 2017   2\n1757 SWIdahoCereals_HWS_PAR_2016 SWIdahoCereals  HWS      PAR 2016   1\n1758 SWIdahoCereals_HWS_PAR_2017 SWIdahoCereals  HWS      PAR 2017   1\n1759 SWIdahoCereals_HWS_PAR_2020 SWIdahoCereals  HWS      PAR 2020   1\n1760 SWIdahoCereals_HWS_PAR_2020 SWIdahoCereals  HWS      PAR 2020   2\n1761 SWIdahoCereals_HWS_PAR_2020 SWIdahoCereals  HWS      PAR 2020   4\n1762 SWIdahoCereals_HWS_PAR_2020 SWIdahoCereals  HWS      PAR 2020   3\n1763 SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   3\n1764 SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   4\n1765 SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   2\n1766 SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   1\n1767 SWIdahoCereals_HRS_PAR_2017 SWIdahoCereals  HRS      PAR 2017   4\n1768 SWIdahoCereals_HRS_PAR_2017 SWIdahoCereals  HRS      PAR 2017   2\n1769 SWIdahoCereals_HRS_PAR_2017 SWIdahoCereals  HRS      PAR 2017   3\n1770 SWIdahoCereals_HRS_PAR_2017 SWIdahoCereals  HRS      PAR 2017   1\n1771 SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   1\n1772 SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   3\n1773 SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   2\n1774 SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   4\n1775 SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   1\n1776 SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   3\n1777 SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   4\n1778 SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   2\n1779 SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   1\n1780 SWIdahoCereals_HRS_PAR_2020 SWIdahoCereals  HRS      PAR 2020   1\n1781 SWIdahoCereals_HRS_PAR_2020 SWIdahoCereals  HRS      PAR 2020   4\n1782 SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   3\n1783 SWIdahoCereals_HRS_PAR_2020 SWIdahoCereals  HRS      PAR 2020   2\n1784 SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   3\n1785 SWIdahoCereals_HRS_PAR_2020 SWIdahoCereals  HRS      PAR 2020   3\n1786 SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   4\n1787 SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   2\n1788 SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   3\n1789 SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   4\n1790 SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   2\n1791 SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   1\n1792 SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   2\n1793 SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   1\n1794 SWIdahoCereals_HRS_PAR_2017 SWIdahoCereals  HRS      PAR 2017   3\n1795 SWIdahoCereals_HRS_PAR_2017 SWIdahoCereals  HRS      PAR 2017   2\n1796 SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   4\n1797 SWIdahoCereals_HRS_PAR_2017 SWIdahoCereals  HRS      PAR 2017   4\n1798 SWIdahoCereals_HRS_PAR_2017 SWIdahoCereals  HRS      PAR 2017   1\n1799 SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   1\n1800 SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   3\n1801 SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   2\n1802 SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   4\n1803 SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   1\n1804 SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   3\n1805 SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   2\n1806 SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   4\n1807 SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   3\n1808 SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   2\n1809 SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   1\n1810 SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   4\n1811 SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   1\n1812 SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   2\n1813 SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   3\n1814 SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   4\n1815 SWIdahoCereals_HRS_PAR_2017 SWIdahoCereals  HRS      PAR 2017   4\n1816 SWIdahoCereals_HRS_PAR_2017 SWIdahoCereals  HRS      PAR 2017   3\n1817 SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   1\n1818 SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   4\n1819 SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   3\n1820 SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   2\n1821 SWIdahoCereals_HRS_PAR_2017 SWIdahoCereals  HRS      PAR 2017   2\n1822 SWIdahoCereals_HRS_PAR_2017 SWIdahoCereals  HRS      PAR 2017   1\n1823 SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   1\n1824 SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   2\n1825 SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   3\n1826 SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   4\n1827 SWIdahoCereals_HRS_PAR_2020 SWIdahoCereals  HRS      PAR 2020   1\n1828 SWIdahoCereals_HRS_PAR_2020 SWIdahoCereals  HRS      PAR 2020   2\n1829 SWIdahoCereals_HRS_PAR_2020 SWIdahoCereals  HRS      PAR 2020   3\n1830 SWIdahoCereals_HRS_PAR_2020 SWIdahoCereals  HRS      PAR 2020   4\n1831 SWIdahoCereals_HRS_PAR_2020 SWIdahoCereals  HRS      PAR 2020   1\n1832 SWIdahoCereals_HRS_PAR_2020 SWIdahoCereals  HRS      PAR 2020   2\n1833 SWIdahoCereals_HRS_PAR_2020 SWIdahoCereals  HRS      PAR 2020   4\n1834 SWIdahoCereals_HRS_PAR_2020 SWIdahoCereals  HRS      PAR 2020   3\n1835 SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   2\n1836 SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   3\n1837 SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   1\n1838 SWIdahoCereals_H-S_WEI_2018 SWIdahoCereals  H-S      WEI 2018   4\n1839 SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   1\n1840 SWIdahoCereals_HRS_PAR_2020 SWIdahoCereals  HRS      PAR 2020   1\n1841 SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   3\n1842 SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   2\n1843 SWIdahoCereals_HRS_PAR_2020 SWIdahoCereals  HRS      PAR 2020   4\n1844 SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   4\n1845 SWIdahoCereals_HRS_PAR_2020 SWIdahoCereals  HRS      PAR 2020   2\n1846 SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   2\n1847 SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   3\n1848 SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   3\n1849 SWIdahoCereals_HRS_PAR_2019 SWIdahoCereals  HRS      PAR 2019   1\n1850 SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   4\n1851 SWIdahoCereals_H-S_PAR_2018 SWIdahoCereals  H-S      PAR 2018   4\n1852 SWIdahoCereals_HRS_PAR_2020 SWIdahoCereals  HRS      PAR 2020   3\n1853 SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   2\n1854 SWIdahoCereals_HRS_PAR_2017 SWIdahoCereals  HRS      PAR 2017   3\n1855 SWIdahoCereals_HRS_PAR_2016 SWIdahoCereals  HRS      PAR 2016   1\n1856 SWIdahoCereals_HRS_PAR_2017 SWIdahoCereals  HRS      PAR 2017   1\n1857 SWIdahoCereals_HRS_PAR_2017 SWIdahoCereals  HRS      PAR 2017   2\n1858 SWIdahoCereals_HRS_PAR_2017 SWIdahoCereals  HRS      PAR 2017   4\n1859 SWIdahoCereals_HRS_PAR_2020 SWIdahoCereals  HRS      PAR 2020   1\n1860 SWIdahoCereals_HRS_PAR_2020 SWIdahoCereals  HRS      PAR 2020   2\n1861 SWIdahoCereals_HRS_PAR_2020 SWIdahoCereals  HRS      PAR 2020   4\n1862 SWIdahoCereals_HRS_PAR_2020 SWIdahoCereals  HRS      PAR 2020   3\n1863 SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   1\n1864 SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   4\n1865 SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   2\n1866 SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   3\n1867 SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   2\n1868 SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   1\n1869 SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   4\n1870 SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   3\n1871 SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   1\n1872 SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   2\n1873 SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   4\n1874 SWIdahoCereals_H-W_PAR_2017 SWIdahoCereals  H-W      PAR 2017   3\n1875 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   4\n1876 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   1\n1877 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   2\n1878 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   3\n1879 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   1\n1880 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   2\n1881 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   4\n1882 SWIdahoCereals_SWW_PAR_2020 SWIdahoCereals  SWW      PAR 2020   3\n               variety       yield grain_protein test_weight\n1            04PN066-7  64.2691650            NA       58.50\n2            04PN066-7 104.1238330            NA       63.00\n3            04PN066-7 136.3736488            NA       62.30\n4            04PN066-7 148.5397884            NA       59.90\n5          05PN044-20   84.0565404        8.1000       60.30\n6          05PN044-20   90.3160444        8.8000       60.90\n7          05PN044-20   91.2488392        8.1000       60.90\n8          05PN044-20   91.5285851        8.5000       60.80\n9          06PN3017-09  21.5368213            NA       56.10\n10         06PN3017-09  26.7056584            NA       61.40\n11         06PN3017-09  28.9072002            NA       61.80\n12         06PN3017-09  31.6830571            NA       62.30\n13         06PN3017-09  75.4408906       10.5800       65.70\n14         06PN3017-09  89.0480206        9.4300       65.20\n15         06PN3017-09 100.3303124       11.1550       63.90\n16         06PN3017-09 100.9825128       10.9825       65.30\n17          09PN005#25 102.3702993            NA       62.60\n18          09PN005#25 112.3584218            NA       61.40\n19          09PN005#25 131.8446832            NA       62.10\n20          09PN005#25 147.3615222            NA       56.70\n21          09PN046#16  79.8430083            NA       60.70\n22          09PN046#16 109.5253689            NA       63.80\n23          09PN046#16 133.7161479            NA       59.70\n24          09PN046#16 143.9817040            NA       60.70\n25          09PN062#18 117.3848049            NA       63.30\n26          09PN062#18 119.1654019            NA       60.50\n27          09PN062#18 119.8333185            NA       59.80\n28          09PN062#18 126.4024495            NA       60.40\n29          10SB0087-B  94.1897686       13.0530          NA\n30          10SB0087-B 104.3976524       12.3690          NA\n31          10SB0087-B 112.9792002       14.0790          NA\n32          10SB0087-B 121.5904663       13.7940          NA\n33          11PN044#48 119.1419255        8.4000       60.50\n34          11PN044#48 140.8241609       11.0000       60.70\n35          11PN044#48 160.6435191       11.2000       61.50\n36          11PN044#48 165.3575795        9.9000       61.50\n37           12-SW-068 113.5667832       12.0840          NA\n38           12-SW-068 120.5750255       12.0840          NA\n39           12-SW-068 133.6448240       12.6540          NA\n40           12-SW-068 150.5839619       11.5710          NA\n41            12SB0197  17.5166147            NA       47.20\n42            12SB0197  24.6955551            NA       59.00\n43            12SB0197  29.9601114            NA       59.40\n44            12SB0197  34.1717565            NA       61.90\n45            12SB0197  71.6933325        9.8325       62.10\n46            12SB0197  81.7123727       11.2700       65.60\n47            12SB0197 103.8430259       10.3500       64.30\n48            12SB0197 108.6030110        9.6025       64.20\n49            12SB0197 157.0273682            NA          NA\n50            12SB0197 164.2636449            NA          NA\n51            12SB0197 175.0525171            NA          NA\n52            12SB0197 297.0845099            NA          NA\n53            12SB0224  18.9524028            NA       51.30\n54            12SB0224  23.1640478            NA       58.30\n55            12SB0224  24.5998359            NA       58.70\n56            12SB0224  32.9274068            NA       61.00\n57            12SB0224  56.5872337            NA          NA\n58            12SB0224  77.0564192       10.4075       63.40\n59            12SB0224  86.8662297       11.6000       63.70\n60            12SB0224  88.9123209       10.8100       64.20\n61            12SB0224  97.1775232       10.3500       64.10\n62            12SB0224 100.3242569       10.8100       64.90\n63            12SB0224 107.7306578       11.6000       64.20\n64            12SB0224 117.8232226       10.9000       62.80\n65            12SB0224 124.3770491       11.6000       62.80\n66            12SB0224 149.3794031            NA          NA\n67            12SB0224 167.1161732            NA          NA\n68            12SB0224 174.7641383            NA          NA\n69         14-FAC-2043  25.9399048            NA       60.60\n70         14-FAC-2043  27.5671313            NA       59.10\n71         14-FAC-2043  28.9072002            NA       58.90\n72         14-FAC-2043  37.8090863            NA       61.10\n73         14-FAC-2043 111.0102684        8.3375       60.90\n74         14-FAC-2043 114.5229920        8.1075       61.00\n75         14-FAC-2043 115.1855905        8.0500       60.50\n76         14-FAC-2043 130.3156231        8.2225       61.70\n77         14-SSW-1059  82.6631120            NA          NA\n78         14-SSW-1059 106.5833432            NA          NA\n79         14-SSW-1059 113.4748364        8.1650       60.60\n80         14-SSW-1059 116.1839802            NA          NA\n81         14-SSW-1059 116.7226193        7.8775       60.90\n82         14-SSW-1059 120.5774920            NA          NA\n83         14-SSW-1059 121.2206563        7.6475       59.40\n84         14-SSW-1059 124.6034334        8.8550       61.10\n85             500-709  66.8202966            NA          NA\n86             500-709 121.0656600            NA          NA\n87             500-709 143.6841099            NA          NA\n88             500-709 151.4110383            NA          NA\n89            AA texas  71.7618584            NA       59.70\n90            AA texas  74.8263886            NA       59.30\n91            AA texas  77.4036415            NA       60.20\n92            AA texas  81.2509276            NA       59.80\n93        AAC Wildfire  20.9038655            NA       59.20\n94        AAC Wildfire  27.6141244            NA       57.20\n95        AAC Wildfire  29.4418474            NA       61.70\n96        AAC Wildfire  65.4639266            NA       64.20\n97        AAC Wildfire  65.5964725            NA       65.60\n98        AAC Wildfire  68.0310855            NA       62.30\n99        AAC Wildfire  69.6602163            NA       63.10\n100        AP Coachman  96.6248876        9.7000       58.80\n101        AP Coachman  97.6911492        8.6000       59.10\n102        AP Coachman 106.3683865        9.1000       57.70\n103        AP Coachman 113.7718137        9.4000       59.80\n104          AP Redeye 169.5954922       10.6000       63.10\n105          AP Redeye 185.3644063        9.6000       62.70\n106          AP Redeye 186.5990229       11.0000       63.50\n107          AP Redeye 187.1386274       10.2000       63.30\n108        AP Renegade  87.6968090       11.6000       62.30\n109        AP Renegade  88.6808443        9.8000       62.60\n110        AP Renegade  95.6816956       12.1000       63.80\n111        AP Renegade 105.3360055       12.3000       63.00\n112        AP Renegade 111.3582684       12.2000       62.20\n113        AP Renegade 111.6655145       12.6000       63.30\n114        AP Renegade 113.6734264       11.3000       63.10\n115        AP Renegade 122.8129931       11.6000       62.80\n116     Agripro Legion 108.2931130            NA       63.60\n117     Agripro Legion 109.3239354            NA       55.50\n118     Agripro Legion 128.1249288            NA       62.50\n119     Agripro Legion 193.8004286            NA       62.40\n120               Alum  16.5594226            NA       45.20\n121               Alum  22.0154173            NA       58.50\n122               Alum  24.5041167            NA       64.00\n123               Alum  29.2900770            NA       62.20\n124               Alum  71.1427255        9.9475       64.70\n125               Alum  93.3503873       12.9950       66.30\n126               Alum  98.6502965       12.3000       63.00\n127               Alum 108.6535003        9.8325       65.50\n128               Alum 109.1757635       12.0000       62.10\n129               Alum 110.4070859       12.9000       63.00\n130               Alum 113.5022422       12.5000       62.70\n131               Alum 119.4563296       10.7525       65.60\n132            Bobtail  78.2106518        8.2800       64.00\n133            Bobtail  90.1669277        7.7050       61.80\n134            Bobtail  91.7855395        5.3475       63.50\n135            Bobtail  94.1904795        6.5550       62.90\n136            Bobtail 113.1874167            NA       65.50\n137            Bobtail 120.2867495            NA       63.90\n138            Bobtail 125.3556803            NA       59.30\n139            Bobtail 127.0046261            NA       61.10\n140            Bobtail 148.6120373            NA       56.10\n141            Bobtail 150.1369370            NA       61.10\n142            Bobtail 171.2811882            NA       58.40\n143            Bobtail 201.0911918            NA       61.50\n144          Brawl CL+  79.0874956            NA       64.30\n145          Brawl CL+  93.2391600            NA       62.10\n146          Brawl CL+ 109.9703725            NA       64.10\n147          Brawl CL+ 124.5278844            NA       65.10\n148          CO12D1770 102.4505301            NA       64.00\n149          CO12D1770 114.8644364            NA       63.20\n150          CO12D1770 126.3281794            NA       64.20\n151          CO12D1770 141.0885636            NA       63.80\n152          CO12D2011  99.7327191            NA       61.50\n153          CO12D2011 106.9775945            NA       63.40\n154          CO12D2011 144.7014520            NA       65.40\n155          CO12D2011 155.0078943            NA       67.20\n156             CP3066  61.8538640       12.8000       63.60\n157             CP3066  88.0062047       13.4000       63.20\n158             CP3066  97.9108420       13.3000       63.50\n159             CP3066 107.2172250       13.5000       63.30\n160           CPX36619  88.1343189       10.7000       62.70\n161           CPX36619 103.2320785       11.1000       63.00\n162           CPX36619 115.4094203       12.1000       63.60\n163           CPX36619 117.4884935       12.8000       63.20\n164               Dayn  16.7508610            NA       46.20\n165               Dayn  22.4940134            NA       59.60\n166               Dayn  29.2900770            NA       63.00\n167               Dayn  36.2775790            NA       63.70\n168               Dayn  70.7575715        9.8900       65.00\n169               Dayn  86.2226113       11.6150       64.20\n170               Dayn  91.2468694       12.2000       64.30\n171               Dayn  91.7831861       10.6000       64.60\n172               Dayn 101.7585034       11.7300       65.30\n173               Dayn 108.8570397       10.2350       62.20\n174               Dayn 113.1804624       12.2000       63.70\n175               Dayn 114.0515853       11.4000       64.50\n176               Dayn 114.9528805       11.0000       62.80\n177               Dayn 115.3062713       11.4000       63.10\n178               Dayn 118.9176438       11.4000       63.90\n179               Dayn 133.2017559       12.1000       64.20\n180               Dayn 162.0717707            NA          NA\n181               Dayn 175.0772167            NA          NA\n182               Dayn 184.3753437            NA          NA\n183               Dayn 252.9848873            NA          NA\n184             Denali  73.4851085            NA       64.40\n185             Denali 114.0722169            NA       63.20\n186             Denali 148.0554401            NA       63.20\n187             Denali 149.5332873            NA       64.90\n188               Glee  21.8239789            NA       58.40\n189               Glee  23.0683286            NA       60.30\n190               Glee  28.2371657            NA       63.40\n191               Glee  33.9803181            NA       63.90\n192               Glee  80.7961182       10.2350       64.90\n193               Glee  93.5131502       10.5225       64.80\n194               Glee  94.1079796       10.2925       64.10\n195               Glee 104.3830930       12.0000       63.30\n196               Glee 106.2535377        9.1425       63.20\n197               Glee 107.0021999       11.9000       63.20\n198               Glee 114.1807443       12.1000       62.90\n199               Glee 121.6660809       12.0000       63.40\n200           HRS 3419  96.0026704       15.6750          NA\n201           HRS 3419 100.6631673       12.9390          NA\n202           HRS 3419 102.4583922       14.1930          NA\n203           HRS 3419 103.5033286       14.4780          NA\n204           HRS 3504 107.0732240       15.9030          NA\n205           HRS 3504 127.7913473       14.6490          NA\n206           HRS 3504 138.1733786       13.7370          NA\n207           HRS 3504 154.1583107       15.1050          NA\n208           HRS 3530  93.8871388       14.1360          NA\n209           HRS 3530 107.8144686       14.1930          NA\n210           HRS 3530 112.5381533       13.6230          NA\n211           HRS 3530 149.4795032       12.9960          NA\n212           HRS 3616  63.8807374       14.1930          NA\n213           HRS 3616  93.2814679       14.2500          NA\n214           HRS 3616 113.5667832       12.7680          NA\n215           HRS 3616 145.1790173       13.6800          NA\n216      IDN-02-29001A  72.3547170            NA       61.50\n217      IDN-02-29001A  82.2909909            NA       60.10\n218      IDN-02-29001A 143.1945203            NA       60.40\n219      IDN-02-29001A 143.6095658            NA       60.20\n220       IDN07-28017B   9.1558242            NA       53.90\n221       IDN07-28017B  17.1063319            NA       47.20\n222       IDN07-28017B  53.2811388            NA       60.60\n223       IDN07-28017B  58.2928452        8.7400       64.30\n224       IDN07-28017B  62.0360204        7.9925       62.40\n225       IDN07-28017B  64.4009900        7.9350       63.60\n226       IDN07-28017B  70.1266107        7.3025       64.20\n227       IDN07-28017B 113.3344495            NA       60.20\n228       IDN07-28017B 117.8353240            NA       61.70\n229       IDN07-28017B 131.0416211            NA       62.60\n230       IDN07-28017B 142.7320453            NA       59.80\n231       IDN09-08357A 108.6688653            NA       61.10\n232       IDN09-08357A 115.9860067            NA       62.80\n233       IDN09-08357A 121.4010400            NA       62.00\n234       IDN09-08357A 132.6032106            NA       61.10\n235       IDN09-15702A  17.5320305            NA       60.85\n236       IDN09-15702A  26.5516815            NA       58.40\n237       IDN09-15702A  47.0192085            NA       63.30\n238       IDN09-15702A  58.1648838        6.7850       64.10\n239       IDN09-15702A  64.2034055        8.2225       64.40\n240       IDN09-15702A  64.5493951        8.6825       64.50\n241       IDN09-15702A  74.2616602        7.2450       64.10\n242       IDN10-08606A  10.2861471            NA       61.10\n243       IDN10-08606A  35.8257441            NA       61.30\n244       IDN10-08606A  41.6581974            NA       60.90\n245       IDN10-08606A  53.6837337        7.7625       62.70\n246       IDN10-08606A  61.3020455        8.4525       63.30\n247       IDN10-08606A  63.1928927        6.9575       63.50\n248       IDN10-08606A  63.4417627        8.4525       63.80\n249      IDN14-75044DH  13.3217759            NA       58.00\n250      IDN14-75044DH  26.2295410            NA       55.90\n251      IDN14-75044DH  59.1073754        8.6250       64.20\n252      IDN14-75044DH  62.4338092            NA       60.10\n253      IDN14-75044DH  65.2520748        7.5325       64.50\n254      IDN14-75044DH  65.6601309        8.1650       62.80\n255      IDN14-75044DH  68.6963642        9.2575       62.50\n256            IDO1005  27.3932951            NA       61.10\n257            IDO1005  30.7892614            NA       62.50\n258            IDO1005  38.1654842            NA       61.70\n259            IDO1005  57.0000354        7.9000       57.90\n260            IDO1005  65.7846867        9.7175       62.90\n261            IDO1005  70.8194767        8.0500       61.40\n262            IDO1005  73.8658260        7.9925       64.70\n263            IDO1005  74.2624261        7.9000       55.40\n264            IDO1005  75.7987164        8.0000       59.00\n265            IDO1005  79.7742537        7.9000       58.70\n266            IDO1005  93.6979588        7.7625       62.40\n267           IDO1202S  91.0053204       15.6750          NA\n268           IDO1202S  99.1633782       15.1620          NA\n269           IDO1202S 121.4455061       13.9650          NA\n270           IDO1202S 149.0647660       15.7890          NA\n271         IDO1203S-A  95.0968361       12.9390          NA\n272         IDO1203S-A  95.5933972            NA          NA\n273         IDO1203S-A 108.7028315       15.0480          NA\n274         IDO1203S-A 124.6267170       14.9910          NA\n275         IDO1203S-A 138.1515395            NA          NA\n276         IDO1203S-A 159.8833393       14.2500          NA\n277         IDO1203S-A 159.8956034            NA          NA\n278         IDO1203S-A 165.6656805            NA          NA\n279           IDO1401S  12.0606199            NA       32.90\n280           IDO1401S  39.1491552            NA       63.50\n281           IDO1401S  40.6806625            NA       61.10\n282           IDO1401S  48.5296374            NA       61.80\n283           IDO1401S 104.4676088        9.6025       62.90\n284           IDO1401S 109.0289715        9.2575       62.80\n285           IDO1401S 116.1776748        8.8550       62.00\n286           IDO1401S 116.2593122        8.8000       62.70\n287           IDO1401S 118.1088265        8.6000       59.90\n288           IDO1401S 118.9959819        8.9000       61.30\n289           IDO1401S 119.9749900        9.0000       61.00\n290           IDO1401S 126.2417734        9.6025       62.70\n291           IDO1403S  27.2799737            NA       59.20\n292           IDO1403S  29.7686730            NA       61.30\n293           IDO1403S  33.5017221            NA       62.40\n294           IDO1403S  35.4161062            NA       57.40\n295           IDO1403S  94.9455831        9.3150       61.70\n296           IDO1403S 103.7443041        9.2000       61.20\n297           IDO1403S 111.6398690        8.1650       61.60\n298           IDO1403S 121.0825788        9.3150       62.50\n299           IDO1405S  30.8215843            NA       62.60\n300           IDO1405S  32.7359684            NA       61.10\n301           IDO1405S  35.7032638            NA       62.40\n302           IDO1405S  38.0005247            NA       63.20\n303           IDO1405S  96.2593268        8.8000       61.70\n304           IDO1405S  98.6412714        7.8775       60.50\n305           IDO1405S 105.5108210        8.5000       61.60\n306           IDO1405S 105.8941575        9.4875       61.10\n307           IDO1405S 109.4489321       10.3000       61.30\n308           IDO1405S 112.5866227       10.1200       61.00\n309           IDO1405S 114.9228967        8.5000       62.60\n310           IDO1405S 115.0883599        9.5000       60.80\n311           IDO1405S 120.6530467        9.9000       61.00\n312           IDO1405S 123.3538832       10.3000       61.40\n313           IDO1405S 124.1883250        9.8000       61.00\n314           IDO1405S 126.4135139       10.0050       61.50\n315            IDO1506  25.5479195            NA       59.60\n316            IDO1506  29.5604586            NA       60.10\n317            IDO1506  35.5296795            NA       61.00\n318            IDO1506  58.6255652            NA       66.30\n319            IDO1506  63.9919567            NA       63.90\n320            IDO1506  65.9333639            NA       63.80\n321            IDO1506  69.9107891            NA       64.70\n322            IDO1506  78.0844217        8.4000       59.10\n323            IDO1506  80.4662190        8.1000       58.60\n324            IDO1506  85.8771072        8.5000       59.00\n325            IDO1506  87.1064683        9.0000       59.20\n326            IDO1506 102.0604754            NA       63.00\n327            IDO1506 103.5697195            NA       63.60\n328            IDO1506 124.0094671            NA       60.30\n329            IDO1506 127.9572902            NA       63.20\n330           IDO1602S  24.1212399            NA       59.30\n331           IDO1602S  28.0457273            NA       61.20\n332           IDO1602S  33.4060029            NA       61.50\n333           IDO1602S  38.5748400            NA       62.60\n334           IDO1602S  73.2971733        9.5450       65.40\n335           IDO1602S  80.3206255       12.6500       63.60\n336           IDO1602S  85.0512640       14.9340          NA\n337           IDO1602S  87.8057647       14.7060          NA\n338           IDO1602S 102.1130977       10.6950       64.80\n339           IDO1602S 106.6795990       11.3850       64.20\n340           IDO1602S 112.0967980       15.2190          NA\n341           IDO1602S 119.8486829       14.3070          NA\n342           IDO1602S 123.4564327            NA          NA\n343           IDO1602S 136.8219240            NA          NA\n344           IDO1602S 145.7995045            NA          NA\n345           IDO1602S 161.9090480            NA          NA\n346           IDO1603S  19.7181564            NA       52.90\n347           IDO1603S  29.0029194            NA       60.50\n348           IDO1603S  33.0231260            NA       61.20\n349           IDO1603S  33.3102836            NA       61.90\n350           IDO1603S  59.5292855       11.5575       64.60\n351           IDO1603S  62.8594643       11.6000       63.30\n352           IDO1603S  84.2113410       12.7000       63.50\n353           IDO1603S  91.1271141       13.3000       63.90\n354           IDO1603S  92.5534981       11.1000       62.40\n355           IDO1603S  93.8091860       13.0000       63.10\n356           IDO1603S  94.4368305       12.1900       64.70\n357           IDO1603S  95.4545348       13.2000       63.60\n358           IDO1603S  96.1685019       12.5000       62.80\n359           IDO1603S  98.2452055       12.0175       66.00\n360           IDO1603S  99.4326174       11.3275       64.50\n361           IDO1603S 104.1255630       12.2000       63.70\n362           IDO1604S  22.6854518            NA       57.70\n363           IDO1604S  23.7383631            NA       58.30\n364           IDO1604S  31.1087419            NA       58.80\n365           IDO1604S  33.6931605            NA       60.40\n366           IDO1604S  73.2126885       10.7525       65.00\n367           IDO1604S  83.0533484       11.1550       64.50\n368           IDO1604S 109.1742431       11.7300       64.80\n369           IDO1604S 112.7763281       11.0400       65.10\n370            IDO1607  13.4175757            NA       59.05\n371            IDO1607  20.2357253            NA       55.30\n372            IDO1607  37.0420027            NA       62.80\n373            IDO1607  49.8034988            NA       62.90\n374            IDO1607  56.9826206            NA       62.40\n375            IDO1607  57.1418470            NA       66.00\n376            IDO1607  66.8336483            NA       63.60\n377            IDO1607  68.6935856        8.0000       58.40\n378            IDO1607  74.9300343        8.4000       58.90\n379            IDO1607  77.3669604        8.3000       59.20\n380            IDO1607  81.8072935        8.6000       59.70\n381            IDO1607 162.7163741        9.4000       61.70\n382            IDO1607 164.2297754        9.3000       61.70\n383            IDO1607 179.4932719       11.2000       61.10\n384            IDO1607 185.5120154       10.7000       61.80\n385           IDO1701S  82.4573963       13.1000       64.20\n386           IDO1701S  82.8510995       13.7000       64.20\n387           IDO1701S  88.6488394       14.3000       63.10\n388           IDO1701S  90.8687190       14.1000       64.20\n389           IDO1702S 101.3486065        9.1000       62.10\n390           IDO1702S 112.9100002        9.5000       62.90\n391           IDO1702S 120.8517225       10.5000       63.30\n392           IDO1702S 121.0022496        9.6000       62.80\n393            IDO1706   4.1679417            NA       58.75\n394            IDO1706  20.0080042            NA       56.60\n395            IDO1706  36.0991584            NA       60.90\n396            IDO1706  63.2331956            NA       65.90\n397            IDO1706  71.0074289            NA       65.40\n398            IDO1706  71.7214236            NA       66.40\n399            IDO1706  75.6100919            NA       64.40\n400            IDO1706  86.5093447        7.8000       57.90\n401            IDO1706  88.3195058        7.6000       57.90\n402            IDO1706  91.9711308        7.8000       59.30\n403            IDO1706  97.3603512        7.7000       57.60\n404            IDO1708  10.6332955            NA       59.20\n405            IDO1708  11.7734623            NA       57.80\n406            IDO1708  20.9535992            NA       57.30\n407            IDO1708  39.6959738        6.7275       65.60\n408            IDO1708  39.7362061        6.4975       65.10\n409            IDO1708  44.5826106        6.4975       63.10\n410            IDO1708  45.2300452        7.8200       62.10\n411            IDO1708  79.3608183        6.8000       58.00\n412            IDO1708  86.2630083        6.7000       56.80\n413            IDO1708  91.0587448        7.1000       57.30\n414            IDO1708  93.3201787        6.7000       56.80\n415            IDO1708 130.6452388       10.0000       57.70\n416            IDO1708 142.6868165        9.5000       59.00\n417            IDO1708 157.1375561        8.0000       59.60\n418            IDO1708 182.3970502        8.4000       59.90\n419           IDO1804S  66.3617270       11.1000       63.50\n420           IDO1804S  93.8124062       10.8000       63.20\n421           IDO1804S  94.1923037       10.7000       63.00\n422           IDO1804S 118.7093931       12.3000       62.90\n423           IDO1805S  87.0497552       10.8000       61.80\n424           IDO1805S  88.7684662       10.7000       63.30\n425           IDO1805S  89.4200677       12.4000       63.50\n426           IDO1805S  96.3215725       12.1000       63.30\n427           IDO1805S  98.1471838       12.1000       63.50\n428           IDO1805S 100.1582389       11.6000       62.10\n429           IDO1805S 103.1339311       10.9000       61.00\n430           IDO1805S 111.6772819       11.5000       61.50\n431            IDO1806  77.1205726        8.6000       63.10\n432            IDO1806  85.7456872        8.6000       62.40\n433            IDO1806  87.0318728        8.2000       62.10\n434            IDO1806  96.9724375        8.6000       62.40\n435            IDO1806 139.4570891       11.1000       64.60\n436            IDO1806 160.5205149       12.4000       64.30\n437            IDO1806 162.1916817       11.3000       65.00\n438            IDO1806 163.0889133       11.9000       65.00\n439            IDO1906 137.2984395       10.2000       60.80\n440            IDO1906 153.3998720       11.9000       59.90\n441            IDO1906 154.1805780       11.5000       60.60\n442            IDO1906 167.2335552       11.6000       60.70\n443                Irv 136.7434595       11.1000       61.50\n444                Irv 159.4778304       11.4000       61.40\n445                Irv 167.1881339       10.6000       62.10\n446                Irv 180.3097266       10.6000       61.80\n447             Jasper  52.5624343            NA       56.90\n448             Jasper  90.1369809            NA       58.40\n449             Jasper  97.2476529            NA       60.40\n450             Jasper 118.9567743            NA       61.10\n451             Jasper 124.9436181        9.0000       59.80\n452             Jasper 126.7849837        8.8000       60.00\n453             Jasper 134.7365399       10.4000       60.20\n454             Jasper 144.7637219        9.5000       60.70\n455          Jefferson  20.8667869            NA       56.90\n456          Jefferson  23.7383631            NA       61.60\n457          Jefferson  27.5671313            NA       63.20\n458          Jefferson  33.6931605            NA       63.40\n459          Jefferson  65.2658886       10.2350       62.80\n460          Jefferson  80.4879896       11.0000       63.70\n461          Jefferson  80.7444234       14.7060          NA\n462          Jefferson  84.6875170       10.5225       65.60\n463          Jefferson  86.2768568       13.6800          NA\n464          Jefferson  88.5640780       11.0000       63.30\n465          Jefferson  91.3452210       10.1775       65.10\n466          Jefferson 100.7379683       12.4000       64.00\n467          Jefferson 103.0557043       15.7890          NA\n468          Jefferson 104.3735521       11.0400       65.20\n469          Jefferson 106.9585816       12.4000       63.70\n470          Jefferson 129.5272384            NA          NA\n471          Jefferson 131.0376473            NA          NA\n472          Jefferson 140.4893331            NA          NA\n473          Jefferson 144.3428627       14.0790          NA\n474          Jefferson 146.3547143            NA          NA\n475             Kairos 161.4397216        9.3000       61.60\n476             Kairos 164.7688358        9.7000       61.80\n477             Kairos 176.9033720       11.3000       62.10\n478             Kairos 188.9446474       10.4000       62.60\n479           Kaseberg 115.6488796            NA       60.40\n480           Kaseberg 121.8220635            NA       61.20\n481           Kaseberg 160.2087161            NA       62.30\n482           Kaseberg 170.4025714            NA       60.50\n483             Keldin  13.8413599            NA       61.05\n484             Keldin  26.4270047            NA       57.00\n485             Keldin  35.7199492            NA       65.10\n486             Keldin  51.4261811            NA       63.20\n487             Keldin  62.0881118            NA       66.40\n488             Keldin  64.1605031            NA       64.50\n489             Keldin  75.6396679        8.3000       60.40\n490             Keldin  76.9608209            NA       62.20\n491             Keldin  81.6915720            NA       59.80\n492             Keldin  82.5318119        7.8000       59.40\n493             Keldin  86.0832168            NA       64.10\n494             Keldin  87.9306672        8.1000       60.40\n495             Keldin  96.2171217        8.3000       61.10\n496             Keldin 108.8650917            NA       64.70\n497             Keldin 119.4249017            NA       63.20\n498             Keldin 167.0205849        9.2000       63.10\n499             Keldin 172.1132199       11.2000       64.00\n500             Keldin 182.3625309        9.9000       63.70\n501             Keldin 187.1650358        9.7000       63.80\n502          LCS 72916  71.4342891        6.5000       56.70\n503          LCS 72916  79.6522717        6.8000       56.80\n504          LCS 72916  93.5411561        6.8000       58.10\n505          LCS 72916 101.1890612        7.6000       58.10\n506        LCS Artdeco   9.8294456            NA       26.50\n507        LCS Artdeco  18.5113085            NA       51.90\n508        LCS Artdeco  38.5095494            NA       61.00\n509        LCS Artdeco  86.0595964        7.6000       56.40\n510        LCS Artdeco  91.6756350        6.9000       58.20\n511        LCS Artdeco  94.4236268        6.8000       57.70\n512        LCS Artdeco  99.2604294        6.8000       57.80\n513        LCS Artdeco 103.3896626            NA       62.70\n514        LCS Artdeco 120.3414585            NA       60.40\n515        LCS Artdeco 124.8982583            NA       60.40\n516        LCS Artdeco 141.4244715       10.2000       60.70\n517        LCS Artdeco 150.5108344        8.5000       60.50\n518        LCS Artdeco 154.9664630       10.1000       61.50\n519        LCS Artdeco 155.2598373       10.0000       61.50\n520        LCS Artdeco 164.8341163            NA       65.30\n521          LCS Atomo 104.9931831       13.5660          NA\n522          LCS Atomo 108.9986784       13.2240          NA\n523          LCS Atomo 124.3382012       15.8460          NA\n524          LCS Atomo 169.8232616       14.2500          NA\n525        LCS Aymeric 110.7717560            NA       63.00\n526        LCS Aymeric 116.2846969            NA       59.30\n527        LCS Aymeric 146.8021845            NA       59.80\n528        LCS Aymeric 178.8655715            NA       59.00\n529        LCS Biancor  81.5372082            NA       62.10\n530        LCS Biancor  90.7176953            NA       57.50\n531        LCS Biancor 113.8594784            NA       65.10\n532        LCS Biancor 127.9089530            NA       60.60\n533          LCS Drive  45.2349722        6.6700       62.30\n534          LCS Drive  49.6262772        7.4175       63.50\n535          LCS Drive  49.8982407        6.4400       62.40\n536          LCS Drive  55.1455071        7.1875       59.90\n537          LCS Drive  80.9863491        7.2000       57.00\n538          LCS Drive  86.3383060        7.4000       55.60\n539          LCS Drive  89.0944083        7.3000       54.00\n540          LCS Drive  96.0045460        7.2000       56.20\n541          LCS Drive 106.0856516            NA       62.30\n542          LCS Drive 129.5147173            NA       61.50\n543          LCS Drive 131.4974501            NA       61.50\n544          LCS Drive 140.9905713        9.3000       59.40\n545          LCS Drive 142.6065434       10.4000       63.00\n546          LCS Drive 150.1296604        8.5000       58.70\n547          LCS Drive 155.1891764        8.8000       59.20\n548          LCS Drive 157.7589693            NA       59.40\n549          LCS Evina 104.0003522            NA       61.80\n550          LCS Evina 115.2842095            NA       60.60\n551          LCS Evina 158.6326529            NA       61.70\n552          LCS Evina 161.2026946            NA       64.30\n553           LCS Hulk  67.9357176        7.2000       59.90\n554           LCS Hulk  85.1721498        6.8000       60.50\n555           LCS Hulk  89.0407440        7.3000       60.50\n556           LCS Hulk 110.6546642        7.9000       59.70\n557           LCS Hulk 148.5197438        9.0000       62.70\n558           LCS Hulk 149.3794031        9.4000       62.20\n559           LCS Hulk 154.8285064       10.0000       62.90\n560           LCS Hulk 157.8845186        9.6000       62.70\n561           LCS Iron  17.1337378            NA       46.10\n562           LCS Iron  27.7585697            NA       60.40\n563           LCS Iron  28.5243233            NA       59.40\n564           LCS Iron  33.0231260            NA       64.30\n565           LCS Iron  70.2890008        9.8900       64.10\n566           LCS Iron  78.2713130       14.2500          NA\n567           LCS Iron  85.2045830       15.1050          NA\n568           LCS Iron 101.6261993       11.6725       64.20\n569           LCS Iron 103.3087918        9.7175       62.30\n570           LCS Iron 112.1798463       11.2700       64.90\n571           LCS Iron 122.6928866            NA          NA\n572           LCS Iron 124.1938918       14.5920          NA\n573           LCS Iron 138.9044829            NA          NA\n574           LCS Iron 140.5649049       14.3640          NA\n575           LCS Iron 143.0476588            NA          NA\n576           LCS Iron 160.6040465            NA          NA\n577            LCS Jet  18.5809417            NA       52.30\n578            LCS Jet  29.1965744            NA       62.80\n579            LCS Jet  54.1026614            NA       66.10\n580            LCS Jet  54.4315123            NA       66.20\n581            LCS Jet  55.5695935            NA       63.40\n582            LCS Jet  57.4981844            NA       63.20\n583            LCS Jet  61.6591789            NA       65.20\n584            LCS Jet  92.5010843        8.0000       58.80\n585            LCS Jet  96.1706516        7.4000       58.20\n586            LCS Jet 110.8631204        8.0000       59.00\n587            LCS Jet 112.5513595            NA       60.30\n588            LCS Jet 112.8481656        7.7000       58.70\n589            LCS Jet 120.2186457            NA       61.50\n590            LCS Jet 124.8909443            NA       59.80\n591            LCS Jet 166.7814098            NA       62.20\n592            LCS Jet 170.4871822        8.8000       61.40\n593            LCS Jet 175.8473170        8.6000       61.30\n594            LCS Jet 188.3968715        9.2000       61.60\n595            LCS Jet 197.1643282       10.5000       62.60\n596           LCS Luna  18.5695259            NA       50.50\n597           LCS Luna  22.3025750            NA       58.80\n598           LCS Luna  30.7258651            NA       61.80\n599           LCS Luna  31.7787764            NA       62.90\n600           LCS Luna  49.4848143       12.5925       64.30\n601           LCS Luna  97.0033546       11.8450       64.50\n602           LCS Luna 103.3553113       10.6950       65.10\n603           LCS Luna 109.4361510       10.6950       64.70\n604         LCS Rocket  92.9590458        7.4000       57.50\n605         LCS Rocket  93.5219377        7.6000       56.50\n606         LCS Rocket  96.4660018        7.8000       57.60\n607         LCS Rocket 101.1700398        7.7000       58.30\n608         LCS Rocket 175.9408800        8.3000       60.40\n609         LCS Rocket 191.5285523        8.9000       61.10\n610         LCS Rocket 192.7371837        9.8000       61.20\n611         LCS Rocket 195.7959264       10.6000       60.10\n612          LCS Shark  78.5964842        8.3000       57.00\n613          LCS Shark  83.1501152        7.5000       56.50\n614          LCS Shark  90.0880785        8.6000       56.80\n615          LCS Shark  99.2779521        7.7000       56.80\n616          LCS Shark 132.1068712        9.2000       60.20\n617          LCS Shark 135.6822860       10.3000       60.40\n618          LCS Shark 143.2153276        9.7000       59.80\n619          LCS Shark 143.9889605        9.9000       60.20\n620          LCS Sonic  81.2749592        7.1000       58.60\n621          LCS Sonic  84.3976071        7.6000       58.00\n622          LCS Sonic  92.6714121        7.1000       58.00\n623          LCS Sonic  98.9110553        7.0000       58.50\n624           LCS Star  57.5380993            NA          NA\n625           LCS Star  97.3591093       14.4780          NA\n626           LCS Star 105.8854514       13.2240          NA\n627           LCS Star 123.6163120       14.5350          NA\n628           LCS Star 131.3673919       13.8510          NA\n629           LCS Star 148.4030671            NA          NA\n630           LCS Star 193.3145216            NA          NA\n631           LCS Star 197.9921644            NA          NA\n632           LCS Yeti  76.3433064        8.4000       60.10\n633           LCS Yeti  77.9067114        8.1000       59.40\n634           LCS Yeti  85.3356175        8.0000       61.80\n635           LCS Yeti  87.6346147        8.0000       59.70\n636        LWW14-71195   3.3815480            NA       59.56\n637        LWW14-71195   5.1130983            NA       57.80\n638        LWW14-71195  36.4705490            NA       58.90\n639        LWW14-71195  56.4901825            NA       57.30\n640        LWW14-71195 120.4908208            NA       63.00\n641        LWW14-71195 121.5094304            NA       57.60\n642        LWW14-71195 128.6053717            NA       63.80\n643        LWW14-72916   0.7052994            NA       59.20\n644        LWW14-72916   1.0075706            NA       57.80\n645        LWW14-72916  30.8004455            NA       57.80\n646        LWW14-72916  47.5429638        6.5550       61.40\n647        LWW14-72916  50.8934181        6.2675       64.00\n648        LWW14-72916  55.8816381        7.5900       64.40\n649        LWW14-72916  64.1509614        6.9575       62.10\n650        LWW14-72916 112.6897251            NA       61.70\n651        LWW14-72916 112.6958915            NA       60.30\n652        LWW14-72916 118.8098101            NA       58.70\n653        LWW14-72916 120.8798136            NA       63.00\n654        LWW14-73161  23.4411297            NA       59.80\n655        LWW14-73161  28.3818932            NA       61.60\n656        LWW14-73161  39.5771510            NA       62.60\n657        LWW14-73161  67.6400420            NA       60.50\n658        LWW14-73161  99.5908935            NA       56.10\n659        LWW14-73161 107.7189418            NA       60.50\n660        LWW14-73161 110.7635170            NA       63.30\n661        LWW14-73163  14.3839165            NA       62.50\n662        LWW14-73163  32.1926057            NA       62.80\n663        LWW14-73163  47.1729940            NA       62.20\n664        LWW14-73163  61.9378830        7.1300       61.10\n665        LWW14-73163  62.4069071        6.9575       61.50\n666        LWW14-73163  66.1075527        7.6475       64.40\n667        LWW14-73163  77.2836868        6.7850       62.10\n668        LWW14-73163 104.0258225            NA       60.20\n669        LWW14-73163 119.9604648            NA       59.20\n670        LWW14-73163 130.6881533            NA       61.80\n671        LWW14-73163 134.2211020            NA       62.60\n672        LWW14-73915  23.7122267            NA       54.90\n673        LWW14-73915  24.0670326            NA       60.70\n674        LWW14-73915  31.3181151            NA       62.70\n675        LWW14-73915  54.5528137            NA       66.80\n676        LWW14-73915  57.2578990            NA       62.90\n677        LWW14-73915  59.6041984            NA       62.40\n678        LWW14-73915  72.7770050            NA       63.60\n679        LWW14-73915  93.1534994        8.0000       57.00\n680        LWW14-73915  93.9153497        7.9000       56.00\n681        LWW14-73915  94.3890097        7.6000       56.50\n682        LWW14-73915 104.3870155        8.2000       55.30\n683        LWW14-73915 115.4966397            NA       64.70\n684        LWW14-73915 119.9571419            NA       63.30\n685        LWW14-73915 122.0203111            NA       59.70\n686        LWW14-73915 170.5854203            NA       60.40\n687        LWW14-74143  80.5834821            NA       55.80\n688        LWW14-74143 100.6345452            NA       58.70\n689        LWW14-74143 101.8395494            NA       61.90\n690        LWW14-74143 120.6802642            NA       61.60\n691        LWW15-71945  57.6290013        7.6000       55.90\n692        LWW15-71945  74.2941998        7.2000       56.60\n693        LWW15-71945  90.6009203        7.1000       56.40\n694        LWW15-71945  92.1551444        7.2000       56.30\n695        LWW16-71088 152.6717611        9.4000       62.10\n696        LWW16-71088 161.7581341        7.7000       61.80\n697        LWW16-71088 163.9368243        8.9000       61.70\n698        LWW16-71088 189.6583097        8.4000       61.60\n699          LWW176268 136.4751232       10.4000       60.30\n700          LWW176268 146.4976704        8.3000       60.50\n701          LWW176268 155.1060317       10.2000       60.90\n702          LWW176268 157.1555916        9.2000       61.10\n703             M-Idas 131.4668119        9.8000       61.50\n704             M-Idas 142.0698810        9.8000       62.00\n705             M-Idas 143.4785857        9.0000       61.40\n706             M-Idas 144.1439249        8.3000       60.60\n707             M-Idas 149.4827798        9.6000       61.70\n708             M-Idas 152.9814783       10.1000       61.80\n709             M-Idas 155.1545966        9.8000       62.00\n710             M-Idas 156.8854015        9.8000       62.20\n711            M-Press 136.6330801        8.5000       61.20\n712            M-Press 146.3216680        9.5000       61.40\n713            M-Press 156.9093212        9.7000       59.80\n714            M-Press 163.9103655        9.4000       61.00\n715            Mandala  58.4874575            NA       65.30\n716            Mandala  61.5635705            NA       66.90\n717            Mandala  63.8642773            NA       66.60\n718            Mandala  69.3093601            NA       64.00\n719            Mandala 105.7957655            NA       63.20\n720            Mandala 106.9494863            NA       63.80\n721            Mandala 118.8265277            NA       63.80\n722            Mandala 131.4910097            NA       62.90\n723               Mary  45.2841065            NA       53.80\n724               Mary 101.5649763            NA       60.80\n725               Mary 119.3933507            NA       62.80\n726               Mary 146.1180299            NA       59.70\n727              Melba  24.3126783            NA       60.40\n728              Melba  29.5772346            NA       61.90\n729              Melba  31.2044611            NA       59.00\n730              Melba  31.6830571            NA       52.30\n731              Melba  87.7236411        8.4000       61.80\n732              Melba  95.5098091        8.8000       61.30\n733              Melba 100.3003472        8.5675       61.70\n734              Melba 103.1462980        8.4000       61.00\n735              Melba 105.2974137        8.4525       62.60\n736              Melba 106.4878335       10.4000       62.00\n737              Melba 108.3653019       10.3000       61.40\n738              Melba 116.6563212       10.2000       61.90\n739              Melba 118.8303645       10.9440          NA\n740              Melba 120.0484889       10.4075       61.60\n741              Melba 120.7812636            NA       63.60\n742              Melba 121.8802839       11.7420          NA\n743              Melba 122.2047187            NA          NA\n744              Melba 128.0627345            NA          NA\n745              Melba 129.4320341        7.7625       62.20\n746              Melba 131.5099883       10.1460          NA\n747              Melba 132.1824783        8.9000       62.70\n748              Melba 138.4769848            NA          NA\n749              Melba 149.0647660       11.3430          NA\n750              Melba 152.9593016            NA          NA\n751         Metropolis  46.7779759            NA       63.60\n752         Metropolis  56.7471816            NA       63.80\n753         Metropolis  61.1309298            NA       63.50\n754         Metropolis  66.4344892            NA       63.60\n755         Metropolis  91.6226217            NA       64.20\n756         Metropolis  95.1028826            NA       64.70\n757         Metropolis 120.9655085            NA       63.10\n758         Metropolis 149.5834059            NA       66.40\n759             Millie 117.9808817       11.4000       63.30\n760             Millie 169.3190048       10.0000       64.60\n761             Millie 171.0694170       11.0000       64.50\n762             Millie 191.7818052       10.6000       64.30\n763         NSA10-2196  20.3286434            NA       56.60\n764         NSA10-2196  23.5363351            NA       59.90\n765         NSA10-2196  49.9293343            NA       64.70\n766         NSA10-2196  61.5705933            NA       63.90\n767         NSA10-2196  64.3092507            NA       62.80\n768         NSA10-2196  69.6142509            NA       66.10\n769         NSA10-2196  70.9534231            NA       62.30\n770         NSA10-2196 103.0359720            NA       64.60\n771         NSA10-2196 125.5728208            NA       61.10\n772         NSA10-2196 170.1926249            NA       62.10\n773         NSA10-2196 193.4258239            NA       60.90\n774              Nixon 139.5942900       10.2000       61.60\n775              Nixon 142.6738793       10.0000       61.20\n776              Nixon 150.9392434       10.4000       61.70\n777              Nixon 159.6923523        9.9000       61.60\n778        Norwest 553 100.5157406            NA       63.30\n779        Norwest 553 107.8050306            NA       60.30\n780        Norwest 553 128.9621283            NA       63.20\n781        Norwest 553 144.2600625            NA       62.20\n782       Norwest Duet  14.0814438            NA       57.15\n783       Norwest Duet  19.0832862            NA       53.40\n784       Norwest Duet  56.3720832            NA       60.90\n785       Norwest Duet 103.6918129            NA       63.40\n786       Norwest Duet 128.3380269            NA       63.40\n787       Norwest Duet 129.5137470        9.0000       61.60\n788       Norwest Duet 131.0158636        9.5000       61.80\n789       Norwest Duet 134.7767742            NA       62.90\n790       Norwest Duet 147.8630092       10.1000       62.10\n791       Norwest Duet 150.4565566        9.8000       61.90\n792       Norwest Duet 158.0104700            NA       59.90\n793     Norwest Tandem  19.6789115            NA       62.30\n794     Norwest Tandem  38.2755109            NA       62.20\n795     Norwest Tandem  53.8930565            NA       62.40\n796     Norwest Tandem  69.4250239        7.7000       58.40\n797     Norwest Tandem  70.5340621        7.4175       64.90\n798     Norwest Tandem  72.2553856        7.7050       63.50\n799     Norwest Tandem  73.6141047        8.1075       63.40\n800     Norwest Tandem  75.3012917        7.4750       61.80\n801     Norwest Tandem  79.9572910        7.8000       59.40\n802     Norwest Tandem  80.0086771        7.6000       58.80\n803     Norwest Tandem  84.6514116        7.5000       59.30\n804     Norwest Tandem  97.4252433            NA       63.30\n805     Norwest Tandem 105.5612393            NA       57.00\n806     Norwest Tandem 123.9816844            NA       64.50\n807     Norwest Tandem 126.6611936        8.8000       61.70\n808     Norwest Tandem 135.4465145        9.5000       61.30\n809     Norwest Tandem 137.7709397        9.8000       61.60\n810     Norwest Tandem 137.9291918            NA       60.70\n811     Norwest Tandem 148.6833330        9.5000       61.80\n812            NuGrain  72.5851580        9.0000       61.20\n813            NuGrain  74.6115262        8.9000       61.60\n814            NuGrain  77.0387145       10.8000       60.70\n815            NuGrain  79.8167757        8.8000       61.00\n816            NuGrain 132.9177741       12.1000       64.70\n817            NuGrain 135.0874566       11.8000       65.00\n818            NuGrain 143.3087395       11.6000       64.90\n819            NuGrain 151.0733007       11.3000       65.00\n820          OR2101043   9.8887411            NA       58.90\n821          OR2101043  13.3685473            NA       57.80\n822          OR2101043  50.1802395        8.5675       64.00\n823          OR2101043  56.1555361            NA       59.20\n824          OR2101043  57.3689332        7.7050       62.70\n825          OR2101043  61.3617541        7.7050       63.40\n826          OR2101043  65.2728510        7.7050       62.60\n827          OR2110679  13.4155303            NA       63.00\n828          OR2110679  22.5786090            NA       62.20\n829          OR2110679  28.7628052            NA       63.80\n830          OR2110679  50.1097499            NA       62.10\n831          OR2110679  52.9828777            NA       62.40\n832          OR2110679  54.3270978            NA       64.00\n833          OR2110679  58.7621616            NA       64.40\n834          OR2110679  81.9653572        8.3000       60.30\n835          OR2110679  89.2954821        8.8000       60.20\n836          OR2110679  91.4551886        8.9000       60.20\n837          OR2110679  96.0925275        8.2000       59.90\n838          OR2110679 115.4403547            NA       63.20\n839          OR2110679 116.9969597            NA       63.90\n840          OR2110679 124.4078122            NA       59.20\n841          OR2110679 132.2114943            NA       62.90\n842          OR2111025  73.1490948            NA       63.40\n843          OR2111025 108.9056867            NA       60.30\n844          OR2111025 125.2694715            NA       62.60\n845          OR2111025 153.1450624            NA       62.20\n846         OR2120276H  80.9094755            NA       61.10\n847         OR2120276H 104.7480028            NA       60.90\n848         OR2120276H 136.0817072            NA       64.00\n849         OR2120276H 156.1160699            NA       64.90\n850         OR2120358H  19.2525580            NA       54.50\n851         OR2120358H  25.5524939            NA       60.60\n852         OR2120358H  30.0565158            NA       59.50\n853         OR2120358H  45.8455902            NA       66.40\n854         OR2120358H  52.8410521            NA       66.50\n855         OR2120358H  56.3205258            NA       62.20\n856         OR2120358H  56.7798269            NA       68.10\n857          OR2121086   9.5414315            NA       61.20\n858          OR2121086  39.3599390            NA       60.20\n859          OR2121086  46.0818555            NA       62.20\n860          OR2121086  46.2411624        7.4175       63.00\n861          OR2121086  53.6308665        8.4525       64.00\n862          OR2121086  57.1157509        8.7400       61.70\n863          OR2121086  57.7166962        8.2800       62.00\n864          OR2121086  68.6696140        8.1000       59.60\n865          OR2121086  80.8823265        7.4000       58.70\n866          OR2121086  84.7710042        8.4000       58.80\n867          OR2121086  90.1582548            NA       57.70\n868          OR2121086 110.5287168            NA       60.90\n869          OR2121086 113.2856755        8.5000       59.20\n870          OR2121086 126.7189536            NA       61.50\n871          OR2121086 136.3535226            NA       61.00\n872          OR2121252  75.2306944            NA       57.60\n873          OR2121252  97.7989915            NA       58.00\n874          OR2121252  99.0134164            NA       61.70\n875          OR2121252 108.0643592            NA       60.70\n876          OR2121285  22.6715070            NA       58.50\n877          OR2121285  32.6886529            NA       60.70\n878          OR2121285  43.8850997        8.2225       64.60\n879          OR2121285  45.0736803        7.4175       63.10\n880          OR2121285  48.4103310        8.2225       63.20\n881          OR2121285  51.8959307        7.3600       64.90\n882          OR2121285  52.6135729            NA       61.70\n883          OR2121285  75.9198849            NA       56.90\n884          OR2121285 118.7206038            NA       61.60\n885          OR2121285 119.4434350            NA       63.20\n886          OR2121285 146.5721289            NA       62.80\n887         OR2130021R   8.5350095            NA       55.40\n888         OR2130021R  16.0678692            NA       45.30\n889         OR2130021R  44.5347409            NA       65.50\n890         OR2130021R  48.4028850            NA       66.10\n891         OR2130021R  59.2433370            NA       63.70\n892         OR2130021R  59.9638507            NA       64.00\n893         OR2130021R  75.6161930            NA       58.70\n894         OR2130021R  76.7689291            NA       62.80\n895         OR2130021R 121.6685047            NA       63.00\n896         OR2130021R 143.1369165            NA       62.30\n897         OR2130021R 186.7821146            NA       65.00\n898         OR2130118H  32.7319885            NA       63.70\n899         OR2130118H  33.7489396            NA       65.60\n900         OR2130118H  45.6226350            NA       65.40\n901         OR2130118H  62.1968689            NA       66.20\n902         OR2130118H  65.8446473            NA       62.20\n903         OR2130118H  69.0577798            NA       61.40\n904         OR2130118H  72.5229208        8.6000       61.60\n905         OR2130118H  76.9774537        8.2000       62.60\n906         OR2130118H  79.1321154            NA       64.20\n907         OR2130118H  87.2756143        8.4000       61.30\n908         OR2130118H  88.2220606        8.8000       61.70\n909         OR2130118H 101.6133306            NA       58.90\n910         OR2130118H 104.7300177            NA       63.10\n911         OR2130118H 130.2921377            NA       64.90\n912         OR2130118H 138.3446827            NA       63.80\n913          OR2130485  74.7464832            NA       58.20\n914          OR2130485 117.5537282            NA       62.10\n915          OR2130485 135.4373255            NA       58.00\n916          OR2130485 146.9215030            NA       60.40\n917          OR2140401 128.2396739        9.7000       60.90\n918          OR2140401 144.2764607        9.4000       60.90\n919          OR2140401 145.4126579       10.2000       61.40\n920          OR2140401 164.3426737        8.6000       60.70\n921         OR2150168H 146.7023584        9.9000       61.50\n922         OR2150168H 155.6407696       11.1000       61.50\n923         OR2150168H 164.6352319       10.2000       61.90\n924         OR2150168H 166.1661046       10.7000       61.50\n925         OR2150169R 175.6692188        9.4000       59.10\n926         OR2150169R 177.8664987        9.2000       59.00\n927         OR2150169R 180.9782295        8.6000       59.90\n928         OR2150169R 190.8608352       10.0000       58.50\n929         OR2160065H 161.3994389       11.8000       61.90\n930         OR2160065H 163.0331341       14.6000       45.70\n931         OR2160065H 163.1148280       10.8000       62.00\n932         OR2160065H 164.7866698       10.8000       61.60\n933          OR5170022 131.8604899        8.4000       60.40\n934          OR5170022 165.9634519       10.1000       61.10\n935          OR5170022 175.5165719        9.6000       60.50\n936          OR5170022 175.9356407        9.7000       61.40\n937      ORI2150031CL+  13.9285349            NA       57.50\n938      ORI2150031CL+  19.7906914            NA       54.60\n939      ORI2150031CL+  36.7122450            NA       60.40\n940      ORI2150031CL+  51.0137427        8.9000       58.30\n941      ORI2150031CL+  56.9763636        8.1075       65.70\n942      ORI2150031CL+  58.4342986        8.0000       57.90\n943      ORI2150031CL+  61.7842285        8.1075       64.80\n944      ORI2150031CL+  62.6499331        8.0500       62.60\n945      ORI2150031CL+  65.9249909        8.3950       62.90\n946      ORI2150031CL+  68.9613329        8.1000       58.60\n947      ORI2150031CL+  86.2640617        8.0000       57.90\n948     ORI2150061 Cl+  10.3432965            NA       52.85\n949     ORI2150061 Cl+  16.2574739            NA       45.00\n950     ORI2150061 Cl+  38.8788240            NA       60.70\n951     ORI2150061 Cl+  55.7958435       10.5225       64.60\n952     ORI2150061 Cl+  59.3396607        7.7625       62.70\n953     ORI2150061 Cl+  60.6686765        9.7175       64.80\n954     ORI2150061 Cl+  60.6694322        8.8550       63.10\n955      ORI2161250CL+  51.9066448        8.9000       56.20\n956      ORI2161250CL+  55.8328857        8.6000       57.00\n957      ORI2161250CL+  69.7035024        8.5000       57.10\n958      ORI2161250CL+  80.4816348        8.1000       57.50\n959               Purl 129.9746199        8.0000       61.50\n960               Purl 131.2652776        9.6000       61.50\n961               Purl 134.1609954        9.3000       61.80\n962               Purl 135.2147934       10.2000       62.00\n963            Rebelde  61.3323331            NA       66.50\n964            Rebelde  62.4273104            NA       66.70\n965            Rebelde  68.4493079            NA       64.10\n966            Rebelde  70.4549578            NA       63.80\n967            Rebelde  92.6281107            NA       65.20\n968            Rebelde 127.1858820            NA       62.20\n969            Rebelde 131.6947728            NA       66.20\n970            Rebelde 145.2879045            NA       65.30\n971            Rosalyn  51.0271530        7.7050       64.40\n972            Rosalyn  59.8009970        7.4750       62.70\n973            Rosalyn  61.7463740        6.8425       63.70\n974            Rosalyn  80.1067082        6.3250       62.10\n975            Rosalyn  84.9092328            NA       61.00\n976            Rosalyn 111.8496994            NA       63.80\n977            Rosalyn 133.1206888        9.4000       59.40\n978            Rosalyn 133.8429860            NA       63.00\n979            Rosalyn 144.5833668       10.1000       60.00\n980            Rosalyn 158.2934009        8.9000       60.30\n981            Rosalyn 166.2688869        8.4000       59.60\n982            Rosalyn 170.2797073            NA       63.90\n983               Ryan  13.6878464            NA       37.30\n984               Ryan  35.3203870            NA       58.20\n985               Ryan  37.8090863            NA       63.40\n986               Ryan  39.0534360            NA       62.10\n987               Ryan  88.0247520        8.8550       61.50\n988               Ryan  96.4353467        8.4525       61.70\n989               Ryan 102.5440785        9.6000       60.50\n990               Ryan 104.0593862        8.8000       62.80\n991               Ryan 105.8524187        8.5000       61.00\n992               Ryan 109.4351777       10.7000       61.90\n993               Ryan 109.9076815       11.0000       61.60\n994               Ryan 115.3010984        9.6000       61.90\n995               Ryan 117.4392035        9.7750       62.30\n996               Ryan 123.4635412        9.2000       62.00\n997               Ryan 127.3002503        8.2000       61.50\n998               Ryan 128.8651749        8.5100       30.80\n999      SY 05PN100-63  87.3740529            NA       55.50\n1000     SY 05PN100-63 105.6546250            NA       62.50\n1001     SY 05PN100-63 116.6788797            NA       61.70\n1002     SY 05PN100-63 135.1098247            NA       61.90\n1003     SY 09PN008#72  51.3699169            NA       55.70\n1004     SY 09PN008#72 104.2500715            NA       62.30\n1005     SY 09PN008#72 126.8661234            NA       61.60\n1006     SY 09PN008#72 136.6181781            NA       62.50\n1007            SY 107  89.9941961            NA       57.70\n1008            SY 107 115.2518020            NA       60.30\n1009            SY 107 124.3743598            NA       58.00\n1010            SY 107 136.9876100            NA       61.10\n1011         SY 3015-8  81.8236514       15.6750          NA\n1012         SY 3015-8 102.6077716       13.9080          NA\n1013         SY 3015-8 107.3698246       13.3950          NA\n1014         SY 3015-8 168.2241261       14.8770          NA\n1015         SY Assure  58.5852110        7.8000       57.70\n1016         SY Assure  76.3656850        7.3000       57.60\n1017         SY Assure  79.5737965        7.3000       57.50\n1018         SY Assure  87.0313590        7.6000       59.10\n1019         SY Assure 117.7837324            NA       61.90\n1020         SY Assure 118.5650067            NA       62.20\n1021         SY Assure 127.8873537            NA       57.50\n1022         SY Assure 139.2822756       10.7000       62.30\n1023         SY Assure 145.2229867            NA       61.20\n1024         SY Assure 147.2500436       10.4000       61.80\n1025         SY Assure 159.9988956       10.3000       62.30\n1026         SY Assure 160.3056101        9.2000       61.80\n1027         SY Basalt 104.6954862       13.5660          NA\n1028         SY Basalt 110.3282939       15.5610          NA\n1029         SY Basalt 112.8322188       12.8250          NA\n1030         SY Basalt 170.6209795       14.2500          NA\n1031 SY Clearstone 2CL  99.3693166            NA       63.40\n1032 SY Clearstone 2CL 111.9684184            NA       62.10\n1033 SY Clearstone 2CL 130.6387198            NA       61.60\n1034 SY Clearstone 2CL 141.1961490            NA       62.90\n1035           SY Coho  21.8239789            NA       58.10\n1036           SY Coho  24.4083975            NA       59.40\n1037           SY Coho  28.0457273            NA       60.30\n1038           SY Coho  32.0659340            NA       63.10\n1039           SY Coho  66.7487303       10.7525       63.80\n1040           SY Coho  71.8939378       14.9910          NA\n1041           SY Coho  81.6695788       14.9910          NA\n1042           SY Coho  89.7882234       14.7060          NA\n1043           SY Coho  91.3092521       16.1310          NA\n1044           SY Coho  93.4324231        9.7000       61.30\n1045           SY Coho  94.0469007       10.5225       64.50\n1046           SY Coho  95.1992994       10.9250       64.00\n1047           SY Coho 104.4950852       11.7300       63.40\n1048           SY Coho 109.0138202       11.0000       62.30\n1049           SY Coho 115.7794859       12.3000       62.20\n1050           SY Coho 121.3210832       11.9000       62.00\n1051       SY Gunsight  19.8138756            NA       53.70\n1052       SY Gunsight  24.1212399            NA       59.60\n1053       SY Gunsight  29.8643922            NA       62.20\n1054       SY Gunsight  30.6301459            NA       60.90\n1055       SY Gunsight  78.3571525       10.4075       64.30\n1056       SY Gunsight  86.4020762       10.0000       64.00\n1057       SY Gunsight  91.5443170        9.7175       63.80\n1058       SY Gunsight  94.0003766       10.0000       63.60\n1059       SY Gunsight  97.1216028       10.6000       63.80\n1060       SY Gunsight 100.6455006       10.4650       64.10\n1061       SY Gunsight 104.7736959       12.6000       63.60\n1062       SY Gunsight 109.7044872       10.1775       65.20\n1063       SY Gunsight 109.8722765       10.3000       62.80\n1064       SY Gunsight 113.6839435       12.7000       63.90\n1065       SY Gunsight 118.0194918       11.0000       63.30\n1066       SY Gunsight 121.1990327       11.0000       63.30\n1067        SY Ovation  90.2539357            NA       60.10\n1068        SY Ovation 108.7248762            NA       58.90\n1069        SY Ovation 116.1200559            NA       60.70\n1070        SY Ovation 145.3392050            NA       56.40\n1071         SY Raptor  67.9162166        7.2000       57.00\n1072         SY Raptor  68.3511914        8.1000       57.50\n1073         SY Raptor  72.0402426        7.2000       57.10\n1074         SY Raptor  85.8177477        7.0000       57.90\n1075         SY Raptor 136.1080451        9.2000       60.00\n1076         SY Raptor 139.0749780        9.4000       60.20\n1077         SY Raptor 144.0364977        8.4000       59.60\n1078         SY Raptor 160.8192394        8.7000       59.90\n1079        SY Saltese  26.5142200            NA       63.60\n1080        SY Saltese  29.8643922            NA       62.20\n1081        SY Saltese  32.4488108            NA       62.70\n1082        SY Saltese  43.6479579            NA       61.60\n1083        SY Saltese  91.6106151        8.4525       64.70\n1084        SY Saltese 110.8949520        8.8550       63.80\n1085        SY Saltese 119.1424512        8.2225       63.50\n1086        SY Saltese 128.5619768        8.6250       63.70\n1087          SY Teton  90.7218575       11.2000       63.40\n1088          SY Teton 100.4674719       10.9000       63.60\n1089          SY Teton 102.7945258       11.2000       64.30\n1090          SY Teton 104.0996815       14.0220          NA\n1091          SY Teton 116.4964762       14.3640          NA\n1092          SY Teton 116.6426012       14.9340          NA\n1093          SY Teton 120.5750255       14.4210          NA\n1094          SY Teton 137.5678447       11.2000       62.60\n1095     SY Touchstone 101.0595597            NA       62.60\n1096     SY Touchstone 109.5411273            NA       63.40\n1097     SY Touchstone 123.0580705            NA       61.80\n1098     SY Touchstone 125.2506985            NA       62.10\n1099          SY3024-2 108.1107266       11.7990          NA\n1100          SY3024-2 113.4199388       11.8560          NA\n1101          SY3024-2 119.1214839       12.7110          NA\n1102          SY3024-2 154.1583107       11.3430          NA\n1103           Scorpio 156.3246682       10.6000       61.50\n1104           Scorpio 178.1253335        9.4000       61.80\n1105           Scorpio 189.3742151       10.2000       60.80\n1106           Scorpio 192.8924704        9.4000       61.50\n1107           Seahawk  26.8970969            NA       61.90\n1108           Seahawk  30.3429883            NA       59.60\n1109           Seahawk  35.9904214            NA       60.30\n1110           Seahawk  36.3732982            NA       62.50\n1111           Seahawk  78.8094282        8.7000       62.60\n1112           Seahawk  97.9889831        9.5000       61.60\n1113           Seahawk 100.7961324        8.2800       62.30\n1114           Seahawk 105.0399273       10.3000       62.80\n1115           Seahawk 106.3455592        7.7050       62.20\n1116           Seahawk 107.4161406        9.6000       63.50\n1117           Seahawk 109.5526035       10.0000       62.60\n1118           Seahawk 113.4690530        8.7975       63.00\n1119           Seahawk 114.3004911       11.4000          NA\n1120           Seahawk 114.8436764       10.5000       62.50\n1121           Seahawk 117.4372530       10.7000       62.90\n1122           Seahawk 119.5579061       12.3690          NA\n1123           Seahawk 122.3887127        9.1425       62.50\n1124           Seahawk 123.8808477        8.9000       60.90\n1125           Seahawk 129.8526837            NA          NA\n1126           Seahawk 130.9393971       11.9130          NA\n1127           Seahawk 134.7343636            NA          NA\n1128           Seahawk 153.2847470            NA          NA\n1129           Seahawk 162.8580466       12.0840          NA\n1130           Seahawk 185.0156659            NA          NA\n1131          Stephens  49.1373107            NA       53.50\n1132          Stephens 109.8283813            NA       58.40\n1133          Stephens 139.8281652            NA       58.90\n1134          Stephens 140.5196680            NA       62.80\n1135      Stingray CL+ 118.9554645       10.8000       60.90\n1136      Stingray CL+ 125.4865274        9.7000       61.00\n1137      Stingray CL+ 126.5857366       10.5000       60.90\n1138      Stingray CL+ 144.2225960       11.4000       60.30\n1139             Tekoa  26.0356240            NA       57.80\n1140             Tekoa  30.9173035            NA       58.20\n1141             Tekoa  31.3001803            NA       59.10\n1142             Tekoa  31.7787764            NA       61.10\n1143             Tekoa  80.7351739        9.0000       59.90\n1144             Tekoa  97.0249969       10.6000       63.00\n1145             Tekoa 104.1260254        8.5000       63.20\n1146             Tekoa 104.1353019        8.0500       64.00\n1147             Tekoa 113.7236135        8.3000       63.50\n1148             Tekoa 115.3844981        9.9000       62.90\n1149             Tekoa 117.9278961        8.8000       61.00\n1150             Tekoa 120.8723969        8.3000       60.40\n1151             Tekoa 120.9199166        8.3950       64.40\n1152             Tekoa 121.0817953        8.6000       60.70\n1153             Tekoa 121.4952797        9.9475       64.00\n1154             Tekoa 134.9040492       10.9825       64.20\n1155             Tekoa 169.7197358            NA          NA\n1156             Tekoa 178.9949275            NA          NA\n1157             Tekoa 190.5482364            NA          NA\n1158             Tekoa 192.5009083            NA          NA\n1159          Tubbs 06 123.6060862            NA       61.30\n1160          Tubbs 06 124.4228855            NA       60.70\n1161          Tubbs 06 128.6611428            NA       60.00\n1162          Tubbs 06 160.3807568            NA       63.60\n1163    UI Bronze Jade 155.7476124       10.2000       60.40\n1164    UI Bronze Jade 163.6720548       11.7000       61.60\n1165    UI Bronze Jade 163.8328329       10.2000       61.60\n1166    UI Bronze Jade 190.0693381       10.6000       60.30\n1167     UI Castle CL+  16.4863737            NA       58.65\n1168     UI Castle CL+  19.0791955            NA       53.40\n1169     UI Castle CL+  21.0720794            NA       57.80\n1170     UI Castle CL+  28.2986275            NA       58.20\n1171     UI Castle CL+  39.5899371            NA       59.90\n1172     UI Castle CL+  57.4032612            NA       59.10\n1173     UI Castle CL+  57.5900345        8.2800       63.10\n1174     UI Castle CL+  58.9568242        8.7975       65.80\n1175     UI Castle CL+  60.3334276        7.5325       61.90\n1176     UI Castle CL+  61.0821533        8.1075       63.30\n1177     UI Castle CL+  63.2943853        7.8200       65.40\n1178     UI Castle CL+  65.9793594        8.0500       63.10\n1179     UI Castle CL+  68.3964709        8.2225       64.10\n1180     UI Castle CL+  70.8604348        7.9000       58.50\n1181     UI Castle CL+  72.6853362        8.6250       62.90\n1182     UI Castle CL+  89.8928712        7.5000       59.20\n1183     UI Castle CL+  96.6620226        8.1000       59.40\n1184     UI Castle CL+  97.5914859        7.4000       59.00\n1185     UI Castle CL+ 142.5048492       10.2000       61.30\n1186     UI Castle CL+ 145.5371331       10.5000       62.90\n1187     UI Castle CL+ 146.4018706       10.5000       62.30\n1188     UI Castle CL+ 166.0855695        9.6000       62.60\n1189      UI Magic CL+   6.6755380            NA       59.30\n1190      UI Magic CL+  11.7158494            NA       57.80\n1191      UI Magic CL+  13.0707397            NA       35.80\n1192      UI Magic CL+  30.5749814            NA       59.20\n1193      UI Magic CL+  40.5669884            NA       60.80\n1194      UI Magic CL+  58.8679162        7.5325       62.40\n1195      UI Magic CL+  59.3401846            NA       62.50\n1196      UI Magic CL+  59.3807494        7.7625       64.20\n1197      UI Magic CL+  59.8008862        6.9575       64.20\n1198      UI Magic CL+  60.8128397        7.9925       63.20\n1199      UI Magic CL+  62.8875183        8.7975       63.50\n1200      UI Magic CL+  67.0358879        7.1300       63.80\n1201      UI Magic CL+  70.9699814        8.1000       59.10\n1202      UI Magic CL+  73.6217219        7.7050       63.20\n1203      UI Magic CL+  77.9238059        7.5000       58.50\n1204      UI Magic CL+  79.5641818        8.9700       63.60\n1205      UI Magic CL+  88.4619995        7.5000       59.60\n1206      UI Magic CL+ 100.6479056        8.2000       58.80\n1207      UI Magic CL+ 131.9903456       10.4000       62.10\n1208      UI Magic CL+ 136.8658289        9.9000       60.10\n1209      UI Magic CL+ 149.2203681        8.7000       61.70\n1210      UI Magic CL+ 149.7057955        9.8000       62.10\n1211    UI Palouse CL+  18.8717971            NA       51.80\n1212    UI Palouse CL+  23.7861521            NA       59.90\n1213    UI Palouse CL+  40.3243956            NA       61.20\n1214    UI Palouse CL+  54.5889049        7.6475       62.70\n1215    UI Palouse CL+  57.3293458        7.1875       62.80\n1216    UI Palouse CL+  66.6308042        7.0725       62.90\n1217    UI Palouse CL+  69.8061025        8.2800       63.20\n1218       UI Platinum  23.9298015            NA       61.30\n1219       UI Platinum  26.7056584            NA       61.60\n1220       UI Platinum  29.6729538            NA       62.50\n1221       UI Platinum  38.7662784            NA       62.90\n1222       UI Platinum  63.8844201       11.0000       62.70\n1223       UI Platinum  67.4551380        9.2575       63.90\n1224       UI Platinum  68.0764470            NA          NA\n1225       UI Platinum  81.3427460       11.0000       63.90\n1226       UI Platinum  88.7685690       12.9000       63.90\n1227       UI Platinum  90.0508556       10.0625       64.50\n1228       UI Platinum 101.6391778       11.6000       64.20\n1229       UI Platinum 101.9405714       13.1100       63.90\n1230       UI Platinum 105.8232142       11.4000       63.80\n1231       UI Platinum 107.1922342       11.0000       63.60\n1232       UI Platinum 108.3885712       11.8000       64.00\n1233       UI Platinum 108.8571097       12.4000       63.70\n1234       UI Platinum 111.2800857        9.8325       62.60\n1235       UI Platinum 113.4199388       16.1880          NA\n1236       UI Platinum 133.4160017            NA          NA\n1237       UI Platinum 135.3471429       14.4780          NA\n1238       UI Platinum 139.8625426       14.9340          NA\n1239       UI Platinum 147.9528050            NA          NA\n1240       UI Platinum 167.7670638            NA          NA\n1241       UI Platinum 183.3462856       15.8460          NA\n1242         UI Silver  60.0246072            NA       66.00\n1243         UI Silver  68.6011085            NA       63.90\n1244         UI Silver  69.3466503            NA       64.30\n1245         UI Silver  71.2785460            NA       63.80\n1246        UI Sparrow   6.1426642            NA       57.50\n1247        UI Sparrow  11.6100646            NA       58.90\n1248        UI Sparrow  22.1001339            NA       60.20\n1249        UI Sparrow  57.2122560        8.0500       62.60\n1250        UI Sparrow  70.9594282        7.1875       64.90\n1251        UI Sparrow  71.1349571        7.1300       60.10\n1252        UI Sparrow  73.7102773        7.7050       61.50\n1253        UI Sparrow  82.5593463            NA       59.80\n1254        UI Sparrow 114.2298180            NA       60.50\n1255        UI Sparrow 116.9271260            NA       62.40\n1256        UI Sparrow 137.6842282        9.1000       60.10\n1257        UI Sparrow 145.7140625        8.8000       60.30\n1258        UI Sparrow 153.3357220            NA       60.80\n1259        UI Sparrow 160.0543522        9.3000       59.80\n1260        UI Sparrow 160.1083580        9.1000       60.80\n1261          UI Stone  24.9827127            NA       61.60\n1262          UI Stone  29.2900770            NA       61.20\n1263          UI Stone  39.6277512            NA       62.80\n1264          UI Stone  45.6580612            NA       61.80\n1265          UI Stone  78.2665518        7.7050       62.40\n1266          UI Stone 102.4073658        8.6000       63.60\n1267          UI Stone 104.1354805        9.0000       61.60\n1268          UI Stone 107.0493809        9.0000       61.30\n1269          UI Stone 108.5548567       12.4260          NA\n1270          UI Stone 117.1633908        9.9000       61.50\n1271          UI Stone 121.1476880        9.0850       61.70\n1272          UI Stone 122.0935751        9.2575       62.60\n1273          UI Stone 124.1575935        9.0850       61.90\n1274          UI Stone 125.6354433       11.9700          NA\n1275          UI Stone 130.3190126        9.6000       61.60\n1276          UI Stone 132.8581542        9.0000       61.20\n1277          UI Stone 133.6063615        8.8000       62.80\n1278          UI Stone 134.9182830        9.9000       61.80\n1279          UI Stone 150.5839619       11.2290          NA\n1280          UI Stone 170.4881122       10.7160          NA\n1281          UI Stone 187.7819512            NA          NA\n1282          UI Stone 192.8263537            NA          NA\n1283          UI Stone 216.7465849            NA          NA\n1284          UI Stone 219.0247021            NA          NA\n1285    UI-WSU Huffman  15.3085943            NA       42.30\n1286    UI-WSU Huffman  28.6381284            NA       61.30\n1287    UI-WSU Huffman  37.5793703            NA       61.70\n1288    UI-WSU Huffman  61.6184932        7.4175       64.10\n1289    UI-WSU Huffman  63.8575669        7.0725       63.60\n1290    UI-WSU Huffman  69.3924947        7.5900       62.90\n1291    UI-WSU Huffman  73.3205288        8.2225       61.50\n1292     UIL 07-28017B  65.3191886        7.6000       58.40\n1293     UIL 07-28017B  72.8885158        7.3000       58.30\n1294     UIL 07-28017B  83.9066043        7.7000       58.10\n1295     UIL 07-28017B 101.4922221        7.6000       58.50\n1296    UIL 11-456031A  68.1355068        6.8000       55.60\n1297    UIL 11-456031A  79.8423489        6.8000       56.70\n1298    UIL 11-456031A  82.5853905        6.7000       57.20\n1299    UIL 11-456031A 107.6650035        8.3000       57.00\n1300     UIL 15-028024 119.0893706        8.3000       61.80\n1301     UIL 15-028024 130.6508006       10.3000       62.70\n1302     UIL 15-028024 137.6997045       10.6000       62.50\n1303     UIL 15-028024 151.9119319        9.5000       63.10\n1304      UIL 15-72223  79.0799418        6.9000       58.80\n1305      UIL 15-72223  91.0916576        7.1000       59.10\n1306      UIL 15-72223 102.6453691        6.9000       59.40\n1307      UIL 15-72223 111.1021943        7.0000       59.50\n1308      UIL 15-72223 145.1486945       10.0000       61.90\n1309      UIL 15-72223 146.7961934       10.4000       62.00\n1310      UIL 15-72223 147.0434916        9.3000       62.30\n1311      UIL 15-72223 159.3119137        9.4000       62.40\n1312 UIL 17-6268 (CL+)  67.1494246        7.2000       57.80\n1313 UIL 17-6268 (CL+)  72.5199062        7.1000       57.60\n1314 UIL 17-6268 (CL+)  73.6865592        7.2000       57.90\n1315 UIL 17-6268 (CL+)  79.3532988        7.0000       57.50\n1316 UIL 17-6268 (CL+) 135.5134172        9.9000       60.80\n1317 UIL 17-6268 (CL+) 147.0096977        8.4000       61.20\n1318 UIL 17-6268 (CL+) 160.5776844       10.0000       60.60\n1319 UIL 17-6268 (CL+) 167.5152719        9.1000       61.20\n1320 UIL 17-6333 (CL+)  79.7461969        8.3000       60.10\n1321 UIL 17-6333 (CL+)  80.7773619        7.6000       60.30\n1322 UIL 17-6333 (CL+)  80.9528968        7.8000       60.20\n1323 UIL 17-6333 (CL+)  91.7740480        8.0000       60.80\n1324 UIL 17-6546 (CL+)  67.8768035        7.2000       57.90\n1325 UIL 17-6546 (CL+)  83.0558217        7.7000       58.00\n1326 UIL 17-6546 (CL+)  84.1241902        7.3000       58.20\n1327 UIL 17-6546 (CL+)  93.1524202        7.3000       58.20\n1328 UIL 17-6834 (CL+)  71.5292849        8.9000       59.30\n1329 UIL 17-6834 (CL+)  82.5919936        8.6000       59.30\n1330 UIL 17-6834 (CL+)  84.5500439        8.4000       59.90\n1331 UIL 17-6834 (CL+)  88.9450288        8.8000       59.20\n1332       UIL 17-7706 131.1869088        8.5000       61.10\n1333       UIL 17-7706 145.6637344       10.1000       61.80\n1334       UIL 17-7706 149.4444922        9.7000       61.50\n1335       UIL 17-7706 155.7233501        9.9000       62.40\n1336        VI Bulldog 120.7998427        8.0000       61.40\n1337        VI Bulldog 126.9424469        9.7000       62.40\n1338        VI Bulldog 135.1616844        9.6000       62.50\n1339        VI Bulldog 144.0318226       10.1000       62.90\n1340            WA8189 108.5548567       12.5970          NA\n1341            WA8189 112.2439507       12.9960          NA\n1342            WA8189 124.0495483       11.3430          NA\n1343            WA8189 153.1982642       10.0320          NA\n1344            WA8206  96.8467728            NA       62.40\n1345            WA8206  97.8201969            NA       58.70\n1346            WA8206 106.9859019            NA       58.10\n1347            WA8206 149.2168517            NA       60.40\n1348            WA8232  11.2960552            NA       58.70\n1349            WA8232  12.5510952            NA       59.20\n1350            WA8232  25.2783339            NA       59.20\n1351            WA8232  52.8971939        8.0500       66.00\n1352            WA8232  55.3362402        7.1300       63.60\n1353            WA8232  64.2384588        6.7275       63.10\n1354            WA8232  70.9261683        7.0150       65.20\n1355            WA8232  92.0129848            NA       58.10\n1356            WA8232 110.0949325            NA       59.80\n1357            WA8232 115.6694340            NA       61.80\n1358            WA8232 127.7600361            NA       62.60\n1359            WA8234  97.6120146            NA       63.50\n1360            WA8234 100.2610197            NA       60.40\n1361            WA8234 102.6107349            NA       52.80\n1362            WA8234 118.4845360            NA       61.60\n1363            WA8240 105.4394714       14.6490          NA\n1364            WA8240 128.2216032       14.0790          NA\n1365            WA8240 163.6664528       14.3640          NA\n1366            WA8240 168.6243724       14.8770          NA\n1367            WA8252  18.8132976            NA       53.30\n1368            WA8252  36.5315372            NA       63.10\n1369            WA8252  43.1998610            NA       62.10\n1370            WA8252  67.4935265            NA       64.10\n1371            WA8252  67.5995027            NA       63.80\n1372            WA8252  68.2976685            NA       63.40\n1373            WA8252  70.9316797            NA       63.30\n1374            WA8252  82.0302064        7.7000       59.30\n1375            WA8252  84.2598238        8.0000       60.10\n1376            WA8252  92.8181622        8.0000       60.00\n1377            WA8252  93.8166456        7.9000       59.70\n1378            WA8262  81.6695788       14.2500          NA\n1379            WA8262  84.8979107       14.3070          NA\n1380            WA8262 132.7918147       13.6230          NA\n1381            WA8262 140.4245010       14.6490          NA\n1382            WA8268  21.1510225            NA       59.70\n1383            WA8268  35.3120443            NA       63.60\n1384            WA8268  45.3427722            NA       63.90\n1385            WA8268  57.7640218            NA       63.30\n1386            WA8268  58.6692635            NA       64.20\n1387            WA8268  62.8103182            NA       64.80\n1388            WA8268  74.5540270            NA       64.70\n1389            WA8268  74.6283465        7.5000       58.60\n1390            WA8268  77.0576760        7.8000       59.20\n1391            WA8268  84.4375084            NA       63.90\n1392            WA8268  89.3251062        8.2000       58.30\n1393            WA8268  95.2149557        8.2000       60.00\n1394            WA8268 110.5171207            NA       58.70\n1395            WA8268 121.6045461            NA       64.50\n1396            WA8268 132.0549380            NA       58.70\n1397            WA8269  78.0041052            NA       62.00\n1398            WA8269  97.9542461            NA       64.90\n1399            WA8269 142.0245101            NA       58.10\n1400            WA8269 199.2345434            NA       59.80\n1401         WA8275CL+  81.2756871        7.2000       59.20\n1402         WA8275CL+  85.1397337        7.5000       59.70\n1403         WA8275CL+  86.7882513        7.2000       60.00\n1404         WA8275CL+ 101.5723416        7.3000       59.10\n1405            WA8277 154.0983603            NA          NA\n1406            WA8277 164.6753333            NA          NA\n1407            WA8277 183.2257166            NA          NA\n1408            WA8277 203.5660493            NA          NA\n1409            WA8278 109.1869057            NA          NA\n1410            WA8278 126.9236758            NA          NA\n1411            WA8278 137.3379262            NA          NA\n1412            WA8278 145.3113366            NA          NA\n1413             WA828  19.8138756            NA       53.90\n1414             WA828  25.5570280            NA       62.00\n1415             WA828  28.4286042            NA       63.30\n1416             WA828  31.1087419            NA       63.80\n1417             WA828  77.7609226       10.9250       64.90\n1418             WA828  93.2571064       11.5575       64.40\n1419             WA828  99.3241020        9.0275       64.00\n1420             WA828 109.6051508       11.5000       64.90\n1421         WA8280CL+  73.7855117       11.4000       63.40\n1422         WA8280CL+  79.8564715       12.4000       64.00\n1423         WA8280CL+  89.5954313       13.0000       63.50\n1424         WA8280CL+ 101.1582981       12.2000       62.30\n1425         WA8280CL+ 105.5363856       11.9000       63.80\n1426         WA8280CL+ 107.1120034       11.7000       63.50\n1427         WA8280CL+ 109.2320227       13.1000       63.80\n1428         WA8280CL+ 109.6368425       11.5000       63.20\n1429            WA8282 102.3027951       10.7000       63.50\n1430            WA8282 108.6984123       11.4000       63.80\n1431            WA8282 114.0299775       11.3000       63.60\n1432            WA8282 119.1973041       11.6000       63.90\n1433            WA8289  77.7403917        7.2000       57.30\n1434            WA8289  79.4953642        7.6000       57.50\n1435            WA8289  80.0172329        7.5000       57.80\n1436            WA8289  99.8205894        7.8000       57.60\n1437            WA8289 171.2004616       10.0000       62.00\n1438            WA8289 176.9758264        9.7000       61.60\n1439            WA8289 183.9279934        8.5000       60.90\n1440            WA8289 185.4106538       10.6000       61.00\n1441            WA8293 132.3432573        9.8000       60.90\n1442            WA8293 134.2683017       10.3000       60.80\n1443            WA8293 142.6293850        9.5000       61.20\n1444            WA8293 152.3464367       10.6000       60.50\n1445            WA8294  24.5645709            NA       61.10\n1446            WA8294  29.0533382            NA       58.40\n1447            WA8294  38.9733543            NA       63.30\n1448            WA8294  66.2110201            NA       64.00\n1449            WA8294  73.2733443            NA       63.50\n1450            WA8294  73.6072431            NA       61.80\n1451            WA8294  73.9674899            NA       65.60\n1452         WA8295CL+  94.9777060        9.8000       61.50\n1453         WA8295CL+ 118.7222482        9.2000       62.20\n1454         WA8295CL+ 119.1913519        9.2000       61.30\n1455         WA8295CL+ 126.9012030       10.5000       60.30\n1456         WA8297CL+  25.7484664            NA       61.50\n1457         WA8297CL+  30.6301459            NA       60.50\n1458         WA8297CL+  36.3732982            NA       60.50\n1459         WA8297CL+  37.2347711            NA       61.40\n1460         WA8297CL+  80.8659630        8.5675       63.20\n1461         WA8297CL+ 106.1421164        9.5000       60.70\n1462         WA8297CL+ 106.4083649       10.0000       62.60\n1463         WA8297CL+ 108.9737466       10.2350       61.70\n1464         WA8297CL+ 110.8332483        8.5675       62.40\n1465         WA8297CL+ 111.9180086        9.1000       60.60\n1466         WA8297CL+ 113.3851425        9.9475       62.10\n1467         WA8297CL+ 122.4874193        9.4000       60.40\n1468         WA8299CL+  93.9285560       11.6000       64.70\n1469         WA8299CL+ 106.7322772       12.3000       64.00\n1470         WA8299CL+ 108.8579405       12.2000       64.60\n1471         WA8299CL+ 112.1397397       12.2000       63.60\n1472            WA8301 111.0216038       11.7000       63.50\n1473            WA8301 117.6573911            NA       63.60\n1474            WA8301 117.7481218       12.4000       63.60\n1475            WA8301 124.0438444       11.5000       63.80\n1476         WA8302CL+  79.0447252       11.3000       64.20\n1477         WA8302CL+  94.1155328       11.1000       64.00\n1478         WA8302CL+  97.2315519       11.0000       63.60\n1479         WA8302CL+  98.8508308       12.4000       63.90\n1480         WA8303CL+  25.2698704            NA       59.80\n1481         WA8303CL+  27.2799737            NA       63.50\n1482         WA8303CL+  31.5873379            NA       60.60\n1483         WA8303CL+  32.3530916            NA       59.70\n1484         WA8303CL+  76.0767180        8.6825       63.40\n1485         WA8303CL+  82.8876937        8.0500       63.30\n1486         WA8303CL+ 110.7909001       10.0050       62.90\n1487         WA8303CL+ 112.2395829        9.9000       63.30\n1488         WA8303CL+ 123.6805961        9.6000       61.80\n1489         WA8303CL+ 124.2916111        9.1000       61.30\n1490         WA8303CL+ 130.6806166       10.0000       61.40\n1491         WA8303CL+ 142.2720301       11.6725       63.50\n1492         WA8305CL+ 132.6136289        9.1000       61.40\n1493         WA8305CL+ 140.9284243        9.5000       61.40\n1494         WA8305CL+ 141.5475564       10.8000       61.30\n1495         WA8305CL+ 151.7503781        9.2000       61.20\n1496         WA8306CL+ 132.3863612       10.9000       59.80\n1497         WA8306CL+ 133.9464433        9.6000       61.00\n1498         WA8306CL+ 136.5008365       10.4000       60.90\n1499         WA8306CL+ 144.6379771        9.4000       61.10\n1500            WA8307 129.9242616        9.7000       61.20\n1501            WA8307 145.0594842       10.6000       59.30\n1502            WA8307 148.2294022       10.0000       59.40\n1503            WA8307 150.6426549        9.8000       60.50\n1504            WA8309 149.3634432       10.4000       59.00\n1505            WA8309 176.7419995        9.6000       59.60\n1506            WA8309 182.4218768       10.5000       59.70\n1507            WA8309 183.3833007        9.7000       59.30\n1508            WA8311  98.5251714        9.0000       61.10\n1509            WA8311  98.5924957        8.9000       63.50\n1510            WA8311 100.6144276       10.4000       54.20\n1511            WA8311 115.3466008        8.8000       60.70\n1512            WA8312 105.1228645        8.2000       62.80\n1513            WA8312 114.3769108        9.6000       63.60\n1514            WA8312 123.3090745       10.8000       63.60\n1515            WA8312 123.3715943       10.6000       64.10\n1516            WA8313 105.0652692        9.6000       61.50\n1517            WA8313 105.3341812       10.1000       62.70\n1518            WA8313 123.2015577        9.8000       62.60\n1519            WA8313 130.7222394        9.0000       61.50\n1520            WA8326  96.0249291        8.3000       62.60\n1521            WA8326  99.3410542        8.5000       62.70\n1522            WA8326 115.5938879       10.4000       63.20\n1523            WA8326 116.2897328       10.3000       63.20\n1524            WA8327 110.1249933        7.8000       62.50\n1525            WA8327 114.9402994        8.9000       62.50\n1526            WA8327 122.2359357       10.6000       62.80\n1527            WA8327 136.1882477       10.4000       62.90\n1528            WA8328 106.4910537        8.3000       64.50\n1529            WA8328 111.3914809        9.7000       64.50\n1530            WA8328 113.1243231       10.0000       64.50\n1531            WA8328 114.5804083       10.0000       64.00\n1532        WB-1035CL+  30.0558306            NA       63.30\n1533        WB-1035CL+  31.0130227            NA       63.00\n1534        WB-1035CL+  32.8316876            NA       59.90\n1535        WB-1035CL+  33.4060029            NA       61.30\n1536        WB-1035CL+  75.9350637        9.7175       62.70\n1537        WB-1035CL+ 102.0533991        8.0500       63.20\n1538        WB-1035CL+ 104.7318442       11.0975       62.70\n1539        WB-1035CL+ 106.4796117       12.8250          NA\n1540        WB-1035CL+ 109.5899612       12.9960          NA\n1541        WB-1035CL+ 114.7082338       10.1200       62.70\n1542        WB-1035CL+ 133.7868723       13.2810          NA\n1543        WB-1035CL+ 150.4460244       12.5400          NA\n1544      WB-Arrowhead 106.6772598            NA       63.30\n1545      WB-Arrowhead 129.1038854            NA       58.50\n1546      WB-Arrowhead 135.4333174            NA       61.20\n1547      WB-Arrowhead 136.6067362            NA       60.60\n1548         WB1376CLP   2.3137045            NA       58.95\n1549         WB1376CLP   9.2378606            NA       57.80\n1550         WB1376CLP  31.3166037            NA       60.10\n1551         WB1376CLP  53.1834548        8.1650       65.70\n1552         WB1376CLP  60.5246846        8.2800       61.10\n1553         WB1376CLP  61.6523979        8.6250       65.40\n1554         WB1376CLP  65.1921345        8.3375       63.80\n1555         WB1376CLP  67.8915513        8.7000       60.70\n1556         WB1376CLP  69.7793825        8.5000       60.80\n1557         WB1376CLP  72.6620402        6.8000       60.50\n1558         WB1376CLP  78.2937344        8.7000       60.00\n1559         WB1376CLP 124.3513479       10.8000       63.50\n1560         WB1376CLP 131.5035077        9.6000       63.10\n1561         WB1376CLP 132.6691561       11.8000       63.00\n1562         WB1376CLP 135.8159302       10.6000       63.20\n1563            WB1529   1.1083276            NA       60.10\n1564            WB1529   1.9130440            NA       59.00\n1565            WB1529   4.9305467            NA       57.80\n1566            WB1529  57.1598623        7.7625       65.10\n1567            WB1529  66.2068689        8.9125       59.90\n1568            WB1529  69.5222396        7.3600       64.70\n1569            WB1529  70.4932857        6.5550       65.10\n1570            WB1529  72.6297354        8.2000       58.90\n1571            WB1529  84.3793735        7.6000       60.80\n1572            WB1529  91.8026871        7.9000       60.50\n1573            WB1529  99.7633110            NA       61.80\n1574            WB1529 101.2304185            NA       59.80\n1575            WB1529 111.6900941            NA       57.80\n1576            WB1529 117.1904284            NA       60.70\n1577            WB1529 138.4788992       10.1000       63.20\n1578            WB1529 138.5117863        9.4000       62.80\n1579            WB1529 141.2399652       10.0000       63.20\n1580            WB1529 141.8633693        9.1000       62.30\n1581            WB1529          NA            NA          NA\n1582            WB1604   6.1337774            NA       58.70\n1583            WB1604   7.3292700            NA       59.20\n1584            WB1604  34.1762402            NA       59.50\n1585            WB1604  55.8264233        8.0500       62.90\n1586            WB1604  60.6700972        8.7400       60.70\n1587            WB1604  60.8915008        7.8775       62.70\n1588            WB1604  63.9493163        7.3025       63.40\n1589            WB1783   5.8519700            NA       63.70\n1590            WB1783  10.5563977            NA       63.50\n1591            WB1783  36.6986931            NA       63.90\n1592            WB1783  58.8010941        8.3950       65.40\n1593            WB1783  64.8169454        7.9350       64.80\n1594            WB1783  69.3468518        8.1075       63.00\n1595            WB1783  70.5881586        9.7175       61.20\n1596            WB1783  70.6687646        7.7000       60.10\n1597            WB1783  73.5569463        7.9000       60.30\n1598            WB1783  95.0925197            NA       61.20\n1599            WB1783  95.1560158        8.7000       60.00\n1600            WB1783 100.3155746        9.3000       61.10\n1601            WB1783 107.6732082            NA       60.60\n1602            WB1783 135.0045940       10.6000       64.00\n1603            WB1783 137.1411275        9.8000       63.60\n1604            WB1783 137.6086967            NA       59.10\n1605            WB1783 139.6426785            NA       61.80\n1606            WB1783 145.1780148       10.7000       64.10\n1607            WB1783 159.4334671       10.2000       63.40\n1608            WB4311  66.2073032        8.3000       59.70\n1609            WB4311  79.0441857        8.9000       60.40\n1610            WB4311  81.2845941        8.9000       60.00\n1611            WB4311  86.0976221        9.3000       59.40\n1612            WB4311 149.4437869        9.4000       62.90\n1613            WB4311 154.0569088       10.5000       63.70\n1614            WB4311 171.4340366       11.4000       64.10\n1615            WB4311 174.4472875       10.6000       64.10\n1616            WB4418  80.4072278        7.9000       59.10\n1617            WB4418  84.9077769        8.9000       59.10\n1618            WB4418  90.5556492        8.0000       59.10\n1619            WB4418  93.6501460        8.4000       59.30\n1620         WB4623CLP  24.3632785            NA       62.00\n1621         WB4623CLP  27.7252897            NA       59.80\n1622         WB4623CLP  41.0909855            NA       64.30\n1623         WB4623CLP  54.0488874            NA       66.90\n1624         WB4623CLP  55.1161263            NA       63.00\n1625         WB4623CLP  65.1635195            NA       63.30\n1626         WB4623CLP  65.4544857            NA       65.80\n1627         WB4623CLP  70.8274021        8.4000       61.30\n1628         WB4623CLP  78.7466087        8.7000       61.90\n1629         WB4623CLP  85.0863693        8.3000       61.50\n1630         WB4623CLP  89.5001786        8.9000       61.90\n1631         WB4623CLP  93.2657780            NA       63.80\n1632         WB4623CLP 110.9245097            NA       66.90\n1633         WB4623CLP 118.4233261        9.6000       64.00\n1634         WB4623CLP 136.4649962            NA       62.60\n1635         WB4623CLP 138.5690969       12.3000       63.60\n1636         WB4623CLP 148.5052227            NA       65.50\n1637         WB4623CLP 155.3999400       12.3000       63.10\n1638         WB4623CLP 157.5865800       11.7000       63.40\n1639            WB4792  84.4150184       10.7000       60.20\n1640            WB4792  90.8665608        8.1000       60.50\n1641            WB4792  93.3318177        7.6000       60.80\n1642            WB4792 102.3276317        7.8000       59.70\n1643            WB4792 163.2177009        9.9000       64.10\n1644            WB4792 182.5727202        9.5000       64.30\n1645            WB4792 185.8018733       10.1000       63.10\n1646            WB4792 185.9718505        9.7000       64.50\n1647            WB6121  22.8768902            NA       58.70\n1648            WB6121  33.9803181            NA       63.20\n1649            WB6121  36.4690174            NA       63.90\n1650            WB6121  41.6378546            NA       60.80\n1651            WB6121  81.7702374        9.3150       63.70\n1652            WB6121 101.0550881        7.6475       63.40\n1653            WB6121 102.1261457        9.8900       63.80\n1654            WB6121 110.6478469        9.3000       61.30\n1655            WB6121 111.0657701       13.3380          NA\n1656            WB6121 115.7653376       13.1670          NA\n1657            WB6121 118.2909132        9.4000       63.50\n1658            WB6121 123.7807733       10.0000       63.10\n1659            WB6121 126.2523731       10.1200       63.60\n1660            WB6121 134.7802514       13.5090          NA\n1661            WB6121 135.7013987       10.2000       60.80\n1662            WB6121 139.1278754            NA          NA\n1663            WB6121 157.8409815            NA          NA\n1664            WB6121 165.0110558       12.7110          NA\n1665            WB6121 166.6280052            NA          NA\n1666            WB6121 168.7433998            NA          NA\n1667            WB6341  32.1616532            NA       64.30\n1668            WB6341  32.3530916            NA       60.00\n1669            WB6341  34.5546333            NA       63.10\n1670            WB6341  39.2448744            NA       62.70\n1671            WB6341  96.7637039        7.8200       62.70\n1672            WB6341 101.1238145       10.0050       62.50\n1673            WB6341 111.6106092        8.7975       62.70\n1674            WB6341 126.6424911       10.6020          NA\n1675            WB6341 133.7669252        8.9700       62.50\n1676            WB6341 136.0549864       11.8560          NA\n1677            WB6341 138.8024301            NA          NA\n1678            WB6341 140.0030835       10.9440          NA\n1679            WB6341 162.0484071       10.6020          NA\n1680            WB6341 163.0481066            NA          NA\n1681            WB6341 165.9771145            NA          NA\n1682            WB6341 174.7641383            NA          NA\n1683            WB6430  21.3453829            NA       57.50\n1684            WB6430  23.7383631            NA       59.70\n1685            WB6430  26.4185008            NA       59.40\n1686            WB6430  29.3857962            NA       58.20\n1687            WB6430  87.2133086        8.8000       59.70\n1688            WB6430  97.8327008        9.8000       60.70\n1689            WB6430  98.5647767       10.4650       61.40\n1690            WB6430  99.5608840        9.3000       61.30\n1691            WB6430 102.2573717        7.8200       61.70\n1692            WB6430 103.4251057        7.7625       62.10\n1693            WB6430 103.4472921        8.3000       62.80\n1694            WB6430 108.6653998        9.8900       61.40\n1695            WB6430 115.0333426       11.6280          NA\n1696            WB6430 137.1857548       12.0840          NA\n1697            WB6430 138.7369813       11.7990          NA\n1698            WB6430 141.2432700            NA          NA\n1699            WB6430 162.3184240       11.6280          NA\n1700            WB6430 165.4889466            NA          NA\n1701            WB6430 165.9771145            NA          NA\n1702            WB6430 173.1369116            NA          NA\n1703         WB7202CLP  24.1212399            NA       62.40\n1704         WB7202CLP  25.3655896            NA       60.40\n1705         WB7202CLP  26.6099392            NA       61.00\n1706         WB7202CLP  38.3834016            NA       62.30\n1707         WB7202CLP  88.6800307       11.9000       63.40\n1708         WB7202CLP  89.7251213       11.3000       63.90\n1709         WB7202CLP  95.2280591       11.3000       62.60\n1710         WB7202CLP 101.9182986       12.1000       63.40\n1711            WB7328  20.1010332            NA       53.90\n1712            WB7328  20.1967524            NA       54.40\n1713            WB7328  31.2044611            NA       59.50\n1714            WB7328  37.8090863            NA       62.00\n1715            WB7328  53.7600975       10.2350       64.90\n1716            WB7328  66.1146455       11.2000       64.00\n1717            WB7328  69.1647533       11.8000       63.10\n1718            WB7328  81.9776898       14.3640          NA\n1719            WB7328  85.2698525        9.7175       65.30\n1720            WB7328  86.1237776       14.5350          NA\n1721            WB7328  89.8229091            NA          NA\n1722            WB7328  90.1056868       13.4000       63.60\n1723            WB7328  95.9327168       11.7000       61.30\n1724            WB7328  97.6410649       12.3000       63.00\n1725            WB7328 100.5575346       11.9000       63.70\n1726            WB7328 103.4475233       12.8000       63.80\n1727            WB7328 104.2813493       11.5000       65.50\n1728            WB7328 108.3880156       11.6150       64.20\n1729            WB7328 109.5899612       14.5920          NA\n1730            WB7328 110.7708824       14.9340          NA\n1731            WB7328 115.3084552       12.8000       64.40\n1732            WB7328 121.1656231            NA          NA\n1733            WB7328 124.8657309            NA          NA\n1734            WB7328 129.8655303            NA          NA\n1735            WB7589  21.1539445            NA       57.10\n1736            WB7589  22.3025750            NA       58.00\n1737            WB7589  30.0558306            NA       61.00\n1738            WB7589  39.5320320            NA       62.10\n1739            WB7589  53.3061265       13.0525       63.30\n1740            WB7589  67.6880379        9.3150       64.50\n1741            WB7589  72.4196005       10.8000       64.40\n1742            WB7589  84.9616466       12.5000       64.30\n1743            WB7589  94.1702475       10.4075       64.70\n1744            WB7589  95.1809638       11.5000       64.30\n1745            WB7589  95.6012496       12.7650       63.50\n1746            WB7589  96.7712095       12.8000       64.30\n1747            WB7589 101.5613964       14.7060          NA\n1748            WB7589 105.4522237       12.1000       62.10\n1749            WB7589 108.1107266       13.1670          NA\n1750            WB7589 108.5787683       12.1000       62.50\n1751            WB7589 108.9774217       12.7000       63.80\n1752            WB7589 111.1582737       12.9000       63.20\n1753            WB7589 113.1261473       14.2500          NA\n1754            WB7589 133.5953049            NA          NA\n1755            WB7589 135.9495421            NA          NA\n1756            WB7589 136.4110579            NA          NA\n1757            WB7589 143.5054747       13.4520          NA\n1758            WB7589 155.0746962            NA          NA\n1759            WB7696  84.6530388       10.2000       64.40\n1760            WB7696  87.6563168       12.1000       63.80\n1761            WB7696  99.2647973       12.4000       64.30\n1762            WB7696 100.8573040       11.7000       62.10\n1763          WB893200  83.3624940       14.9910          NA\n1764          WB893200  88.1111352       15.4470          NA\n1765          WB893200  93.4329370       12.6540          NA\n1766          WB893200 123.7607584       15.1050          NA\n1767            WB9350 109.0685464            NA          NA\n1768            WB9350 112.2786363            NA          NA\n1769            WB9350 122.6928866            NA          NA\n1770            WB9350 123.8496050            NA          NA\n1771            WB9377  99.4636101       15.3330          NA\n1772            WB9377 112.6852032       15.1620          NA\n1773            WB9377 117.2267584       15.3330          NA\n1774            WB9377 124.3382012       13.6800          NA\n1775            WB9411  24.0255207            NA       62.80\n1776            WB9411  26.8970969            NA       62.80\n1777            WB9411  29.0986386            NA       63.90\n1778            WB9411  32.4488108            NA       63.20\n1779            WB9411  57.1344917       10.3500       65.20\n1780            WB9411  82.6998701       11.9000       64.10\n1781            WB9411  92.9897490       13.2000       62.90\n1782            WB9411  93.2814679       13.6800          NA\n1783            WB9411  97.0041256       13.2000       63.70\n1784            WB9411  97.1804553       10.1775       64.20\n1785            WB9411 101.2599312       13.3000       63.30\n1786            WB9411 102.6894784       10.1200       62.60\n1787            WB9411 104.6648601       11.9000       63.60\n1788            WB9411 106.1958063       11.9000       63.80\n1789            WB9411 108.4510910       12.7000       63.10\n1790            WB9411 110.2383283       11.0400       64.70\n1791            WB9411 112.3514504       11.6000       63.60\n1792            WB9411 142.1070876       13.6800          NA\n1793            WB9411 142.8067094       14.4210          NA\n1794            WB9411 150.6811844            NA          NA\n1795            WB9411 150.8793635            NA          NA\n1796            WB9411 165.1453277       14.6490          NA\n1797            WB9411 177.2420104            NA          NA\n1798            WB9411 497.8208978            NA          NA\n1799            WB9433  21.0582253            NA       57.00\n1800            WB9433  23.0683286            NA       58.60\n1801            WB9433  25.7484664            NA       59.30\n1802            WB9433  29.5772346            NA       62.00\n1803            WB9433  52.7283352       11.1550       64.60\n1804            WB9433  90.6848593       10.6375       64.80\n1805            WB9433  95.7323043       12.7650       64.70\n1806            WB9433 108.2365979       11.2125       65.80\n1807            WB9518  88.5689340       15.0480          NA\n1808            WB9518 102.4583922       14.0220          NA\n1809            WB9518 105.2907429       12.3690          NA\n1810            WB9518 109.2943883       14.4780          NA\n1811            WB9578  16.5594226            NA       44.00\n1812            WB9578  21.1539445            NA       57.20\n1813            WB9578  30.2472691            NA       62.50\n1814            WB9578  33.3102836            NA       64.10\n1815            WB9578  59.9229797            NA          NA\n1816            WB9578  64.0055029            NA          NA\n1817            WB9578  71.9238143       13.5700       66.50\n1818            WB9578  92.6006641       12.8800       65.80\n1819            WB9578 101.3172681        9.7175       63.00\n1820            WB9578 114.9837842       10.4075       64.00\n1821            WB9578 126.4355078            NA          NA\n1822            WB9578 127.9000118            NA          NA\n1823            WB9590  20.7710677            NA       56.10\n1824            WB9590  26.9928161            NA       61.70\n1825            WB9590  27.6628505            NA       62.30\n1826            WB9590  32.1616532            NA       62.70\n1827            WB9590  69.1079374       11.8000       64.50\n1828            WB9590  79.0176961       13.1000       64.20\n1829            WB9590  88.6809557       12.8000       62.70\n1830            WB9590  89.7386358       13.7000       64.00\n1831            WB9662  55.9577539       11.8000       63.60\n1832            WB9662  93.6956656       14.5000       63.70\n1833            WB9662  99.9173237       14.0000       63.70\n1834            WB9662 100.5713917       14.3000       63.30\n1835            WB9668  25.2698704            NA       61.50\n1836            WB9668  26.8013776            NA       60.50\n1837            WB9668  27.6947569            NA       61.30\n1838            WB9668  31.0130227            NA       61.90\n1839            WB9668  54.1737657       12.2475       65.70\n1840            WB9668  66.6248924       13.7000       64.80\n1841            WB9668  85.7687108       10.2925       64.90\n1842            WB9668  91.3843957       12.8000       64.10\n1843            WB9668  93.2555008       14.7000       63.90\n1844            WB9668  93.5577281       12.1000       62.90\n1845            WB9668  96.2120259       14.6000       64.60\n1846            WB9668  97.4047506       11.3275       64.30\n1847            WB9668  98.1039852       13.3000       63.70\n1848            WB9668  99.6136746       13.4520          NA\n1849            WB9668  99.9463654       12.7000       63.70\n1850            WB9668 101.5613964       14.3070          NA\n1851            WB9668 103.4251057       11.0975       64.40\n1852            WB9668 106.3815671       14.7000       64.30\n1853            WB9668 120.8653227       15.1050          NA\n1854            WB9668 127.1967416            NA          NA\n1855            WB9668 138.3143306       14.6490          NA\n1856            WB9668 147.1012858            NA          NA\n1857            WB9668 147.7521765            NA          NA\n1858            WB9668 165.4889466            NA          NA\n1859         WB9879CLP  57.0112376       11.5000       64.00\n1860         WB9879CLP  93.9652713       13.5000       63.70\n1861         WB9879CLP  99.7620520       13.7000       63.00\n1862         WB9879CLP 100.9713811       13.0000       63.60\n1863         Whetstone  82.9404256            NA       61.90\n1864         Whetstone 107.8347661            NA       63.20\n1865         Whetstone 117.9922914            NA       65.70\n1866         Whetstone 132.5016545            NA       63.90\n1867            XA4103  71.4583892            NA       63.50\n1868            XA4103  80.2222720            NA       60.70\n1869            XA4103 117.2408896            NA       64.20\n1870            XA4103 156.0136060            NA       64.80\n1871            XA4104  77.0620267            NA       60.60\n1872            XA4104  88.7674385            NA       62.10\n1873            XA4104 104.8238830            NA       63.50\n1874            XA4104 118.0883492            NA       64.90\n1875           YSC-201 122.0509432        9.8000       61.10\n1876           YSC-201 123.7767304        9.1000       60.90\n1877           YSC-201 124.0071517       10.6000       61.40\n1878           YSC-201 125.9861213       11.3000       61.20\n1879           YSC-215 134.8576902        8.5000       63.30\n1880           YSC-215 135.0089870        9.3000       63.00\n1881           YSC-215 137.6154917       10.2000       61.70\n1882           YSC-215 160.8850842       10.5000       61.80\n\n\n\nOutput file\nLet’s output this object to file so we can use it later.\n\nwrite.csv(variety_trials, here::here(\"outputs\", \"variety_trials_clean.csv\"), row.names = FALSE)\n\n\n\n\nThe pipe\nThe pipe operator %&gt;% or its newer replacement |&gt; are magic, or at least, they make our (data wrangling) lives so much easier.\nThe pipe operator works as thus:\noperation_1 %&gt;% operation_2\nOne operation can be performed (e.g. a select() command), and that resulting data frame is passed on to the next operation (e.g. filter()).\nExample: filter then sort\n\npipe1 &lt;- filter(variety_trials, yield &lt; 75) %&gt;% arrange(variety)\n\nThe data set is not named in the second operation because it is assumed to be dataset provided in the first operation. Whatever is being output directly left of the pipe operator is in the input data set.\nWe can take this even further by making the first operation our addition of the data set to the pipes:\n\npipe2 &lt;- variety_trials %&gt;% filter(yield &lt; 75) %&gt;% arrange(variety)\n\nThe pipe has made data wrangling so much easier! Before the pipe, each of these operations can be specified separately with its own object. So when you were done, you had roughly 50 objects in your environment, 48 of which were not needed anymore.\nIt also saved us from the “parentheses cascade” where one function is nested inside another function, which is nested within another, and so forth. It can be difficult to ascertain what parentheses belong to what operation, which often leads to coding errors. In a set of nestd functions, the inner functions are first executed and the outer functions are executed last. no longer had any sense of which set of parentheses belong to which operation.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPractice Problem\n\n\n\n\n\n\nImport “weather.csv” with the readr function read_csv(). Filter the weather data set for when the station is “USC00456215”\nCreate a new variable named T_avg as an average of tmin_F and tmax_F using a mutate function and name this data frame as ‘weather1’.\nSelect “name” column from the weather1 data set and rename it as “location”.\nIn weather1 data set, select the first five columns and reduce that data set to unique rows (look into using distinct() for extracting the unique observations).\nUsing weather1 data set, create a new variable as combination of station and name variables separated by “_” (e.g. station_name) using the unite() function.\n\ntip: search for unite() in help.\n\n\n\n\n\n\n\n\n\nPutting it all together\n\n\n\nWhat going on this notation?\ntibble::rownames_to_column()\nThis is a normal function call (the function being rownames_to_column()), and it is specifying that the package where this function resides is tibble (a tibble is the Tidyverse alternative to the data frame).\nYou want to use this notation in 2 circumstance:\n\nYou don’t want to load the entire package with a library() call, especially if you only need one function from it\nThe name of the function you want to call from a package conflicts with function names from another package. A very common example is filter() - this is a dplyr function, but it is also a base R function. Sometimes, you may receive a very puzzling error when using filter() that essentially is indicating that the wrong package was used. Using notation like dplyr::filter() clarified to R that you want to use the dplyr version of filter(). By default, the most recent package loaded overrides other function name conflicts, but sometiimes, it’s helpful to be unambiguous in your R function calls.",
    "crumbs": [
      "Lessons",
      "Data transformation and wrangling"
    ]
  },
  {
    "objectID": "lessons/getting-to-know-data.html",
    "href": "lessons/getting-to-know-data.html",
    "title": "Getting to Know Your Data in R",
    "section": "",
    "text": "Learning Goals\n\n\n\n\n\nAt the end of this lesson, you should know:\n\nhow to import data in R.\n\nseveral methods of data exploration in R.\n\nhow to make cross tabulations of data.\n\nhow to make histograms and pairwise plots in R.",
    "crumbs": [
      "Lessons",
      "Getting to know data in R"
    ]
  },
  {
    "objectID": "lessons/getting-to-know-data.html#import-a-csv-file",
    "href": "lessons/getting-to-know-data.html#import-a-csv-file",
    "title": "Getting to Know Your Data in R",
    "section": "Import a CSV file",
    "text": "Import a CSV file\nThis code read_csv() reads a CSV file named “caribbean_maize.csv” and assigns it to an object named “data1”.\nThe second line of code uses the “head” function to display the first 5 rows of the “data1” data frame. The View() will open the data set in new RStudio video where you can look up at the rows and columns.\n\n\n     isle site block plot  trt ears yield disease\n1 Antigua DBAN    B1    1 T111   42  4.96    TRUE\n2 Antigua DBAN    B1    2 T000   41  3.94   FALSE\n3 Antigua DBAN    B1    3 T311   49  6.35   FALSE\n4 Antigua DBAN    B1    4 T202   48  5.56    TRUE\n5 Antigua DBAN    B1    5 T111   45  5.36   FALSE\n\n\n\ndata1 &lt;- read.csv(\"data/caribbean_maize.csv\")\nView(data1)\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nThis data set has been imported and stored in an R session as a “data frame” (we will describe what that is later). This data frame only exists while your session is running. You can choose to save or export this object before closing your R session. Unless you purposely export this object and write over the original file, any changes you make to this object in an R session will not affect the original file that was imported.\n\n\n\nThere are several functions for enabling a quick examination of a data frame.\n\ndim() gives the number of rows and columns; head() prints out the first 5 rows; and summary() provides summaries of each column of a data frame.\n\n\ndim(data1)\n\n[1] 288   8\n\nhead(data1, 5)\n\n     isle site block plot  trt ears yield disease\n1 Antigua DBAN    B1    1 T111   42  4.96    TRUE\n2 Antigua DBAN    B1    2 T000   41  3.94   FALSE\n3 Antigua DBAN    B1    3 T311   49  6.35   FALSE\n4 Antigua DBAN    B1    4 T202   48  5.56    TRUE\n5 Antigua DBAN    B1    5 T111   45  5.36   FALSE\n\nsummary(data1)\n\n     isle               site              block                plot      \n Length:288         Length:288         Length:288         Min.   : 1.00  \n Class :character   Class :character   Class :character   1st Qu.: 9.75  \n Mode  :character   Mode  :character   Mode  :character   Median :18.50  \n                                                          Mean   :18.50  \n                                                          3rd Qu.:27.25  \n                                                          Max.   :36.00  \n                                                                         \n     trt                 ears           yield        disease       \n Length:288         Min.   :10.00   Min.   :0.830   Mode :logical  \n Class :character   1st Qu.:36.00   1st Qu.:2.485   FALSE:143      \n Mode  :character   Median :41.00   Median :3.930   TRUE :145      \n                    Mean   :40.43   Mean   :4.033                  \n                    3rd Qu.:45.00   3rd Qu.:5.400                  \n                    Max.   :69.00   Max.   :7.870                  \n                    NA's   :1       NA's   :1",
    "crumbs": [
      "Lessons",
      "Getting to know data in R"
    ]
  },
  {
    "objectID": "lessons/getting-to-know-data.html#common-data-structures-in-r",
    "href": "lessons/getting-to-know-data.html#common-data-structures-in-r",
    "title": "Getting to Know Your Data in R",
    "section": "Common Data Structures in R",
    "text": "Common Data Structures in R\nLet’s consider how imported data sets are arranged into complex structures (that is, objects) that we can access and manipulate.\nThere are several data structures commonly used in R:\n\nvector\ndata.frame\nmatrix\nlist\n\nThis lesson covers vectors and data frames, the two most common object types in R.\n\nThe vector\nA vector in R is an object that contain one or more elements of the same type (types are covered later in this lesson). If we select a single column variable in data1, it will be returned to us as a vector.\nData in R data frames can be referred to by their column names using the notation dataframe$column_name:\n\nVector Exploration\n\nAscertaining vector length\n\nTo find out how many items a vector has, use the length() function:\n\nlength(data1$site)\n\n[1] 288\n\n\nNote that this will also count missing values.\n\nSorting vectors\n\nTo sort items in a vector alphabetically or numerically, use the sort() function:\n\nsort(data1$yield)  # sort a number\nsort(data1$site)  # Sort a character\n\n\nFinding unique values in a vector\n\nFor ‘character’ variables with repeat information, sometimes it is more helpful to only look at unique values:\n\nunique(data1$site)\n\n[1] \"DBAN\" \"LFAN\" \"NSAN\" \"ORAN\" \"OVAN\" \"TEAN\" \"WEAN\" \"WLAN\"\n\n\n\nCounting unique values in a vector:\n\n\ntable(data1$site)\n\n\nDBAN LFAN NSAN ORAN OVAN TEAN WEAN WLAN \n  36   36   36   36   36   36   36   36 \n\n\nThis also works across multiple vectors:\n\ntable(data1$site, data1$isle)\n\n      \n       Antigua\n  DBAN      36\n  LFAN      36\n  NSAN      36\n  ORAN      36\n  OVAN      36\n  TEAN      36\n  WEAN      36\n  WLAN      36\n\n\n\nVector summaries information\n\nYou can also look at summaries for individual vectors:\n\n# mean\nmean(data1$yield, na.rm = TRUE) # the na.rm tells R to ignore missing data\n\n[1] 4.033275\n\n# minimum\nmin(data1$yield, na.rm = TRUE)\n\n[1] 0.83\n\n# maximum\nmax(data1$yield, na.rm = TRUE)\n\n[1] 7.87\n\n# median\nmedian(data1$yield, na.rm = TRUE)\n\n[1] 3.93\n\n# variance\nvar(data1$yield, na.rm = TRUE)\n\n[1] 3.021442\n\n# standard deviation\nsd(data1$yield, na.rm = TRUE)\n\n[1] 1.73823\n\n# sum all yield data\nsum(data1$yield, na.rm = TRUE)\n\n[1] 1157.55\n\n\n\n\nAccessing Vectors\nYou can access the vector items by referring to its index number inside brackets []. The first item has index 1, the second item has index 2, and so on: Multiple item can also be indexed: x[c(1,5)]. If an index position, it repeated, that item will be returned as often as it is called:\n\n# look at one position\ndata1$yield[5]\n\n[1] 5.36\n\n# look at multiple positions\ndata1$yield[c(2,5)]\n\n[1] 3.94 5.36\n\n\nWe can use this information to replace information in a vector\n\ndata1$yield[5] &lt;- 5 #(original value was 5.36)\n\nIndexing accepts numeric/integer vectors, so you can use a sequence (3:10), or concatenated positions (c(1, 2, 5, 10)), or a combination of both (c(1:10, 13)).\n\n\nAssigning Vectors to Objects\nVectors can be indexed and assigned to a new object.\n\nyield_ &lt;- data1$yield\nsite_ &lt;- data1$site\n\nThe columns called “yield” and “site” are returned as a vector and assigned to new objects.\nThese new objects can be examined and manipulated the same as if they were indexed (e.g. mean(yield, na.rm = TRUE), table(site_))\n\n\nCreating New Vectors\nWe can also create new vectors from the original vectors\n\nlog_yield = log(data1$yield)\nyield_pi = data1$yield*3.14\nyield_sqrt = sqrt(data1$yield)\near_sqr = data1$ears^2\n\nYou can also add/multiply/subtract two columns of same data type and of same length. Let’s create a new vector named ‘var2’ as a product of ‘yield’ and ‘ears’ from data1.\n\nyield_per_ear = data1$yield / data1$ears\nyield_ear &lt;- data1$yield * data1$ears\n\nR is naturally vectorized, which means that when you conduct a math operation on a vector, it will be repeated across the entire vector.\nAny vector whose length matches the number of rows in a data frame can be added to that data frame. When we do this, we assume each is in the correct order. Since ‘yield_ear’ is directly from a vectorized operation done on ‘data1’, that assumption is correctly made.\n\ndata1$yield_x_ear &lt;- yield_ear\n\nWhen adding a new vector to a data frame that is multiple of the number of rows in the dataframe, that vector will be ‘recycled’ or repeated until it is as long as the data frame:\n\ndata1$new_isle = \"Puerto Rico\"\ndata1$sequence = c(1, 2, 3, 4)\ndata1$bad_order = c(1, 2, 3, 4, 5) # throws an error\n\nError in `$&lt;-.data.frame`(`*tmp*`, bad_order, value = c(1, 2, 3, 4, 5)): replacement has 5 rows, data has 288\n\n\nR also has a rich set of math operators available. You can learn more about using math operators here.\n\n\n\n\n\n\nPractice Problems\n\n\n\n\n\n\nCreate a sequence of numbers from 1 to 10 twice and assign that to a new vector called ‘k’.\nAssign the value 5.4 to a vector called ‘lambda’\nDo the following operation to your vector from part 1 of this problem and the vector called ‘lamba’ and assign the results to a new vector:\n\n\\[ \\frac{lambda^k2.72^{-lambda}}{k!}\\] You can compute \\(k!\\) using factorial(k).\n\n\n\n\n\n\nThe Data Frame\nA data frame is a collection of the vectors of same length. This is the most widely used and important data structure in R. Each vector is a single data type, but different vectors can be different data types (e.g. character or numeric) in a data frame. This is similar to a typical workbook you might open in Excel or another spreadsheet program.\nIn this example, data1 is a data frame which consists of different vectors (isle, site, block, etc) that are each their own data type (character, integer, numeric, logical).\nA data frame has attributes for:\n\nnrow number of rows\nncol number of columns\ncolnames column names\nrownames row names (if none are provided, R will generate integer row names starting at 1)\n\nCheck the number of rows and columns in a data frame:\n\nnrow(data1)\n\n[1] 288\n\nncol(data1); length(data1)\n\n[1] 11\n\n\n[1] 11\n\ndim(data1) # tells us row and column lengths in one command\n\n[1] 288  11\n\n\n\nrownames(data1)\n\n  [1] \"1\"   \"2\"   \"3\"   \"4\"   \"5\"   \"6\"   \"7\"   \"8\"   \"9\"   \"10\"  \"11\"  \"12\" \n [13] \"13\"  \"14\"  \"15\"  \"16\"  \"17\"  \"18\"  \"19\"  \"20\"  \"21\"  \"22\"  \"23\"  \"24\" \n [25] \"25\"  \"26\"  \"27\"  \"28\"  \"29\"  \"30\"  \"31\"  \"32\"  \"33\"  \"34\"  \"35\"  \"36\" \n [37] \"37\"  \"38\"  \"39\"  \"40\"  \"41\"  \"42\"  \"43\"  \"44\"  \"45\"  \"46\"  \"47\"  \"48\" \n [49] \"49\"  \"50\"  \"51\"  \"52\"  \"53\"  \"54\"  \"55\"  \"56\"  \"57\"  \"58\"  \"59\"  \"60\" \n [61] \"61\"  \"62\"  \"63\"  \"64\"  \"65\"  \"66\"  \"67\"  \"68\"  \"69\"  \"70\"  \"71\"  \"72\" \n [73] \"73\"  \"74\"  \"75\"  \"76\"  \"77\"  \"78\"  \"79\"  \"80\"  \"81\"  \"82\"  \"83\"  \"84\" \n [85] \"85\"  \"86\"  \"87\"  \"88\"  \"89\"  \"90\"  \"91\"  \"92\"  \"93\"  \"94\"  \"95\"  \"96\" \n [97] \"97\"  \"98\"  \"99\"  \"100\" \"101\" \"102\" \"103\" \"104\" \"105\" \"106\" \"107\" \"108\"\n[109] \"109\" \"110\" \"111\" \"112\" \"113\" \"114\" \"115\" \"116\" \"117\" \"118\" \"119\" \"120\"\n[121] \"121\" \"122\" \"123\" \"124\" \"125\" \"126\" \"127\" \"128\" \"129\" \"130\" \"131\" \"132\"\n[133] \"133\" \"134\" \"135\" \"136\" \"137\" \"138\" \"139\" \"140\" \"141\" \"142\" \"143\" \"144\"\n[145] \"145\" \"146\" \"147\" \"148\" \"149\" \"150\" \"151\" \"152\" \"153\" \"154\" \"155\" \"156\"\n[157] \"157\" \"158\" \"159\" \"160\" \"161\" \"162\" \"163\" \"164\" \"165\" \"166\" \"167\" \"168\"\n[169] \"169\" \"170\" \"171\" \"172\" \"173\" \"174\" \"175\" \"176\" \"177\" \"178\" \"179\" \"180\"\n[181] \"181\" \"182\" \"183\" \"184\" \"185\" \"186\" \"187\" \"188\" \"189\" \"190\" \"191\" \"192\"\n[193] \"193\" \"194\" \"195\" \"196\" \"197\" \"198\" \"199\" \"200\" \"201\" \"202\" \"203\" \"204\"\n[205] \"205\" \"206\" \"207\" \"208\" \"209\" \"210\" \"211\" \"212\" \"213\" \"214\" \"215\" \"216\"\n[217] \"217\" \"218\" \"219\" \"220\" \"221\" \"222\" \"223\" \"224\" \"225\" \"226\" \"227\" \"228\"\n[229] \"229\" \"230\" \"231\" \"232\" \"233\" \"234\" \"235\" \"236\" \"237\" \"238\" \"239\" \"240\"\n[241] \"241\" \"242\" \"243\" \"244\" \"245\" \"246\" \"247\" \"248\" \"249\" \"250\" \"251\" \"252\"\n[253] \"253\" \"254\" \"255\" \"256\" \"257\" \"258\" \"259\" \"260\" \"261\" \"262\" \"263\" \"264\"\n[265] \"265\" \"266\" \"267\" \"268\" \"269\" \"270\" \"271\" \"272\" \"273\" \"274\" \"275\" \"276\"\n[277] \"277\" \"278\" \"279\" \"280\" \"281\" \"282\" \"283\" \"284\" \"285\" \"286\" \"287\" \"288\"\n\ncolnames(data1)\n\n [1] \"isle\"        \"site\"        \"block\"       \"plot\"        \"trt\"        \n [6] \"ears\"        \"yield\"       \"disease\"     \"yield_x_ear\" \"new_isle\"   \n[11] \"sequence\"   \n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nThe rownames attribute can be set, but if it is not, it is automatically created within R from 1 to the total number of rows. Row names are a tricky attribute than many packages in R do not support. A function may toss out your row names without any warning!\nIn general, I do not recommend setting the row names attribute in data frames to anything other than the default values unless a package function specifically requires it.\n\n\n\n\n\n\n\n\n\nPractice Problems\n\n\n\n\n\n\nImport “Apple.csv” from the data/ folder using the function read.csv() and assign it to an object named “data2”.\nCopy ‘data2’ to a new object. You pick the new name!\nCreate three news vectors using the variables named ‘stock’, ‘gen’, and ‘yield’ from data2 and give each vector a name of your choosing.\n\n\n\n\n\nAccessing items in a data frame\nEarlier, we saw how we can use the $ notation to access any column (or vector) in a data frame. For example, to access the ‘block’ variable in our data1, you can use data1$block\nA data set can also be indexed by numeric position. You can extract individual elements in a data frame by references the row and column position, my_dataframe[row, column], where the indexing begins at 1. So my_dataframe[1, 1] would extract the data point located in the first row and first column.\nMore examples:\n\nExtract the items located in the first 2 rows and 2 columns:\n\nVisual of what we want:\n\n\n\n\n\n\n\n\n\nThis graphic is an overlay of green over blue, creating a dark teal color. The green represents rows indexed, the blue is columns indexed and the teal is the intersection between those two. If a color is not visible, that is because it is under the teal overlay.\n\ndata1[1:2, 2:3]\n\n\nExtract the first two rows and all of the columns:\n\n\n\n\n\n\n\n\n\n\n\ndata1[1:2, ]\n\nWhen the column position is left empty, all columns are returned\n\nExtract the entire first column and all rows:\n\n\n\n\n\n\n\n\n\n\n\ndata1[ ,1]\n\nWhen the row position is left empty, all rows are returned.\n\nExtract the values located in the first 2 rows and first two columns:\n\n\n\n\n\n\n\n\n\n\n\ndata1[1:2, 1:2]\n\n\nReturn everything except the third columns\n\n\n\n\n\n\n\n\n\n\n\ndata1[ ,-3]\n\n\nReturn everything except the first 2 rows:\n\n\n\n\n\n\n\n\n\n\n\ndata1[-(1:2),  ]\n\n\n\nValue replacement\nThere are likely to be moments when you want to replace values in a data frame or vector with something else. You can do that with indexing and variable assignment.\nLet’s image that we want to assign the third value in the sixth column as NA. First, we index the that position, then we assign a value to it (NA in this case):\n\ndata1[1, 8] &lt;- NA\n\nNA is a reserved word in R, hence it does not need to be quoted.\n\n\nCreating a new data frame\nWe can create an example data frame using the new vectors created earlier in this lesson:\n\nnew_df &lt;- data.frame(log_yield, ear_sqr )\nhead(new_df)\n\n  log_yield ear_sqr\n1  1.601406    1764\n2  1.371181    1681\n3  1.848455    2401\n4  1.715598    2304\n5  1.609438    2025\n6  1.821318    2116\n\n\n\n\n\n\n\n\nBrief notes on naming\n\n\n\n\n\nWhile duplicate column names in a data frame are allowed, they are not advised and may throw an error during data import, depending on the import function used.\nAlso, it is not recommended that objects be named after existing functions since it can cause unpredictable behavior with R. Over time, you will learn of these conflicts. Two examples that new users often trip over are data and df, which are existing functions in R.\n\n\n\nVectors and data frames are two major object types in R, but there are other types that provide different functionality. You can learn more about them here.",
    "crumbs": [
      "Lessons",
      "Getting to know data in R"
    ]
  },
  {
    "objectID": "lessons/getting-to-know-data.html#data-types",
    "href": "lessons/getting-to-know-data.html#data-types",
    "title": "Getting to Know Your Data in R",
    "section": "Data Types",
    "text": "Data Types\nRecall that we can look at the overall structure of a data.frame with str():\n\nstr(data1)\n\n'data.frame':   288 obs. of  11 variables:\n $ isle       : chr  \"Antigua\" \"Antigua\" \"Antigua\" \"Antigua\" ...\n $ site       : chr  \"DBAN\" \"DBAN\" \"DBAN\" \"DBAN\" ...\n $ block      : chr  \"B1\" \"B1\" \"B1\" \"B1\" ...\n $ plot       : int  1 2 3 4 5 6 7 8 9 10 ...\n $ trt        : chr  \"T111\" \"T000\" \"T311\" \"T202\" ...\n $ ears       : int  42 41 49 48 45 46 42 44 42 44 ...\n $ yield      : num  4.96 3.94 6.35 5.56 5 6.18 4.71 6.03 2.88 5.68 ...\n $ disease    : logi  NA FALSE FALSE TRUE FALSE TRUE ...\n $ yield_x_ear: num  208 162 311 267 225 ...\n $ new_isle   : chr  \"Puerto Rico\" \"Puerto Rico\" \"Puerto Rico\" \"Puerto Rico\" ...\n $ sequence   : num  1 2 3 4 1 2 3 4 1 2 ...\n\n\n\nCommon Data Types\nBy using the str() command above, we noticed the object types in this data set. The common object types in this data set includes:\n\nYield and ears are shown as ‘numeric’ and ‘integer’ (integer is a subtype of ‘numeric’).\nVariables such as site, and trt are class ‘character’.\nThe variable ‘disease’ is logical, meaning it can only take TRUE or FALSE values (or 1/0 values)\n\nYou can also check the class of each variable separately by using class() function.\n\nclass(data1$block)\n\n[1] \"character\"\n\nclass(data1$yield)\n\n[1] \"numeric\"\n\nclass(data1$disease)\n\n[1] \"logical\"\n\n\n\n\nData Type Conversion\nData type of individual variables can be ‘coerced’ (forced) into different types. For example, plot is a numeric variable, as.character() converts it to a character variable.\n\ndata1$plot &lt;-  as.character(data1$plot)\n\ndata1$plot &lt;- as.numeric(data1$plot) #converting plot back to numeric\n\n\n\nFactors\nA character variable can be converted to the factor variable. Factor is a special type of variable used largely for linear modelling. It look like a character variable and it has pre-defined levels.\n\ndata1$block &lt;- as.factor(data1$block)\nclass(data1$block) # check class of the block\n\n[1] \"factor\"\n\nlevels(data1$block) # existing levels\n\n[1] \"B1\" \"B2\" \"B3\" \"B4\"\n\nnlevels(data1$block) # predefined levels\n\n[1] 4\n\n\nFactors are challenging to work with. They are required for linear modelling and hence that is we teach them. Nevertheless, they are tricky beasts with funny conventions (run typeof(data1$block) to see what we mean). We don’t have any additional lesson to refer to, but if find yourselve working with factors, take some time to read the documentation for the function factor() (run ?factor in the console), and if you must really get serious about factors, see the packge forcats for further resources.\n\n\n\n\n\n\nPractice Problems\n\n\n\n\n\nHere is some code from earlier: data1[1, 8] &lt;- NA\n\nWhat happens if we replace NA with \"NA\"?\nHow do we fix this?\n\n\n\n\nMore information on different data types in R and how to convert between them can be found here.",
    "crumbs": [
      "Lessons",
      "Getting to know data in R"
    ]
  },
  {
    "objectID": "lessons/getting-to-know-data.html#base-plotting",
    "href": "lessons/getting-to-know-data.html#base-plotting",
    "title": "Getting to Know Your Data in R",
    "section": "Base Plotting",
    "text": "Base Plotting\nWhile R can make sophisticated and publication quality charts, it can also be used for quick data visualizations. We usually use a set of functions that automatically come with an R installation, ‘base functions’. ‘Base plotting’ refers to functions that are part of base R used for plotting.\nHere we are creating a histogram to look at data distribution of the ‘yield’ variable from data1 using a hist() function.\n\nhist(data1$yield)\n\n\n\n\n\n\n\n\nThe boxplot() function in R is used to create a boxplot for the selected variables. In the code chunk below, a boxplot of yield for each replication is created, the xlab and ylab shows the title of x-axis and y-axis, respectively. The main=, provides the title to the graph.\n\nboxplot(yield ~ trt, data = data1,\n        main = \"Yield Graph\",\n        xlab = \"Rep\",\n        ylab = \"Yield\")\n\n\n\n\n\n\n\n\nPairwise plots are also useful ways to visualize information:\n\nplot(data1$ears, data1$yield)  \n\n\n\n\n\n\n\n\nPoint plots can also be done a single variable:\n\nplot(data1$yield)\n\n\n\n\n\n\n\n\nThe x-axis, “Index”, is the row index, i.e. the indexed position along the vector.\nBarplots are also handy. data1 is suited for a barplot, but we can make a data set better for a barplot:\n\ndata1$yield_categories &lt;- cut(data1$yield, 5) # break yield into 5 groups\ntotes &lt;- as.data.frame(table(data1$yield_categories)) # count how many observations are in each group and convert to a data frame\ntotes # print object\n\n          Var1 Freq\n1 (0.823,2.24]   60\n2  (2.24,3.65]   69\n3  (3.65,5.05]   71\n4  (5.05,6.46]   58\n5  (6.46,7.88]   29\n\n\n\nbarplot(Freq ~ Var1, data = totes)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\nOften, base plotting is only used for quick visualizations and it is not worth the effort to make them look pretty. However, they can be made publication quality. Search ?par to learn more about how to adjust and improve upon these plots.\nlater in this workshop, we will absolutely be covering how to make publication quality plots with ggplot2 and related extensions.\n\n\n\n\n\n\n\n\n\nPractice Problems\n\n\n\n\n\n\nCalculate the inverse of yield from data1.\nMake a histogram of inverse yield\nCalculate relative percent yield by dividing all yield values by the mean yield and multipling it by 100. Do the equivalent action for ears.\nMake a pairwise plot (x-y plot) between relative percent ears and relative percent yield.\n\n\n\n\n\n\n\n\n\n\nPutting it all together\n\n\n\nCheck the environment pane. These are the object you created during the session. This is where you will see all objects created, unless you have choosen to render the objects invisible by starting their object names with a ., a period.",
    "crumbs": [
      "Lessons",
      "Getting to know data in R"
    ]
  },
  {
    "objectID": "lessons/lesson-zero.html",
    "href": "lessons/lesson-zero.html",
    "title": "Preparing for this Short Course/Workshop",
    "section": "",
    "text": "Welcome & Salutations!\nWe excited to teach this course. We have revamped this curriculum so that we get everyone doing practical coding with data as soon as possible.\nWe have limited time, so order to conserve class time and have us all ready for the first day of class, please read through this “Lesson Zero” and follow the instructions below.\n\nInstall R & RStudio.\nFollow these instructions for installing R and RStudio. R is the actual programmatic engine that you can do cool things with, and RStudio is an “integrated development environment” (IDE) to help us use R effectively. Some of the screenshots are for an older version of R; please install the latest version of R (4.4 as of May 1, 2024).\n\n\nJoin Posit Cloud\nYou will receive a link via email from us to join our online classroom on Posit Cloud, where you will need to sign up for an account using your email, or you can connect it to a Gmail or GitHub account (any of these choices will work fine for the class). If do you not have a Gmail or GitHub account or prefer not to use those, you can use your normal work email instead. Once you receive the invitation and have created an account, follow these instructions for accessing the classroom.\n\n\nClass Structure\nFor all lessons, please follow along in R + RStudio or Posit Cloud session. In most instances, you will type and run the same code that we will demonstrate. Actually typing out the code rather than cut-and-pasting is how you learn.\nAdditionally, all code generated that day will be posted on the Posit Cloud ‘classroom’. It is important that you read through notes and try to run to do the exercises if (1) you had to miss some or all of a class, or (2) there is material you do not understand.\nIt is very important that you use the time between class sessions to ensure you understand the material.\n\n\nClass absences\nIt’s okay to miss class or a lecture - we all have stuff going on. There is no need to tell us in advance. As mentioned above, if you miss class, please be sure to catch up on the course material you missed by reading the course notes, running the content and attempting the exercises. Falling behind in the content can create problems with the following content, so please make every effort to stay current with the class.\n\n\nClass Notes Structure\nAs mentioned, all code run will be captured in class notes that will be posted. While you can read those notes and not attend class, many find it helpful to attend a live course and receive live instruction and feedback from an expert.\n\nAt the beginning of each lesson, this box will be included:\n\n\n\n\n\n\n\nLearning Goals\n\n\n\n\n\nThis will be a list of what each lesson intends to teach.\nIf you do not think you have met those learning goals, please review the notes, and if the material is still unclear, contact us.\n\n\n\n\nAt the end of most lessons, this box will be included:\n\n\n\n\n\n\n\nPutting it all together\n\n\n\nTips designed to weave together information from multiple lessons.\n\n\n\nPractice problems are included in most lessons:\n\n(click to expand)\n\n\n\n\n\n\nPractice Problem\n\n\n\n\n\nTest your R installation by running this in the console:\nx = 1:10\nx\nWhat resulted?\n\n\n\n\n\nHow to Suceed in Learning R\nLearning R is hard. It has a very steep learning curve. You will spend some amount of time lost and confused. At first, your work may look or feel like some of the baking attempts from the TV show “Nailed It”, where amateur bakers attempt to make very intricate baked concoctions:\n\nThat is normal and okay. It means you are trying to active engage with the material. Keep engaging in this process of learning to code. Many of you may have never programmed in any language before, where others do have previous programming experience. After time and regular practice, your R code will look better and most importantly, be easier for you to write. The purpose of this workshop is to reduce the amount of time you spent in the zone of learning pain:\n\nHere are some tips on how to succeed in learning R from this workshop:\n\nAt the end of each class (or when you have a free moment in the class), review the learning goals and decide if you met those goals. These are designed to be the bare minimum of knowledge to competently use R. Later workshop content builds on this knowledge.\n\nReview what we have covered between classes - refresh your knowledge.\nIf there are practice problems, do them (we will give time during class).\nExperiment in the R console using what you learned. Really, nothing can go wrong.\nIf class material is not clear, re-run the code from class and reread the notes; If it’s still not clear, ask up questions. We are here to help.\n\n\n\nYour very first R lesson!\n\nR is case-sensitive! (data is different from Data and DATA). This means when typing commands, exercise great care and attention to detail so your code works.\nThere is no “undo” button in R. Once a command is run, you can’t undo it! (this is not as bad as it sounds)",
    "crumbs": [
      "Lessons",
      "Lesson Zero"
    ]
  },
  {
    "objectID": "lessons/r-documentation.html",
    "href": "lessons/r-documentation.html",
    "title": "R Functions & R Help",
    "section": "",
    "text": "Learning Goals\n\n\n\n\n\nAt the end of this lesson, you should:\n\nbe able to install R packages\nunderstand how to call functions using named and positional arguments\nbe able to access help files for an R function and know how to use the information provided in a help file",
    "crumbs": [
      "Lessons",
      "R documentation"
    ]
  },
  {
    "objectID": "lessons/r-documentation.html#r-package-installation",
    "href": "lessons/r-documentation.html#r-package-installation",
    "title": "R Functions & R Help",
    "section": "R Package Installation",
    "text": "R Package Installation\nThere are 2 options for installing packages available on CRAN (Comprehensive R Archive Network).\n\nOption 1: the command line\n\n# one package\ninstall.packages(\"package_name\")\n# multiple packages\ninstall.packages(c(\"package_1\", \"package_2\"))\n\nSpelling and case must be exact. Otherwise you get an error:\n\ninstall.packages(\"matrx\")\n\nError: package 'matrx' is not available\n\n\n\n\nOption 2: The RStudio ‘Packages’ window:\nA point-and-click interface.\n\n\n\n\n\n\n\n\n\nClick “Install” and then type your package. Close matches will start to appear in the dropdown:\n\n\n\n\n\n\n\n\n\nThis will automatically resolve spelling and case issues.\n::: {callout-note collapse = FALSE} Note that multiple packages can be listed in the install.packages() command, but not library(). Also, packages only need to be installed once, not repeatedly (unless a package needs to be a updated to the latest version). However, packages must be loaded in every R session or their functionality (including the help files) will not be available. :::",
    "crumbs": [
      "Lessons",
      "R documentation"
    ]
  },
  {
    "objectID": "lessons/r-documentation.html#the-mechanics-of-r-functions",
    "href": "lessons/r-documentation.html#the-mechanics-of-r-functions",
    "title": "R Functions & R Help",
    "section": "The Mechanics of R Functions",
    "text": "The Mechanics of R Functions\nWe have thus far used a few R functions without explicitly stating how to call them properly.\nThe majority of functions in R follow this format:\n\nfunction_name(arg1, arg2, arg3)\n\nWhere “arg” refers to a function argument (that is, a piece of information the function can use).\nA function has a name, and can take several arguments within the parentheses. These argument values can be provided by providing each argument in the expected order:\n\nfunction_name(value1, value2, value3)\n\nNote that each positional argument is not being explicitly referenced. However, we can specify each argument when calling a function:\n\nfunction_name(arg1 = value1, arg2 = value2, arg3 = value3)\n\nWhen specifying the argument explicitly, we don’t have to follow the order of arguments:\n\nfunction_name(arg1 = value1, arg3 = value3, arg2 = value3)\n\nThis approach of using named arguments is very helpful when there is a very long list of potential argument and you only plan to specify a small portion of them.\nWe can also combined positional argument and named arguments:\n\nfunction_name(value1, arg3 = value3)\n\nIn this case, arg2 has been completed omitted. When an argument is not specified, that implies the default arguments for that function will be used instead. In order to find out the default argument values for a function, we need to consult the R help files.\n\nUsing R Help\nYou can search for a function directly using the search windows in the upper right of the “Help” pane.\nYou can also search using this notation: ?function_name.\nLet’s check out the help file for sample(), a function designed to randomly sample items and return that random sample to us.\n\n?sample\n\nHere is a screenshot of the window that hopefully popped up in your RStudio help pane:\n\n\n\n\n\n\n\n\n\nAll help files follow this format\n\nDescription what the function does\nUsage how the function is called; this is where default argument may be listed\nArgument the named arguments available in the function (often the most useful part of the help file)\nDetails an optional section providing various computational details\nValue what is returned after the function is run\nReferences any technical, scientific or peer-reviewed lit references supporting the computational procedures implemented in the function\nSee Also similar functions (sometimes helpful)\nExamples actual examples of the function in the wild! These are hit-or-miss on their overall utility, but when I’m desperate to understand how to properly call a function, this has helped me.\n\nAt the very bottom is the package the function came from and a link to an index of all functions associated with that package. This can come in handy when you want to browse all functions available in a package.\nLooking at the sample() help file, here is what is it telling us:\n\nThe first argument is a vector of choices for the function to sample randomly\nThe next argument is the number to sample. By default, it will return a sample the same length at the input vector of choices\nThe third argument indicates that if a vector should be sampled with replacement (that is, can items be repeatedly sampled). The default is FALSE (meaning no).\nWe can also specify the probability of sampling any item in the input vector. If we don’t provide this information, then all item is assumed to have equal probabilities of being sampled.\nIt will return a vector of the item sampled\n\n\nx &lt;- 1:100\nx\n\n  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18\n [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36\n [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54\n [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72\n [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90\n [91]  91  92  93  94  95  96  97  98  99 100\n\nsample(x, 10, replace = TRUE)\n\n [1]  96  52  25  87  76  34  15  63 100  32\n\n\n\n\n\n\n\n\nNote\n\n\n\nIt is normal to struggle with R code. Newer users of R struggle more than seasoned users, but we all end up experiencing an apparently intractable problem, one that we cannot solve despite our best efforts. The first response may be to Google that problem (which may yield helpful information), but there are also more efficient search strategies you can employ to solve your R coding problem. Here is a blog post addressing that very topic: how to find help when we are stuck.\n\n\n\n\nBack to functions\nFunctions can return exactly one object (or none at all). If it does return an object, that can be assigned to a new object:\n\nnew &lt;- function_name(value1, arg3 = value3)\n\nIf the output from a function is not assigned, it will be sent to the console instead (we’ve done this plenty during this workshop). Sometimes, this is fine! Maybe it is a small amount of output we are running to check data integrity. Or maybe it’s a giant data frame we deeply regret printing in the console.",
    "crumbs": [
      "Lessons",
      "R documentation"
    ]
  },
  {
    "objectID": "lessons/r-documentation.html#base-r-and-contributed-libraries",
    "href": "lessons/r-documentation.html#base-r-and-contributed-libraries",
    "title": "R Functions & R Help",
    "section": "Base R and Contributed Libraries",
    "text": "Base R and Contributed Libraries\nThis is the only lesson with a major focus on ‘base R’, that is the set of functions that come automatically loaded when you install and open R.\nTake a look at this long-ish cheat sheet (4 pages long!) of the many useful commands in base R. Skim through this and see if there is anything useful for you. It is meant to periodically skimmed, not studied in great detail (you’ll put yourself to sleep if you try to read it beginning to end).\nAdditionally, here is the ultimate guide to working with the R language. This is a long, highly technical document, but it is also incredibly detailed and informative. Reading this is like reading an encyclopedia - only read a a small section at a time and focus on topics that interest you.\n\nLibraries\n\n\n\n\n\n\n\n\n\nBut also, the community keeps R humming and current by writing packages that extend R’s functionality. This is both awesome (the latest greatest tool is now enabled!) and bad (quality of implementation is not guaranteed and these packages are often not maintained over the long haul).\nThese packages are often made available on CRAN, the comprehensive R archive network, as well Bioconductor or via GitHub, GitLab, independent websites.\n\n\n\n\n\n\nPutting it all together\n\n\n\nWhen you search for something in the Help pane, several types of help files will result: vignettes and function documentation. Function documentation is what we have just reviewed (detailed information on how to use a function). Vignettes are examples of how to use a collection of function in a package. They provide more context and a programmatic flow for using a package or accomplishing a particular goal. They are package tutorials. Vignettes are not provided for every function or every package; they are an extra feature that package authors choose to create for users.\nThere is an enormous number of R packages available! There are a few options for finding packages relevant to your work: * CRAN Task Views * Bioconductor Workflows",
    "crumbs": [
      "Lessons",
      "R documentation"
    ]
  },
  {
    "objectID": "lessons/repeating-actions.html",
    "href": "lessons/repeating-actions.html",
    "title": "Repeating Actions in R",
    "section": "",
    "text": "Learning Goals\n\n\n\n\n\nAt the end of this lesson, you should:\n\nknow how to use apply() to iterate across a data frame\nknow to use lapply() to interate across a list\nknow the structure of purrr functions for iterating across different object types\nknow when and how to construct a for loop\n\n\n\n\n\nRepeating operations across a vector\n\nReminder: a vector is an object with a length attribute composed of items each of the same class. It can have a name attribute (not required)\nifelse(test, action-if-yes, action-if-no)\nThe ‘test’ should be an R function that will return a TRUE or FALSE, e.g. is.na(), is.numeric()\nVector example\n\n\nx &lt;- 1:10\ny &lt;- ifelse(x &lt; 5, NA, x)\n\n\nVector example inside a data.frame\n\n\ndata(storms, package = \"dplyr\")\nstorms$category_simple &lt;- ifelse(storms$wind &lt;= 50, \"small\", \"big\")\n\n\n\nRepeating operations across a data frame\n\napply() a simple handy function to repeat things across a data.frame (or tibble, or matrix)\nThis operation is vectorised, meaning all processes proceed simultaneously\nAcross rows\n\n\nstorm_num &lt;- select_if(storms, is.numeric)\napply(storm_num, 1, median, na.rm = TRUE)\n\n\nAcross columns\n\n\nstorm_num &lt;- select_if(storms, is.numeric)\napply(storm_num, 2, median, na.rm = TRUE)\n\n\nSpecial R functions for rows and columns\n\nThese functions are very, very fast\nThey are not forgiving of non-numeric data\n\n\nrowSums(); colSums()\nrowMeans(); colMeans()\n\n\nlibrary(dplyr); data(\"storms\")\n\n\nAttaching package: 'dplyr'\n\n\nThe following object is masked _by_ '.GlobalEnv':\n\n    storms\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nstorms %&gt;% select_if(is.numeric) %&gt;% colMeans(na.rm=TRUE)\n\n                        year                        month \n                 2002.754364                     8.705635 \n                         day                         hour \n                   15.732303                     9.100937 \n                         lat                         long \n                   27.005763                   -61.560086 \n                    category                         wind \n                    1.895690                    50.049393 \n                    pressure tropicalstorm_force_diameter \n                  993.484465                   147.869327 \n    hurricane_force_diameter \n                   14.920698 \n\n\n::: {.callout-note} # Comments on NA values\n\nI often get the question “how can I replace”NA” across my entire data object?”\nNA is a reserved word in the R language referring to missing data. Often the best way to handle how missing values from your data are handled is to specify that when the file is read in. Check the documentation for your import function, e.g. read.csv(..., na.string = \"...\").\nTo do a global replacement of NA with another value, use tidyr::replace_na()\nTo do a global replacement of another value with NA, this can be handled in the import, or use dplyr::na_if()\n\n\n\n\nRepeating operatio across a list\n😍😍😍😍😍 lapply() 😍😍😍😍😍\n\nVectorised over lists\nIf you can express one aspect of your operation as a list, this can probably work for you!\nDownside: everything comes back as a list (it takes an effort to convert this into a more exportable form)\nIt uses very simple notation:\n\n\nlapply(list, some_function)\n\n\nExample\n\n\nintegers &lt;- sample(1:100, 200, replace = TRUE)\nthrice_int &lt;- lapply(integers, function(x) x*(c(1,2,3)))\n\nI’m very fond of this for doing complex repeat operations. Perhaps I have a group of experiments, all with identical experimental design, that each need to be analyzed the same. Using a list can accomplish this efficiently.\n\nlapply() flotsam & jetsam\n\nDealing with lists can be challenging: they follow different rules; they typically require lots and lots of indexing to extract content. And you usually can’t write a list straight to file like a data.frame.\n\nsapply() is just like lapply(), except it tries to simplify to common R data objects - a matrix or array. This works if the return data is one row.\ndplyr::bind_rows() can concatenate data.frames better than rbind().\nGetting things out of a list and into the desired format can be one of the most challenging aspects of working with lapply() (bonus: it makes you understand R data types really well!).\npurrr to the rescue!\n\n\n\n\npurrr for repeat operations\npurrr does all of the hard work of iteration plus conversion of output to the object type you want! It works on data structures of all types: vectors, data frames and lists.\n\nlibrary(purrr)\n\nmtcars %&gt;%\n  split(.$cyl) %&gt;%\n  map(~ lm(mpg ~ wt, data = .x)) %&gt;%\n  map_dfr(~ as.data.frame(t(as.matrix(coef(.)))))\n\n  (Intercept)        wt\n1    39.57120 -5.647025\n2    28.40884 -2.780106\n3    23.86803 -2.192438\n\n\n\n\n\n\n\n\nNote\n\n\n\npurrr is complicated! Make use of the cheatsheet].\n\n\n\n\nBase/Tidyverse equivalents\n\n\n\nbase functions\ntidyverse equivalent\n\n\n\n\nlapply() sapply() vapply()\npurrr package\n\n\nmapply()\npurrr::pmap()\n\n\ntapply()\ndplyr::group_by() %&gt;%  dplyr::summarise()\n\n\nreplicate()\npurrr:rerun()\n\n\nifelse()\ndplyr::case_when()\n\n\n\n\n\nThe oft-abused for\nA for loop:\n\nfor (i in thingy) {\n  do_something()\n}\n\nI see things like this frequently:\n\nx &lt;- LETTERS[1:10]\nfor (i in x) print(i)\n# same as sapply(x, print)\n\nOr worse:\n\nfor (i in item1) {\n  for(j in item2) {\n    here_we_go(...)\n  } }\n\n\nOptimal use of for\n\nBetter usage of for is when you require the previous value(s) to proceed through the loop\npre-allocation of your vector/data.frame/list/etc will result in faster code\n\n\n# vector pre-allocation\nf &lt;- c(0, 1, rep(NA, 98)) \nf[1:10]\n\n [1]  0  1 NA NA NA NA NA NA NA NA\n\n# Fibonacci sequence\nfor (i in 3:100){\n  f[i] = f[i-1] + f[i-2]\n}\n\nf[1:10]\n\n [1]  0  1  1  2  3  5  8 13 21 34\n\n\n\n\n\nTraditional control flow\n\nThese are standard control variables that exist across many languages to repeat operations.\nThese are not vectorized; they only work with a single input at time.\n\n\nif\nelse\nfor \nwhile\nnext\nbreak\n\n\nNote that these are reserved words in the R language; you cannot use these words for any other purpose in the R language than what they are designed to do (no function masking is possible).\n\n\n\n\n\n\n\nNote\n\n\n\nTeaching how to use these traditional control flow variables is beyond an introductory course in R. However, you can learn more about it here and Introduction to R manual.\n\n\n\n\n\n\n\n\nPutting it all together\n\n\n\nUnderstanding how to do repeat operations in R often requires a strong understanding of the underlying data structures we are trying to perform those operations on. This aspect of R, sometimes called “data conditioning” can be one of the most challenging aspects of using R. When writing repeat operations, check back on Lessons 3 and 4 that address basics of data types and data structures if you are having trouble."
  },
  {
    "objectID": "lessons/reshaping.html",
    "href": "lessons/reshaping.html",
    "title": "Reshaping Data Sets",
    "section": "",
    "text": "Learning Goals\n\n\n\n\n\nAt the end of this lesson, you should:\n\nbe able to convert a long data set to wide\nbe able to convert a wide data set to long\nbe aware of function used during pivot_wide() to compress multiple observations for a variable combination being pivoted.\n\n\n\n\n\nWhat is pivoting?\nThere are circumstances when a wide data set are needed and circumstances when a long data set are needed, for analysis, plotting, data wrangling, etc.\nDoing this manually in a spreadsheet program is extremely cumbersome and very susceptible to errors! You are much better off doing this in R (or another programming language).\nThese wide-to-long and long-to-wide conversions are also called ‘pivoting’.\n\n\n\n\n\n\n\n\n\nWhen pivoting from long to wide format, we should consider what will be used as the identifying information, what information will be used for column headers and what information will be used to fill the cells/populate the table.\nWhen pivoting from wide to long, the considerations are similar: what will be the name of the new column header and what information (i.e. what columns) will be used to populate the data in the vertical direction, while which columns will be used for record identification.\nPivoting from wide to long can be done with the tidyr functions pivot_wide() and the reverse function if pivot_longer().\nLet’s run some examples with trial data set.\nLoad the libraries and trial data:\n\nlibrary(readr); library(dplyr); library(tidyr)\n\nvariety_trials &lt;- read.csv(here::here(\"data\", \"trial_data.csv\")) \n\n\n\nPivot long to wide\nThe first thing we should do is look at the documentation for pivot_wider.\n\n?pivot_wider\n\nThe main arguments to consider (not including the input data) is:\nid_cols what are the identifying columns that we will keep in the data set to identify and separate records. This can be multiple columns.\nnames_from is the variable that will be used to make the new column header. This is the column that we are seeking to change from long to wide. This should be a categorical variable or one that can be coerced to one. Usually it contains repeating values.\nvalues_from is the variable that will be used to fill the cells under the column header.\nThere is long list of other arguments, but these are the most important.\n\nPivot single variable\nThe loaded data set includes many different field trials. Let’s look at the information for one trial and pivot the data across replicates for a single variable, using entry as an ID variable.\nFirst, find out the different levels for “trial”:\n\nunique(variety_trials$trial)\n\n [1] \"SWIdahoCereals_H_S_PAR_2018\" \"SWIdahoCereals_H_S_WEI_2018\"\n [3] \"SWIdahoCereals_H_W_PAR_2017\" \"SWIdahoCereals_H_W_PAR_2018\"\n [5] \"SWIdahoCereals_H_W_WEI_2018\" \"SWIdahoCereals_HRS_PAR_2016\"\n [7] \"SWIdahoCereals_HRS_PAR_2017\" \"SWIdahoCereals_HRS_PAR_2019\"\n [9] \"SWIdahoCereals_HRS_PAR_2020\" \"SWIdahoCereals_HRW_PAR_2019\"\n[11] \"SWIdahoCereals_HRW_PAR_2020\" \"SWIdahoCereals_HWS_PAR_2016\"\n[13] \"SWIdahoCereals_HWS_PAR_2017\" \"SWIdahoCereals_HWS_PAR_2019\"\n[15] \"SWIdahoCereals_HWS_PAR_2020\" \"SWIdahoCereals_HWW_PAR_2019\"\n[17] \"SWIdahoCereals_HWW_PAR_2020\" \"SWIdahoCereals_SWS_PAR_2016\"\n[19] \"SWIdahoCereals_SWS_PAR_2017\" \"SWIdahoCereals_SWS_PAR_2018\"\n[21] \"SWIdahoCereals_SWS_PAR_2019\" \"SWIdahoCereals_SWS_PAR_2020\"\n[23] \"SWIdahoCereals_SWS_WEI_2018\" \"SWIdahoCereals_SWW_PAR_2017\"\n[25] \"SWIdahoCereals_SWW_PAR_2018\" \"SWIdahoCereals_SWW_PAR_2019\"\n[27] \"SWIdahoCereals_SWW_PAR_2020\" \"SWIdahoCereals_SWW_WEI_2018\"\n\n\nThis example will use the last trial listed (SWIdahoCereals_SWW_PAR_2020), but any of these options will work. Let’s filter the data and check that there is one observation per rep and entry.\n\nparma2018 &lt;- variety_trials %&gt;% filter(trial == \"SWIdahoCereals_H_S_PAR_2018\") \ntable(parma2018$variety, parma2018$rep)\n\n             \n              1 2 3 4\n  06PN3017-09 1 1 1 1\n  12SB0197    1 1 1 1\n  12SB0224    1 1 1 1\n  Alum        1 1 1 1\n  Dayn        1 1 1 1\n  Glee        1 1 1 1\n  IDO1602S    1 1 1 1\n  IDO1603S    1 1 1 1\n  IDO1604S    1 1 1 1\n  Jefferson   1 1 1 1\n  LCS Iron    1 1 1 1\n  LCS Luna    1 1 1 1\n  SY Coho     1 1 1 1\n  SY Gunsight 1 1 1 1\n  UI Platinum 1 1 1 1\n  WA828       1 1 1 1\n  WB7328      1 1 1 1\n  WB7589      1 1 1 1\n  WB9411      1 1 1 1\n  WB9433      1 1 1 1\n  WB9578      1 1 1 1\n  WB9668      1 1 1 1\n\n\nThe table produces all “1” indicating 1 observation per variable combination, which is what we want.\n\nparma2018_wide &lt;- parma2018 %&gt;% \n  pivot_wider(id_cols = variety,\n              names_from = rep,\n              values_from = yield)\n\nhead(parma2018_wide)\n\n# A tibble: 6 × 5\n  variety     `1`   `2`   `3`   `4`\n  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 12SB0197   71.7  109.  81.7 104. \n2 Jefferson  65.3  104.  91.3  84.7\n3 Dayn       70.8  102.  86.2 109. \n4 WA828      77.8  110.  93.3  99.3\n5 Alum       71.1  119.  93.4 109. \n6 Glee       80.8  106.  93.5  94.1\n\n\nIf you try to index that column with parma2018_wide$1, an error is thrown:\n\nparma2018_wide$1\n\nError: &lt;text&gt;:1:16: unexpected numeric constant\n1: parma2018_wide$1\n                   ^\n\n\nWe can give it better column names (not starting with a number) using the names_prefix argument.\n\nparma2018_wide &lt;- parma2018 %&gt;% \n  pivot_wider(id_cols = variety,\n              names_from = rep,\n              values_from = yield,\n              names_prefix = \"rep_\")\n\nhead(parma2018_wide)\n\n# A tibble: 6 × 5\n  variety   rep_1 rep_2 rep_3 rep_4\n  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 12SB0197   71.7  109.  81.7 104. \n2 Jefferson  65.3  104.  91.3  84.7\n3 Dayn       70.8  102.  86.2 109. \n4 WA828      77.8  110.  93.3  99.3\n5 Alum       71.1  119.  93.4 109. \n6 Glee       80.8  106.  93.5  94.1\n\n\n\n\nPivot multiple variables\nPerhaps we want to pivot 2 variables.\n\nparma2018_wide_2vars &lt;- parma2018 %&gt;%\n  pivot_wider(id_cols = variety,\n              names_from = rep,\n              values_from = c(yield, grain_protein))\n\nhead(parma2018_wide_2vars)\n\n# A tibble: 6 × 9\n  variety   yield_1 yield_2 yield_3 yield_4 grain_protein_1 grain_protein_2\n  &lt;chr&gt;       &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;           &lt;dbl&gt;           &lt;dbl&gt;\n1 12SB0197     71.7    109.    81.7   104.             9.83            9.60\n2 Jefferson    65.3    104.    91.3    84.7           10.2            11.0 \n3 Dayn         70.8    102.    86.2   109.             9.89           11.7 \n4 WA828        77.8    110.    93.3    99.3           10.9            11.5 \n5 Alum         71.1    119.    93.4   109.             9.95           10.8 \n6 Glee         80.8    106.    93.5    94.1           10.2             9.14\n# ℹ 2 more variables: grain_protein_3 &lt;dbl&gt;, grain_protein_4 &lt;dbl&gt;\n\n\n\n\nPivot with multiple observations per identifier\nSometimes, there may be multiple observations per identifier and new column header. *tidyr will attempt to resolve this automatically, sometimes by inserting a list inside a data frame to capture the additional information. This is messy and hard to access. Sometimes this is an unintentional; you expected only one observation and learn through tidyr warning messages that there is an more observations than expected.\nHowever, you can also introduce a function in a pivot_wider such as mean or sum to summarise these replicate observations.\nHere is an example using “variety”, which is has replicate values.\n\nparma2018_wide_var &lt;- parma2018 %&gt;%\n  pivot_wider(id_cols = variety,\n              names_from = rep, \n              values_from = yield,\n              values_fn = mean)\n\nhead(parma2018_wide_var)\n\n# A tibble: 6 × 5\n  variety     `1`   `2`   `3`   `4`\n  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 12SB0197   71.7  109.  81.7 104. \n2 Jefferson  65.3  104.  91.3  84.7\n3 Dayn       70.8  102.  86.2 109. \n4 WA828      77.8  110.  93.3  99.3\n5 Alum       71.1  119.  93.4 109. \n6 Glee       80.8  106.  93.5  94.1\n\n\n\n\n\nWide to Long\nLet’s put all the traits in one column (and filter out the missing data).\nMain arguments in pivot_longer() (besides the data set):\ncols the columns to stack/pivot\nnames_to name of the new categorial variable that is composed of the names of the columns being pivoted\nvalues_to name of new value column (will be named “value” by default if not specified)\n\nparma2020_long &lt;- parma2018 %&gt;% \n  pivot_longer(cols = c(yield, grain_protein, test_weight),\n               names_to = \"trait\")\n\nhead(parma2020_long)\n\n# A tibble: 6 × 5\n  trial                         rep variety  trait          value\n  &lt;chr&gt;                       &lt;int&gt; &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt;\n1 SWIdahoCereals_H_S_PAR_2018     1 12SB0197 yield          71.7 \n2 SWIdahoCereals_H_S_PAR_2018     1 12SB0197 grain_protein   9.83\n3 SWIdahoCereals_H_S_PAR_2018     1 12SB0197 test_weight    62.1 \n4 SWIdahoCereals_H_S_PAR_2018     2 12SB0197 yield         109.  \n5 SWIdahoCereals_H_S_PAR_2018     2 12SB0197 grain_protein   9.60\n6 SWIdahoCereals_H_S_PAR_2018     2 12SB0197 test_weight    64.2 \n\n\n\n\n\n\n\n\nPractice Problem\n\n\n\n\n\n\nAs always, consider how these reshaping functions can support your own research and data analysis.\n\n\nImport “genotypic_data.txt” and remove columns 2 through 5 (‘CHROM’, ‘POS(cM)’, ‘Major_allele’, ‘Minor_allele’). What is left is genetic marker names and the marker scores for the individual lines (each column is an genetically distinct wheat line). Using pivot_longer(), reshape this object to long so there is one column for the marker name, one column for the wheat name, and the one column for the marker score. How many rows long is this object? Can you image trying to do this by hand??\nImport “weather_data.csv”. Filter to any single year and reshape the data from long to wide so that the levels in “station’ form the new column headers, ‘julian_day’ is the identifying column and the cells are filled with data from ‘tmax_F’.\nHere is a crazy extra exercise that utilizes transpose instead of pivoting. It’s not strictly related to reshaping. Only try this if you are in the mood for a challenge.\n\nThis problem is indicative of a data wrangling you can experience out in the wild. You are given a data set in one format, but a package requires your data be in another format.\nThe file “genotypic_data.txt” is a transposed version of “genotypic_data_rotated.csv”. Import “genotypic_data.txt” into R and use R commands to recreate “genotypic_data_rotated.csv”.\nThe column “individual” no longer has periods in the listed names, but the original file had periods in those names since they were column headers. Write code to remove those periods from the column “individual” in your transformed column (hint: look at the documentation for gsub()).\nSolution\n\n\n\n\n\n\n\n\n\nPutting it all together\n\n\n\nWhen to use these function depends on the desired output. If you want to do a multi-year analysis of field trial data, stacking the years in the long format makes sense. If you want to compute correlations across two variables, the wide format makes sense for those variables.\nAs part of the tidyverse, anything pivoting can be preceded by or can be followed by any other data wrangling step such as filtering, data aggregation and so on.\nYou can use any of the tidy select methods for indicating which values to pivot. This is particularly useful when there is a very large number of columns to pivot that share similarities in their name."
  },
  {
    "objectID": "posit-instructions.html",
    "href": "posit-instructions.html",
    "title": "Instructions for Accessing the Posit Classroom Project",
    "section": "",
    "text": "Follow the link provided in the mail to join the classroom.\nOnce you have created a login for Posit Cloud, you can join the classroom. Once you follow the link and log in to Posit, you should see something similar to this screen:\n\n\n\n\n\n\n\n\n\nClick “Yes”.\nOnce you join, navigate to the classroom on the left sidebar:\n\n\n\n\n\n\n\n\n\nWhen you open “R Classroom”, you should see this:\n\n\n\n\n\n\n\n\n\nClick on “Intro to R Class”, and the project will load. This may take a few minutes.\n\n\n\n\n\n\n\n\n\nOnce it is finished loading, this is what you should see:\n\n\n\n\n\n\n\n\n\nThis has created a temporary copy of the project (hence the blinking red label that says “TEMPORARY COPY”). Click on “Save a Permanent Copy” to copy the project. This also may take a few minutes to complete. When you’re done, if you return to the R Classroom, you should see something similar to this. It will list your name instead of “Julia Test” and there may be other students with the same project copied.\n\n\n\n\n\n\n\n\n\nOnly the instructors and you can access your project. Course instructors will not access student Posit classroom projects unless a student requests we look at it to help troubleshoot an R coding issue.\nThis project is where you access and download all course data files and live R scripts. You can access this project at anytime, including when the class is not meeting. When the course is done, the classroom will be deleted, so be certain to download your project in case you want to revisit it. We will send a reminder email to do this if you forget."
  },
  {
    "objectID": "practice/practice-B.html",
    "href": "practice/practice-B.html",
    "title": "Practice B",
    "section": "",
    "text": "(for introduction to R types and objects lesson)\n\nYou have this collection of items:\n\n\nx &lt;- c(-2:3, TRUE, FALSE, 1L, 0L, \"zero\"). \n\nWhat data type is this?\n\nConvert this object to these types:\n\n\nlogical\nnumeric\ncharacter Inspect the results. What happened?\n\nSolution"
  },
  {
    "objectID": "practice/practice-D.html",
    "href": "practice/practice-D.html",
    "title": "Practice D",
    "section": "",
    "text": "(for the data import lesson)\n\nImport one of your data sets using two of the functions taught:\n\n(save your data in different format to enable this)\n\nread.csv()\nread_csv()\nread_excel()\nread.delim()\n\n\nExamine the data imported using View(imported_data). Did everything import as expected? Are your variables coded as they should be? Are numeric variables numeric? Are missing data detected as thus?"
  },
  {
    "objectID": "practice/practice-E.html",
    "href": "practice/practice-E.html",
    "title": "Practice E",
    "section": "",
    "text": "(for data export lesson)\n\nRepeat the import practice problems. Export those files under a new file name. Make sure you use a new file name or a different output directory so you do not write over the original files.\nExamine the output files to make sure they look as expected? Where any row names accidentally introduced? Were missing cells converted to “NA”? Did any data become unexpectedly quoted?"
  },
  {
    "objectID": "practice/practice-G.html",
    "href": "practice/practice-G.html",
    "title": "Practice G",
    "section": "",
    "text": "(for the data aggregation lesson)\n\nAs usual, consider how these data aggregation functions can support your own work.\n\nFor some of these exercises, you may need to use other dplyr functions.\n\nImport “weather_data.csv”. Group the data by station and year and count the number of missing data points for ‘tmax’, ‘tmin’ and ‘tavg’.\nImport “weather_data.csv”, group the data by ‘station’ and ‘julian_day’ and calculate the average minimum and maximum temperatures for the groups from ‘tmin’ and ‘tmax’. If you already imported the data set from the previous problem, you don’t need to import it again if you did not change the data set.\nImport “weather_data.csv”, calculate the difference between the ‘tmin’ and ‘tmax’ for each day. Group the data by year and return the smallest and largest differences for each year. Consider how to handle missing data. If you already imported the data set from the previous problem, you don’t need to import it again if you did not change the data set.\n\nSolution"
  },
  {
    "objectID": "practice/practice-I.html",
    "href": "practice/practice-I.html",
    "title": "Practice I",
    "section": "",
    "text": "(for the data merging lesson)\n\nDownload genotypic_data_rotated.csv (see script below), Import that file, along with, “trial_data.csv”, and “trial_metadata.csv”.\n\n\ndownload.file(url = \"https://github.com/IdahoAgStats/r-for-ag-scientists/raw/main/data/genotypic_data_rotated.csv\",\n              destfile = here::here(\"data\", \"genotypic_data_rotated.csv\"))\n\n\nDo an inner join between “genotypic_data_rotated.csv” and “trial_data.csv” using variety names.\nDo a semi-join of “genotypic_data_rotated.csv” with “trial_data.csv” and do the reverse. How does this compare with the inner join from the previous problem?\nDo an anti-join between “genotypic_data_rotated.csv” and “trial_data.csv”.\nJoin together all common observations between the 3 files (your choice on join).\n\nSolution"
  },
  {
    "objectID": "practice/solution-B.html",
    "href": "practice/solution-B.html",
    "title": "Solutions to Practice B",
    "section": "",
    "text": "The variable x is a character variable:\n\n\nx &lt;- c(-2:3, TRUE, FALSE, 1L, 0L, \"zero\")\nclass(x)\n\n[1] \"character\"\n\n\n\nWhen converted:\n\n\nas.logical(x)\n\n [1]    NA    NA    NA    NA    NA    NA  TRUE FALSE    NA    NA    NA\n\nas.character(x)\n\n [1] \"-2\"    \"-1\"    \"0\"     \"1\"     \"2\"     \"3\"     \"TRUE\"  \"FALSE\" \"1\"    \n[10] \"0\"     \"zero\" \n\nas.numeric(x)\n\nWarning: NAs introduced by coercion\n\n\n [1] -2 -1  0  1  2  3 NA NA  1  0 NA\n\n\nItems which did not the expected object type could not be converted (or “coerced”), so they were set to NA."
  },
  {
    "objectID": "practice/solution-F.html",
    "href": "practice/solution-F.html",
    "title": "Solutions to Practice F",
    "section": "",
    "text": "First load the libraries.\n\nThen, import the data and create the new variable.\n\nmydata &lt;- read_csv(here::here(\"data\", \"trial_metadata.csv\"),\n                   show_col_types = FALSE) %&gt;%\n    unite(\"new_var\", location, irrigation, sep = \"_\", remove = FALSE )\n\nAnother option:\n\nmydata$new_var &lt;- paste(mydata$location, mydata$irrigation, sep = \"_\")\n\nAnother option:\n\nmydata &lt;- mydata %&gt;% mutate(new_var = \n                              paste(location, irrigation, sep = \"_\"))\n\n\nFilter and sort:\n\n\nmydata_filtered &lt;- mydata %&gt;% filter(location == \"Parma\") %&gt;%\n  arrange(planting_date)\n\n\nSelect and rename\n\n\nmydata_selected &lt;- mydata %&gt;% select(trial, grower_cooperator, \n                                     location, year) %&gt;%\n    rename(farm = \"grower_cooperator\")\n\nOr in one step:\n\nmydata_selected &lt;- mydata %&gt;% select(trial, farm = \"grower_cooperator\",\n                                     location, year)\n\n\nReduce the identifying information in the weather data set to non-repetitive information. A data set will often several columns that reflect repetitive identifying information. It’s helpful to know how many unique observations are present:\n\n\nweather &lt;- read.csv(here::here(\"data\", \"weather_data.csv\"))\n\nweather %&gt;% select(1:5) %&gt;% distinct()\n\n      station                           name latitude longitude elevation\n1 USC00453546             HATTON 9 SE, WA US 46.72250 -118.6524     458.7\n2 USC00456215           OTHELLO 6 ESE, WA US 46.78861 -119.0461     362.7\n3 USC00457059         RITZVILLE 1 SSE, WA US 47.11750 -118.3715     568.1\n4 USR0000WCNW COLUMBIA NWR WASHINGTON, WA US 46.88140 -119.3242     260.6\n\n\n\nPrep work:\n\n\ntrial_data &lt;- read.csv(here::here(\"data\", \"trial_data.csv\")) \n\ntrial_data$trial &lt;- gsub(pattern = \"_H_\", \n                         replacement = \"_H-\", \n                         x = trial_data$trial)\n\nIt is helpful to know the levels we splitting so we can give the new columns informative names:\n\ndistinct(trial_data, trial)\n\n                         trial\n1  SWIdahoCereals_H-S_PAR_2018\n2  SWIdahoCereals_H-S_WEI_2018\n3  SWIdahoCereals_H-W_PAR_2017\n4  SWIdahoCereals_H-W_PAR_2018\n5  SWIdahoCereals_H-W_WEI_2018\n6  SWIdahoCereals_HRS_PAR_2016\n7  SWIdahoCereals_HRS_PAR_2017\n8  SWIdahoCereals_HRS_PAR_2019\n9  SWIdahoCereals_HRS_PAR_2020\n10 SWIdahoCereals_HRW_PAR_2019\n11 SWIdahoCereals_HRW_PAR_2020\n12 SWIdahoCereals_HWS_PAR_2016\n13 SWIdahoCereals_HWS_PAR_2017\n14 SWIdahoCereals_HWS_PAR_2019\n15 SWIdahoCereals_HWS_PAR_2020\n16 SWIdahoCereals_HWW_PAR_2019\n17 SWIdahoCereals_HWW_PAR_2020\n18 SWIdahoCereals_SWS_PAR_2016\n19 SWIdahoCereals_SWS_PAR_2017\n20 SWIdahoCereals_SWS_PAR_2018\n21 SWIdahoCereals_SWS_PAR_2019\n22 SWIdahoCereals_SWS_PAR_2020\n23 SWIdahoCereals_SWS_WEI_2018\n24 SWIdahoCereals_SWW_PAR_2017\n25 SWIdahoCereals_SWW_PAR_2018\n26 SWIdahoCereals_SWW_PAR_2019\n27 SWIdahoCereals_SWW_PAR_2020\n28 SWIdahoCereals_SWW_WEI_2018\n\n\nI will call the first column “program”, the second “crop” (those are wheat market classes), the third will be called “location” (PAR is an abbreviation for Parma), and the fourth column is year. This separate() command is being done on a character variable and will return all character variables, even though “year” could be coerced to be numeric.\n\ntrial_data_sep &lt;- trial_data %&gt;% \n  separate(trial, into = c(\"program\", \"crop\", \"location\", \"year\"), \n           sep = \"_\",  # specifying the separator between terms, an underscore\n           remove = FALSE) # tells R to keep the original variable \"trial\" in the data set\n\nSince I’m not sure of what are the two most recent years, lets check:\n\ntrial_data_sep %&gt;% distinct(year) %&gt;% arrange(desc(year))\n\n  year\n1 2020\n2 2019\n3 2018\n4 2017\n5 2016\n\n\nThe most recent two years are 2019 and 2020 and they are character variables. We can convert them to numeric with as.numeric(), but why bother in this instance?\n\ntrial_data_sep_filter &lt;- trial_data_sep %&gt;% \n  filter(year %in% c(\"2019\", \"2020\")) %&gt;% \n  filter(variety %in% c(\"WA8268\", \"WB4418\", \"WB4311\", \"WB4623CLP\", \"WB4792\", \"WB7589\"))\n\n\nWrite out a result (any result) to file:\n\n\nwrite.csv(trial_data_sep_filter, \n          here::here(\"outputs\", \"problem_F_output.csv\"),\n          row.names = FALSE)"
  },
  {
    "objectID": "practice/solution-H.html",
    "href": "practice/solution-H.html",
    "title": "Solutions to Practice H",
    "section": "",
    "text": "Import data, remove unneeded columns, and pivot all columns but the first to long.\n\n\ngeno &lt;- read.delim(here::here(\"data\", \"genotypic_data.txt\")) %&gt;% dplyr::select(-(2:5))\ngeno_long &lt;- geno %&gt;% pivot_longer(cols = !1, \n                                   names_to = \"individual\",\n                                   values_to = \"marker_score\")\n\n\nnrow(geno_long)\n\n[1] 1717170\n\nhead(geno_long)\n\n# A tibble: 6 × 3\n  Markers                individual marker_score\n  &lt;chr&gt;                  &lt;chr&gt;             &lt;int&gt;\n1 recBobWhite_c10015_641 H0800080              0\n2 recBobWhite_c10015_641 H0800103L             0\n3 recBobWhite_c10015_641 H0800310              2\n4 recBobWhite_c10015_641 H0800314              2\n5 recBobWhite_c10015_641 H0900009              2\n6 recBobWhite_c10015_641 H0900081              0\n\n\n\nImport weather data and filter to 2000.\n\n\nweather &lt;- read.csv(here::here(\"data\", \"weather_data.csv\")) %&gt;% filter(year == 2000)\nweather_wide &lt;- weather %&gt;% select(station, julian_day, tmax_F) %&gt;% \n  pivot_wider(id_cols = julian_day, \n              names_from = station, \n              values_from = tmax_F)\n\ndim(weather_wide)\n\n[1] 366   4\n\nhead(weather_wide)\n\n# A tibble: 6 × 4\n  julian_day USC00453546 USC00457059 USR0000WCNW\n       &lt;int&gt;       &lt;dbl&gt;       &lt;dbl&gt;       &lt;dbl&gt;\n1          1        39.0        32          35.1\n2          2        39.0        36.0        35.1\n3          3        35.1        33.1        34.0\n4          4        48.9        36.0        48.9\n5          5        43.0        43.0        48.0\n6          6        36.0        39.9        33.1\n\n\n\nExtra problem: transform “genotypic_data.txt” into “genotypic_data_rotated.csv”.\n\n\ngeno &lt;- read.delim(here::here(\"data\", \"genotypic_data.txt\"))\ngeno2 &lt;- dplyr::select(geno, -(1:5))\ngeno3 &lt;- as.data.frame(t(geno2)) %&gt;% mutate(individual = colnames(geno2)) %&gt;% relocate(individual)\n### Next line is updated!!! 2023/02/06\ncolnames(geno3)[2:ncol(geno3)] &lt;- geno$Markers\n### end updates\ngeno3$individual &lt;- gsub(\"[.]\", \" \", geno3$individual) \n\n# check that things look okay: \ngeno3[sample(1:nrow(geno3), 5), sample(1:ncol(geno3), 5)]\n\ngsub() is relatively straightforward to use, but . without any modifiers is actually for wildcard matching (it matches everything!!) Regular expressions are crazy! So use [.] instead to specify that you in fact are referring to a period and not simply any character (including whitespace).\n\nreadr::write_csv(geno3, here::here(\"data\", \"genotypic_data_rotated.csv\"))"
  },
  {
    "objectID": "r-installation-instructions.html",
    "href": "r-installation-instructions.html",
    "title": "Install R & RStudio",
    "section": "",
    "text": "You may already have R installed on your computer. However, if the installation is one year older or later, you should upgrade it. This the beauty and drawback of R (yay for new functionality, boo to the inconvenience). R is updated frequently, usually several times per year. Not every update is important, but over time, older versions of R will cause you problems because they will work poorly with installed packages. New packages will not work at all with older version of R and older packages will have problems, requiring to also install older package versions. This is a pain to manage; its easiest to keep R updated.",
    "crumbs": [
      "Course Info",
      "how to install R"
    ]
  },
  {
    "objectID": "r-installation-instructions.html#install-r",
    "href": "r-installation-instructions.html#install-r",
    "title": "Install R & RStudio",
    "section": "Install R",
    "text": "Install R\nFirst, navigate to the Cloud mirror of the R Project for Statistical computing, and download R:\n\n\n\n\n\n\n\n\n\n\nWindows\nUse the link circled in red regardless if you have R installed or not. It’s just easier.\n\n\n\n\n\n\n\n\n\n\n\nMac\nDownload the installation bundle. Check that your operating system version is compatible (the text to the right of the download link will indicate this).\n\n\n\n\n\n\n\n\n\nOnce the installation file is downloaded, open it and follow the installation instructions, accepting the default installation settings.",
    "crumbs": [
      "Course Info",
      "how to install R"
    ]
  },
  {
    "objectID": "r-installation-instructions.html#install-rstudio",
    "href": "r-installation-instructions.html#install-rstudio",
    "title": "Install R & RStudio",
    "section": "Install RStudio",
    "text": "Install RStudio\nYou can download RStudio from the Posit website. Pick the version appropriate for your operation system and follow the installation instructions.\nYou do not need to follow “Step 1: install R” indicated on the Posit site if you already installed R following the directions above.",
    "crumbs": [
      "Course Info",
      "how to install R"
    ]
  },
  {
    "objectID": "r-installation-instructions.html#test-your-installation",
    "href": "r-installation-instructions.html#test-your-installation",
    "title": "Install R & RStudio",
    "section": "Test your Installation",
    "text": "Test your Installation\n\nOpen RStudio on your personal or work computer. It should look very similar to Posit Cloud.\nRun a command in the console to make sure all installed properly.\nInstall the Tidyverse packages: install.packages(\"tidyverse\") (this will take a few minutes)",
    "crumbs": [
      "Course Info",
      "how to install R"
    ]
  }
]