---
title: "Lesson 3: Vectorizing Operations"
---

### Vectorizing operations

Using R as a calculator between a few numbers is handy, but typically we are hoping to do so much more with it, such as performing a calculations across a long list of numbers. 

R is naturally vectorized, which means that you can easily perform a mathematical operation across a vector of numbers (no need to write loops!) 

Say we have a collection of numbers from 10 to 20 and we want to multiple them all by 12. We can create a sequence of numbers by wrapping them all in `c()` command (for "concatenate") and separating each with a comma. 

```{r}
c(10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)
```
Then those numbers can be operated on by any math operator:

```{r}
c(10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20) * 10 - 1
```

There's also a quicker way to specify a sequence of integers using the notation `start:end`:

```{r}
1:10
```

It also counts down: 
```{r}
20:10
```

And works with negative integers:
```{r}
-5:5
```

These can be operated on: 

```{r}
(-5:5)^2
```

### Object assignment

It is rather cumbersome to continually retype numbers, even while using a shortcut. There's a general rule of "DRY" when coding, which means "Don't repeat yourself". We can avoid this by assigning these numbers to an R object. 

Traditionally, the left arrow is used for object assignment, `<-` (less than symbol + a dash), but the standard equals sign, `=` also works. These are equivalent: 

```{r}
x <- 1
x = 1
```

We can assign multiple numbers to an object
```{r}
x_vector <- 1:10
y_vector <- c(2, 4, 6, 8, 10)
```


The left arrow assignment `<-` takes everything on the right side of the arrow and assigns it the object name on the left. 

**What's going with object names?** 

It is your choice (mostly) about what to name R objects. There are a few rules to follow:


* spaces are generally not allowed and a huge pain (avoid) 
* Don't start with a number or symbol! (this is technically possible, but a huge pain)
* choose a name that is short, yet descriptive
* R is case sensitive, so `test` is different from `Test` and `TEST`. Be mindful of this! It trips many folks up.  
* It's possible that you will thank yourself for using lowercase and avoiding special symbols (aside from `.` and `_`)
* if you start a function name with a "." (e.g. `.variable`), you won't see it listed in the global environment (which can be frustrating)
* you cannot use "reserved words" from the R language (terms set aside for very specific purposes in R). When typing these in an R console, they usually light up in a special colors.

```{r}
.z <- 1:10
```


[More](https://intro2r.com/objects-in-r.html) on object naming. 

|-------------|----------------|
|reserved word | meaning       |
| `TRUE` `FALSE`  | logical     |
| `NA`            | missing value |
| `NaN`          | not a number/undefined  |
| `NULL`         | no value/undefined   |
| `Inf`, `-Inf`       | infinity    |
| `for` `in`    | for loops   |
| `if` `else` `while` `break` `next` `repeat` | control flow  |
| `NA_integer_` `NA_real_`	`NA_complex_` `NA_character_` | missing data by class

It's easy to forgot these. Run `?reserved` in R session to remind yourself if need be. 

Some examples of reserved words in the wild: 

```{r}
log(0)
0/0
2/0
```


## Putting it all together

Check the environment pane. These are the object you created during the session. This is where you will see all objects created, unless you have choosen to render the objects invisible by starting their object names with a `.`. 

## Learning Recap

At the end of this lesson, you should: 

* understand how to assign variables and collections of numbers to an object name
* known the rules for how to name objects
* understand reserved words in R and how to find them
* be able to create a sequence of numbers in R using any starting value and any ending value
