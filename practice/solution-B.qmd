---
title: "Solutions to Practice B"
---

(@) The variable `x` is a character variable: 

```{r}
x <- c(-2:3, TRUE, FALSE, 1L, 0L, "zero")
class(x)
```

(@) When converted:
```{r}
as.logical(x)
as.character(x)
as.numeric(x)
```
Items which did not the expected object type could not be converted (or "coerced"), so they were set to `NA`. 

(@) The way to do this shown in class:
```{r}
v1 = c("a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z")
v1
```

This is rather cumbersome. An easier way is to use the preset vectors `letters` and `LETTERS` which are the english alphabet in lowercase and uppercase, respectively. The index position 1 of each corresponds to the first letter of the alphabet, "a" or "A". 

```{r}
v1 <- c(letters[1:13], LETTERS[14:26])
v1
```

::: {.callout-note}
## FYI

If something seems tedious and slow in R, there is probably a shortcut.
:::


(@) The vector:

```{r}
v2 <- c(1:10, 2:50)
```

(@) A possible data frame: 

```{r}
d1 <- data.frame(var1 = c(TRUE, TRUE, TRUE, FALSE, FALSE, FALSE),
                 var2 = 1:6,
                 var3 = "orange",
                 var4 = as.factor(c("red", "blue", "blue", "purple", "green", "green")))

str(d1)
```
The function `str()` is for checking the structure of an object. For a data frame, it will iterate over every column and give us the data type and some sample values. 


(@) The list:

```{r}
l1 <- list(v1, v2, d1)
l1[[1]][4] <- NA
```

You can index a vector inside of a list by indexing the list first, then the vector. 

(@) Remove list item: 
```{r}
l1[[2]] <- NULL
```
When an item is set to `NULL` in a list, it disappears. 
