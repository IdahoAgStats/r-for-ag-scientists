---
title: "Lesson 12: Combining Data Sets"
---

::: {.callout-caution collapse="false"}
## Learning Goals

At the end of this lesson, you should: 

* understand the concept of a "key" for merging
* be able to merge two data sets together
* know the difference beween left join, right join, full join, semi-join and anti-join
:::

```{r}
library(dplyr)
genotype <-  read.table(here::here("data", "genotypic_data_rotated.txt"), sep=" ", header = TRUE)
variety_trial <- read.csv(here::here("data", "trial_data.csv"))
```


## Bind rows

Data sets are assumed to have a single observation in each row, and each column is a variable describing each observation in some way. 

If you have two data sets of different observations and the same columns, you can do a row bind to stack the data sets:

```{r, eval=FALSE}
new1 <- bind_rows(x, y)
```

The column names are match and ordered according to the first data frame listed. The default behavior is to return all unique columns from both data sets and fill in with missing data as needed. 

## Joins

Merging two data sets when it goes beyond a row bind can take an effort. 

All joins follow this syntax: 

```{r, eval=FALSE}
xxx_join(left_dataset, right_dataset)
```

"left" and "right" correspond to the left and right ....

```{r, echo=FALSE}
knitr::include_graphics(here::here("images", "dplyr_joins.png"))
```


### Left join

Return a merged data set with all the observations

```{r}

```


### Right join

```{r}

```


### Full join

```{r}

```


All observations are returned, regardless if matched. 

### inner join

```{r}

```

Only observations found in both data sets are kept. 

## Final Notes

This is the end of lessons on data wrangling. There is additional functionality that we have not touched on that you may find useful to know. 

| function name | what it does |
|---------------|--------------|
| `tidyr::drop_na()`     | remove rows with missing data |
| `dplyr::pull()`        | extracts a single column and converts it to a vector | 
| `dplyr::distinct()`   | return rows with distinct observations (removes duplicates) |
| `dplyr::na_if()`      | converts a specificed value to NA |
| dplyr::relocate()     | move columns to another position |
| `tidyr::fill()`       | fill is missing data based on surrounding data |

Complete list of [dplyr functions](https://dplyr.tidyverse.org/reference/index.html) and [tidyr functions](https://tidyr.tidyverse.org/reference/index.html).

[R 4 Data Science](https://r4ds.had.co.nz/) by Hadley Wickam and Garret Grolemund provides comprehensive guide to data wrangling. 

::: {.callout-tip}
## Putting it all together

{bring in comments on NA data from lesson 16}

:::

