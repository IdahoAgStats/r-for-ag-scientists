---
title: "Lesson 11: Reshaping Data Sets"
---


::: {.callout-caution collapse="false"}
## Learning Goals

At the end of this lesson, you should: 

* be able to convert long data set to wide and the reverse
:::

### What is pivoting? 

There are circumstances when a wide data set are needed and circumstances when a long data set are needed, for analysis, plotting, data wrangling, etc.

Doing this manually in a spreadsheet program is extremely cumbersome and very susceptible to errors! You are much better off doing this in R (or another programming language). 

These wide-to-long and long-to-wide conversions are also called 'pivoting'. 

```{r, echo=FALSE}
knitr::include_graphics(here::here("images", "wide_v_long.png"))
```
When pivoting from long to wide format, we should consider what will be used as the identifying information, what information will be used for column headers and what information will be used to fill the cells/populate the table. 

When pivoting from wide to long, the considerations are similar: what will be the name of the new column header and what information (i.e. what columns) will be used to populate the data in the vertical direction, while which columns will be used for record identification. 

Pivoting from wide to long can be done with the [***tidyr***](https://tidyr.tidyverse.org/) functions `pivot_wide()` and the reverse function if `pivot_longer()`. 


Let's run some examples with trial data set. 

Load the trial data and libraries:
```{r}
library(readr); library(dplyr); library(tidyr)

variety_trials <- read.csv(here::here("data", "trial_data.csv")) 

#weather <- read_csv(here::here("data", "weather_data.csv"))
```
### Pivot long to wide

The first thing we should do is look at the documentation for `pivot_wider`.
```{r, eval=FALSE}
?pivot_wider
```

The main arguments to consider (not including the input data) is:

**id_cols** what are the identifying columns that we will keep in the data set to identify and separate records. This can be multiple columns. 

**names_from** is the variable that will be used to make the new column header. This is the column that we are seeking to change from long to wide. This should be a categorical variable or one that can be coerced to one. Usually it contains repeating values. 

**values_from** is the variable that will be used to fill the cells under the column header. 


*There is long list of other arguments, but these are the most important.*


#### Pivot single variable

The loaded data set includes many different field trials. Let's look at the information for one trial and pivot the data across replicates for a single variable, using entry as an ID variable. 

First, find out the different levels for "trial":

```{r}
unique(variety_trials$trial)
```

This example will use the last trial listed (SWIdahoCereals_SWW_PAR_2020), but any of these options will work. Let's filter the data and check that there is one observation per rep and entry. 

```{r}
parma2020 <- variety_trials %>% filter(trial == "SWIdahoCereals_SWW_PAR_2020") 
table(parma2020$entry, parma2020$rep)
```
The table produces all "1" indicating 1 observation per variable combination, which is what we want. 


```{r}
parma2020_wide <- parma2020 %>% 
  pivot_wider(id_cols = entry,
              names_from = rep,
              values_from = yield)

head(parma2020_wide)
```

If you try to index that column with `parma2020_wide$1`, an error is thrown:
```{r, error=TRUE}
parma2020_wide$1
```

We can give it better column names (not starting with a number) using the `names_prefix` argument.

```{r}
parma2020_wide <- parma2020 %>% 
  pivot_wider(id_cols = entry,
              names_from = rep,
              values_from = yield,
              names_prefix = "rep_")

head(parma2020_wide)
```
#### Pivot multiple variables

#### Pivot with multiple observations per identifier

### Wide to Long

Another option is to combine all traits into a single column along side identifying variables. 



::: {.callout-tip}
## Putting it all together


:::

