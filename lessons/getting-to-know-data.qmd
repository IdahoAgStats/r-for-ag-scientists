---
title: "Getting to Know Your Data in R"
editor: 
  markdown: 
    wrap: 72
---

::: {.callout-caution collapse="false"}
## Learning Goals

At the end of this lesson, you should:

-   How to import data in R
-   know several methods of data exploration in R
-   understand how to make cross tabulations of data
-   know how to make histograms and pairwise plots in R
:::

### Import a csv data set

This code `read_csv()` reads a CSV file named "trial_data.csv" and
assigns it to an object named "data1".

The second line of code uses the "head" function to display the first 5
rows of the "data1" data frame. The `View()` will open the data set in
new RStuido video where you can look up at the rows and columns.

```{r, eval=FALSE}
data1 <- read.csv("trial_data.csv")

head(data1, 5)
View(data1)
```

```{r, echo=FALSE}
data1 <- read.csv(here::here("data/trial_data.csv"))
head(data1, 5)
#View(data1)
```

### Explore data

Base R also has some useful functions for quickly exploring data frames:

-   `str()`: Show the structure of an R object, including a dataframe
-   summary: Give summaries of each column of a data frame

```{r}
str(data1)

summary(data1)
```

### Exploring Data in R

To access the data in any of the variables (columns) in our data frame
we can use a \$ notation. For example, to access the 'variety' variable
in our data1 data frame we can use the code below. This tells R that the
variety variable is contained within the data frame data1.

```{r eval=FALSE}
data1$variety

```

### Make Some Simple Plots

Here we are creating a histogram to look at data distribution of the
'yield' variable from data1 data frame using a `hist()` function.

The `boxplot()` function in R is used to create a boxplot for the
selected variables. In the code chunk below, a boxplot of yield for each
replication is createdfrom data1, the xlab and ylab shows the title of
x-axis and y-axis, respectively. The main=, gives the title to the
graph.

```{r}
hist(data1$yield)

# pairwise plots

# Create the box plot
boxplot(yield ~ rep, data = data1,
        main = "Yield Graph",
        xlab = "Rep",
        ylab = "Yield")
```

### Calculate Some Values

```{r}


```

## Introduction to Common Data Structures

Previously, we looked at how to a import a dataset in R. Now we need to
consider how those types are arranged into complex structures (that is,
objects) we can access and manipulate.

There are several data structures commonly used in R:

1.  vector
2.  data.frame
3.  matrix
4.  list

Vectors and data frames are two major object types in R, but there are
other types that provide different functionality. You can learn more
about them [here](../lessons/data-structures.qmd).

-   **THE VECTOR**

A *vector* in R is an object that contain multiple elements of the same
type. In the examples below, we create a vector v1 with numerical values
in a sequence using the `:` operator. Vector v2 and v3, is combined
factor and numerical values by using the `c()` function and separated by
a comma.

```{r}
v1 <- 1:10
v2 <- c("apples", "pears", "oranges")
v3 <- c(1, 5, 85, 7)
```

1.  Vector Length

To find out how many items a vector has, use the `length()` function:

```{r}
length(v1); length(v2); length(v3)
```
2.  Sort a Vector 
To sort items in a vector alphabetically or numerically, use the `sort()` function:
```{r}
sort(v2)  # sort a string
sort(v3)  # Sort numbers
```


3.  Access Vectors
You can access the vector items by referring to its index number inside brackets []. The first item has index 1, the second item has index 2, and so on:
Multiple item can also be indexed: `x[c(1,5)]`. If an index position, it repeated, that item will be returned as often as it is called:
```{r}
v1[1]
v1[5]
v1[c(1,5)]
v1[c(1,1)]
```
You can also use negative index numbers to access all items except the ones specified:
```{r}
v1[-1]
```

4. Change an Item
To change the value of a specific item, refer to the index number:
```{r}
v2 <- c("apples", "pears", "oranges")

# Change "pears" to "banana"
v2[2] <- "banana"

# Print fruits
v2
```
### Object types

The most common object types used includes numeric, logical,and character.

- Numeric
Previously, we created an object in R that was a collection or sequence of numbers. These numbers are technically integers

```{r}
x1 <- 1:10
```

- Character

These can also be created for character variables:

```{r}
x2 <- "apple"
x3 <- c("orange", "banana")
```

- Logical

consists of TRUE and FALSE values:

```{r}
x4 <- c(TRUE, FALSE, FALSE, TRUE)
```

Check the type for each R object
```{r}
 class(x1)
 class(x2)
 class(x3)
 class(x4)
```


Objects can be coerced into different types, for example:
```{r}
x8 <- c(8, 9.2)
x9 <- c(0, 0, 0, 0)
x10 <- c(TRUE, FALSE, 1, 0)
x11 <- c(1, 2, "pear", -6:2, TRUE)

class(x8); class(x9); class(x10); class(x11)
```

::: {.callout-warning collapse="true"}
## Answers

```{r}
class(x8)
class(x9)
class(x10)
class(x11)
```
:::

Here, x8, x9, x10 are numeric and x11 is character. These can coerced using the functions below:
```{r, eval=FALSE}
as.character(x8)
as.logical(x10)
as.numeric(x11)
```

::: callout-note
For more information how data types are assigned in R and methods of coercing into differebt types can be assessed [here](../lessons/data-types.qmd). 
:::


### The data frame

A collection of vectors all of the name length. Each vector is a single data type, but different columns can be different data types. This is similar to a typical workbook you might open in Excel or another spreadsheet program. These can be only one column wide, but they often consist of more than that.

```{r}
d1 <- data.frame(var1 = 1:5,
                 var2 = c("a", "b", "a", "b", "c"),
                 var3 = c("alpha", "beta", "gamma", "zeta", "psi"))
d1
```

Notes that is a single value is supplied for a column, it will be repeated for the entire column.

A data frame has attributes for:

-   `nrow` number of rows
-   `ncol` number of columns
-   `colnames` column names
-   `rownames` row names (if none are provided, R will generate integer row names starting at 1)

::: callout-note
While duplicate column names in a data frame are allowed, they are not advised, and may throw an error during data import, depending on the import function used.
:::

Check the number of rows and columns:

```{r}
nrow(d1)
ncol(d1); length(d1)
dim(d1) # tells us row and column lengths in one command
```

Look at the `rownames` and `colnames` atrributes:

```{r}
rownames(d1)
colnames(d1)
```

::: callout-note
The `rownames` attribute can be set, but if it is not, it is automatically created within R from 1 to the total number of rows. Row names are a tricky attribute than many packages in R do not support. A function may toss out your row names without any warning!

In general, I do not recommend setting the row names attribute in data frames to anything other than the default values unless a package function specifically requires it.
:::

What does `length(d1)` return? How about `names(d1)`?

We can look at the overall structure of a data.frame with `View()`:

```{r, eval=FALSE}
View(d1)
```

If a particularly large file is loaded into R, using `View()` may be very slow (if you have a large number of rows) and provide an incomplete view (if you have a large number of columns). In that case, you can use `str()` to look at a data frame's structure:

```{r}
str(d1)
```

***The data frame is the most common data structure scientists use in R***

#### Accessing items

Like vectors, data frames can be indexed by position, except now we have two dimensions to consider. You can extract individual elements in a data frame by references the row and column position, `my_dataframe[row, column]`.

-   Extract the items located in the first 2 row2 and last 2 columns:

**Visual of what we want:**

```{r, echo=FALSE,out.height="50%",out.width="50%"}
knitr::include_graphics("../images/index_ex1.png")
```

*(This graphic is an overlay of green over blue, creating a dark teal color. The green represents rows indexed, the blue is columns indexed and the teal is the intersection between those two. If a color is not visible, that is because it is under the teal overlay.)*

```{r}
d1[1:2, 2:3]
```

-   Extract the first two rows and all of the columns:

```{r, echo=FALSE,out.height="50%",out.width="50%"}
knitr::include_graphics("../images/index_ex2.png")
```

```{r}
d1[1:2, ]
```

*When the column position is left empty, all columns are returned*

-   Extract the entire first column and all rows:

```{r, echo=FALSE,out.height="50%",out.width="50%"}
knitr::include_graphics("../images/index_ex3.png")
```

```{r}
d1[ ,1]
```

*When the row position is left empty, all rows are returned*

-   Extract the values located in the first 2 rows and first two columns:

```{r, echo=FALSE,out.height="50%",out.width="50%"}
knitr::include_graphics("../images/index_ex4.png")
```

```{r}
d1[1:2, 1:2]
```

-   Return everything except the third columns

```{r, echo=FALSE,out.height="50%",out.width="50%"}
knitr::include_graphics("../images/index_ex5.png")
```

```{r}
d1[ ,-3]
```

-   Return everything except the first 2 rows:

```{r, echo=FALSE,out.height="50%",out.width="50%"}
knitr::include_graphics("../images/index_ex6.png")
```

```{r}
d1[-(1:2),  ]
```

::: callout-note
## Things to note

Indexing accepts numeric/integer vectors, so you can use a sequence (`3:10`), or concatenated positions (`c(1, 2, 5, 10)`), or a combination of both (`c(1:10, 13)`).

When indexing positions in a vector or data frame (or anything else), the amount of white space does not affect the outcome. These are equivalent: `d[1,2]`, `d[1, 2]`, `d[ 1, 2]`
:::

#### Column Referencing

Data in R data frames can also be referred to by their column names using the notation `dataframe$column_name`:

```{r}
d1$var1
```

The data are returned as a vector (with the typical attributes of a vector: length and names).

This can also be used to create a new column in the data frame:

```{r}
d1$var4 <- 0:-4
```

In this example, a new column called "var4" was created, consisting of sequence numbers from zero to -4.

```{r, echo=FALSE}
d1
```

#### Value replacement

There are likely to be moments when you want to replace values in a data frame or vector with something else. You can do that with indexing and variable assignment.

Let's image that we want to assign the third value in the second column as `NA`. First, we index the that position, then we assign a value to it (`NA` in this case):

```{r}
d1[3, 2] <- NA
```



2.  mention vectorization (give examples)

3.  bring up these two data structures: data frame and the vector

4.  discuss data types: numeric, character, factor

5.  pull content from the other lessons and link to those lessons (see
    example below)

### Access Data

::: callout-tip
## Putting it all together

Vectors and data frames are two major object types in R, but there are
other types that provide different functionality. You can learn more
about them [here](../lessons/data-structures.qmd)
:::
