---
title: "Object Naming and Other Style Concerns"
editor: 
  markdown: 
    wrap: 72
---

::: {.callout-caution collapse="false"}
## Learning Goals

At the end of this lesson, you should:

-   understand how to assign variables and collections of numbers to an
    object name
-   known the rules for how to name objects
-   understand reserved words in R and how to find them
-   understand how white space functions in R

:::



### Object assignment

It is rather cumbersome to continually retype numbers, even while using
a shortcut. There's a general rule of "DRY" when coding, which means
"Don't repeat yourself". We can avoid this by assigning these numbers to
an R object.

Traditionally, the left arrow is used for object assignment, `<-` (less
than symbol + a dash), but the standard equals sign, `=` also works.
These are equivalent:

```{r}
x <- 1
x = 1
```

We can assign multiple numbers to an object

```{r}
x_vector <- 1:10
y_vector <- c(2, 4, 6, 8, 10)
```

The left arrow assignment `<-` takes everything on the right side of the
arrow and assigns it the object name on the left.

### Object naming

It is your choice (mostly) about what to name R objects. There are a few
rules to follow:

-   spaces are generally not allowed and a huge pain - avoid at all
    costs!
-   Don't start with a number or symbol! (this is technically possible,
    but a huge pain)
-   choose a name that is short, yet descriptive
-   R is case sensitive, so `test` is different from `Test` and `TEST`.
    Be mindful of this! It trips many folks up.\
-   It's possible that you will thank yourself for using lowercase and
    avoiding special symbols (aside from `.` and `_`)
-   if you start a function name with a "." (e.g. `.variable`), you
    won't see it listed in the global environment (which can be
    frustrating), this is not recommended for newer R users
-   you cannot use "reserved words" from the R language (terms set aside
    for very specific purposes in R). When typing these in an R console,
    they usually light up in a special colors.

Here is [some discussion](https://intro2r.com/objects-in-r.html) on
object naming in R.

### Reserved words

| reserved word | meaning      |
|-------------|----------------| 
|`TRUE` `FALSE` | logical | 
| `NA` | missing value | 
| `NaN` | not a number/undefined | 
| `NULL` | no value/undefined | 
| `Inf`  `-Inf` | infinity | 
| `for` `in` | for loops |
| `if` `else` `while` `break` `next` `repeat` | control flow | 
| `NA_integer_` `NA_real_` `NA_complex_` `NA_character_` | missing data by data type |

It's easy to forgot these. Run `?reserved` in an R console or [check
here](https://stat.ethz.ch/R-manual/R-devel/library/base/html/Reserved.html)
to remind yourself if need be.

Some examples of reserved words in the wild:

```{r}
log(0)
0/0
2/0
```

### Some additional notes on R syntax

-   most often, the amount of white space does not matter.

These are the same:

```{r}
4/3
4/    3
4    /  3
```

These are also the same:

```{r}
log(10)
log( 10 )
log ( 10)
```

-   R expects certain things to be paired or completed before it will send it to the interpreter

-   As mentioned, earlier a hard return is sufficient to send a command to the R interpreter.

-   Exceptions: binary operators (= those expecting 2 numbers): `+`, `-`, `*`, `/`, `^`, `==`, etc

-   Exceptions: unclosed parentheses `()`, brackets `[]` `{}`, or quotes `' '` `" "`. R will wait for these to be completed. A single quote must always be complemented by a second single quote, and a double quote likewise must always have a second quote to complete it. Left parentheses, curly braces, or brackets much also be accompanying by their right-sided complement.

-   good examples

<!-- -->

    1 + 2
    { }
    ( )
    [ ]
    "  "
    ' '
    ` `

-   bad examples

<!-- -->

    1 + 
    '
    (  } ] 
    "
    ' "

-   there is no difference between double and single quotes on a practical level, but R will interpret them as different commands (so a single quote cannot close a double quote). This is useful when there is nested levels of quoting (rare), and yet, it happens now and then.

::: callout-tip
## Putting it all together


:::
